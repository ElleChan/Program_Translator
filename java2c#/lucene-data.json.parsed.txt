[{'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'skipStream'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]},
                                                                                                            {'IdentifierName': 'Seek'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'lastChildPointer'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'numSkipped'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]},
                                                                                {'SubtractExpression': [{'ElementAccessExpression': [{'IdentifierName': 'numSkipped'},
                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'level'},
                                                                                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                        {'ElementAccessExpression': [{'IdentifierName': 'skipInterval'},
                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'level'},
                                                                                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'm_skipDoc'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]},
                                                                                {'IdentifierName': 'lastDoc'}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'level'},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'childPointer'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]},
                                                                                                            {'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'skipStream'},
                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]},
                                                                                                                                                                                           {'IdentifierName': 'ReadVInt64'}]},
                                                                                                                                                         {'ArgumentList': '()'}]},
                                                                                                                               {'ElementAccessExpression': [{'IdentifierName': 'skipPointer'},
                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'level'},
                                                                                                                                                                                                                             {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'lastChildPointer'}}],
                                              'name': {'identifier': 'seek'},
                                              'scope': {'index': {'name': {'identifier': 'level'}},
                                                        'name': {'name': {'identifier': 'skipStream'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'level'}},
                                                         'name': {'name': {'identifier': 'numSkipped'}}},
                                              'value': {'left': {'index': {'left': {'name': {'identifier': 'level'}},
                                                                           'operator': 'PLUS',
                                                                           'right': {'value': '1'}},
                                                                 'name': {'name': {'identifier': 'numSkipped'}}},
                                                        'operator': 'MINUS',
                                                        'right': {'index': {'left': {'name': {'identifier': 'level'}},
                                                                            'operator': 'PLUS',
                                                                            'right': {'value': '1'}},
                                                                  'name': {'name': {'identifier': 'skipInterval'}}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'level'}},
                                                         'name': {'name': {'identifier': 'skipDoc'}}},
                                              'value': {'name': {'identifier': 'lastDoc'}}}},
                              {'condition': {'left': {'name': {'identifier': 'level'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'index': {'name': {'identifier': 'level'}},
                                                                                      'name': {'name': {'identifier': 'childPointer'}}},
                                                                           'value': {'left': {'name': {'identifier': 'readVLong'},
                                                                                              'scope': {'index': {'name': {'identifier': 'level'}},
                                                                                                        'name': {'name': {'identifier': 'skipStream'}}}},
                                                                                     'operator': 'PLUS',
                                                                                     'right': {'index': {'left': {'name': {'identifier': 'level'}},
                                                                                                         'operator': 'MINUS',
                                                                                                         'right': {'value': '1'}},
                                                                                               'name': {'name': {'identifier': 'skipPointer'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ConditionalExpression': [{'IdentifierName': 'isVerbose'},
                                                                                                                                                         {'NumericLiteralExpression': '500'},
                                                                                                                                                         {'NumericLiteralExpression': '1000'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TestRandomWords'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxNumWords'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'isVerbose'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'nextLong'},
                                                                                            'scope': {'name': {'identifier': 'random'}}}],
                                                                             'type': {'name': {'identifier': 'Random'}}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'body': {'statements': [{'condition': {'name': {'identifier': 'VERBOSE'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': '\n'
                                                                                                                                     'TEST: '
                                                                                                                                     'iter '},
                                                                                                                   'operator': 'PLUS',
                                                                                                                   'right': {'name': {'identifier': 'iter'}}}],
                                                                                                    'name': {'identifier': 'println'},
                                                                                                    'scope': {'name': {'identifier': 'out'},
                                                                                                              'scope': {'name': {'identifier': 'System'}}}}}]}},
                                                       {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'maxNumWords'}},
                                                                                                                                              'operator': 'PLUS',
                                                                                                                                              'right': {'value': '1'}}],
                                                                                                                               'name': {'identifier': 'nextInt'},
                                                                                                                               'scope': {'name': {'identifier': 'random'}}},
                                                                                                               'name': {'identifier': 'numWords'},
                                                                                                               'type': {'type': 'INT'}}]}},
                                                                                {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashSet'}}},
                                                                                                               'name': {'identifier': 'termsSet'},
                                                                                                               'type': {'name': {'identifier': 'Set'},
                                                                                                                        'typeArguments': [{'name': {'identifier': 'IntsRef'}}]}}]}},
                                                                                {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'IntsRef'}},
                                                                                                                               'levels': [{'dimension': {'name': {'identifier': 'numWords'}}}]},
                                                                                                               'name': {'identifier': 'terms'},
                                                                                                               'type': {'componentType': {'name': {'identifier': 'IntsRef'}},
                                                                                                                        'origin': 'TYPE'}}]}},
                                                                                {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}}],
                                                                                                                                                        'name': {'identifier': 'getRandomString'}},
                                                                                                                                        'name': {'identifier': 'term'},
                                                                                                                                        'type': {'name': {'identifier': 'String'}}}]}},
                                                                                                         {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'term'}},
                                                                                                                                                      {'name': {'identifier': 'inputMode'}}],
                                                                                                                                        'name': {'identifier': 'toIntsRef'}}],
                                                                                                                         'name': {'identifier': 'add'},
                                                                                                                         'scope': {'name': {'identifier': 'termsSet'}}}}]},
                                                                                 'condition': {'left': {'name': {'identifier': 'size'},
                                                                                                        'scope': {'name': {'identifier': 'termsSet'}}},
                                                                                               'operator': 'LESS',
                                                                                               'right': {'name': {'identifier': 'numWords'}}}},
                                                                                {'expression': {'arguments': [{'name': {'identifier': 'inputMode'}},
                                                                                                              {'arguments': [{'elementType': {'name': {'identifier': 'IntsRef'}},
                                                                                                                              'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                                                                                        'scope': {'name': {'identifier': 'termsSet'}}}}]}],
                                                                                                               'name': {'identifier': 'toArray'},
                                                                                                               'scope': {'name': {'identifier': 'termsSet'}}}],
                                                                                                'name': {'identifier': 'doTest'}}}]},
                                                        'compare': {'left': {'name': {'identifier': 'inputMode'}},
                                                                    'operator': 'LESS',
                                                                    'right': {'value': '2'}},
                                                        'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                           'name': {'identifier': 'inputMode'},
                                                                                           'type': {'type': 'INT'}}]}],
                                                        'update': [{'expression': {'name': {'identifier': 'inputMode'}},
                                                                    'operator': 'POSTFIX_INCREMENT'}]}]},
                               'compare': {'left': {'name': {'identifier': 'iter'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numIter'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'iter'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'iter'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RegexpQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RegexpQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'regexp'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'query'},
                                                                                                                  {'IdentifierName': 'MultiTermRewriteMethod'}]},
                                                                                {'IdentifierName': 'MultiTermRewriteMethod'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'query'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'regexp'}},
                                                                                           {'name': {'identifier': 'ALL'},
                                                                                            'scope': {'name': {'identifier': 'RegExp'}}},
                                                                                           {'name': {'identifier': 'maxDeterminizedStates'}}],
                                                                             'type': {'name': {'identifier': 'RegexpQuery'}}},
                                                             'name': {'identifier': 'query'},
                                                             'type': {'name': {'identifier': 'RegexpQuery'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'multiTermRewriteMethod'}}],
                                              'name': {'identifier': 'setRewriteMethod'},
                                              'scope': {'name': {'identifier': 'query'}}}},
                              {'expression': {'name': {'identifier': 'query'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DocValuesProducer'},
                                                                               {'VariableDeclarator': 'producer'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                              {'IdentifierName': 'Name'}]}]},
                                                                                                              {'Argument': [{'IdentifierName': 'producer'}]}]}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'producer'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'producer'},
                                                                                                                                    {'IdentifierName': 'GetNumeric'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'},
                                                                                            'scope': {'name': {'identifier': 'field'}}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'fields'}}},
                                                             'name': {'identifier': 'producer'},
                                                             'type': {'name': {'identifier': 'DocValuesProducer'}}}]}},
                              {'expression': {'condition': {'left': {'name': {'identifier': 'producer'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'arguments': [{'name': {'identifier': 'field'}}],
                                                           'name': {'identifier': 'getNumeric'},
                                                           'scope': {'name': {'identifier': 'producer'}}},
                                              'thenExpr': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Setup'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DocMaker'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RunData'},
                                                                                                                                                                {'IdentifierName': 'DocMaker'}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'docSize'},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'doc'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docMaker'},
                                                                                                                                                                        {'IdentifierName': 'MakeDocument'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'docSize'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'doc'},
                                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docMaker'},
                                                                                                                                                                                        {'IdentifierName': 'MakeDocument'}]},
                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setup'},
                                              'scope': {}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getDocMaker'},
                                                                             'scope': {'name': {'identifier': 'getRunData'}}},
                                                             'name': {'identifier': 'docMaker'},
                                                             'type': {'name': {'identifier': 'DocMaker'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'docSize'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'doc'}},
                                                                           'value': {'name': {'identifier': 'makeDocument'},
                                                                                     'scope': {'name': {'identifier': 'docMaker'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'doc'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'docSize'}}],
                                                                                     'name': {'identifier': 'makeDocument'},
                                                                                     'scope': {'name': {'identifier': 'docMaker'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'IdentifierName': 'Exists'},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'InvocationExpression': [{'IdentifierName': 'StrVal'},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                            'name': {'identifier': 'exists'}},
                                              'elseExpr': {},
                                              'thenExpr': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                           'name': {'identifier': 'strVal'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_parentQuery'},
                                                                                                                                                                                          {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'parentRewrite'},
                                                                 {'IdentifierName': '_parentQuery'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ToChildBlockJoinQuery'},
                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': '_parentQuery'}]},
                                                                                                                                                                                                          {'Argument': [{'IdentifierName': 'parentRewrite'}]},
                                                                                                                                                                                                          {'Argument': [{'IdentifierName': '_parentsFilter'}]},
                                                                                                                                                                                                          {'Argument': [{'IdentifierName': '_doScores'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rewritten'},
                                                                                                                                              {'IdentifierName': 'Boost'}]},
                                                                                                            {'IdentifierName': 'Boost'}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'rewritten'}]}]}]},
                       {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                             'name': {'identifier': 'rewrite'},
                                                                             'scope': {'name': {'identifier': 'parentQuery'}}},
                                                             'name': {'identifier': 'parentRewrite'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'parentRewrite'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'parentQuery'}}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                           'name': {'identifier': 'rewrite'},
                                                                           'scope': {}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'parentRewrite'}},
                                                                                         {'name': {'identifier': 'parentsFilter'}}],
                                                                           'type': {'name': {'identifier': 'ToChildBlockJoinQuery'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'Exists'},
                                                                       {'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'DateTime'},
                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'Value'}]}]}]},
                                                                                         {'PredefinedType': 'object'}]},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'name': {'identifier': 'exists'}},
                                              'elseExpr': {},
                                              'thenExpr': {'arguments': [{'name': {'identifier': 'value'}}],
                                                           'type': {'name': {'identifier': 'Date'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_scan_token'},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexpToken'},
                                                                                                                                    {'IdentifierName': 'TERM'}]}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Token'},
                                                                               {'VariableDeclarator': 'xsp'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'xsp'},
                                                                                {'IdentifierName': 'jj_scanpos'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_3R_4'},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jj_scanpos'},
                                                                                                            {'IdentifierName': 'xsp'}]}]},
                                                   {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_3R_5'},
                                                                                              {'ArgumentList': '()'}]},
                                                                    {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'TERM'}}],
                                             'name': {'identifier': 'jj_scan_token'}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'variables': [{'name': {'identifier': 'xsp'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'xsp'}},
                                              'value': {'name': {'identifier': 'jj_scanpos'}}}},
                              {'condition': {'name': {'identifier': 'jj_3R_4'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'jj_scanpos'}},
                                                                           'value': {'name': {'identifier': 'xsp'}}}},
                                                           {'condition': {'name': {'identifier': 'jj_3R_5'}},
                                                            'thenStmt': {'expression': {'value': 'true'}}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_scan_token'},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexpToken'},
                                                                                                                                    {'IdentifierName': 'TERM'}]}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Token'},
                                                                               {'VariableDeclarator': 'xsp'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'xsp'},
                                                                                {'IdentifierName': 'jj_scanpos'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_scan_token'},
                                                                  {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '15'}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jj_scanpos'},
                                                                                                            {'IdentifierName': 'xsp'}]}]},
                                                   {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Jj_scan_token'},
                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '16'}]}]}]},
                                                                    {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'TERM'}}],
                                             'name': {'identifier': 'jj_scan_token'}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'variables': [{'name': {'identifier': 'xsp'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'xsp'}},
                                              'value': {'name': {'identifier': 'jj_scanpos'}}}},
                              {'condition': {'arguments': [{'value': '15'}],
                                             'name': {'identifier': 'jj_scan_token'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'jj_scanpos'}},
                                                                           'value': {'name': {'identifier': 'xsp'}}}},
                                                           {'condition': {'arguments': [{'value': '16'}],
                                                                          'name': {'identifier': 'jj_scan_token'}},
                                                            'thenStmt': {'expression': {'value': 'true'}}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'Done'},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                                                                                                                      {'IdentifierName': 'Read'}]},
                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'Buffer'}]},
                                                                                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                                                                                      {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Buffer'},
                                                                                                                                                                                                                                                                      {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ClearAttributes'},
                                                                                                                      {'ArgumentList': '()'}]}]},
                                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Done'},
                                                                                                                            {'TrueLiteralExpression': 'true'}]}]},
                                                                   {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'count'},
                                                                                                          {'NumericLiteralExpression': '1'}]},
                                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                                                                    {'IdentifierName': 'CopyBuffer'}]},
                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'Buffer'}]},
                                                                                                                                                                    {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                                    {'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
                                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'done'}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'buffer'}}],
                                                                                                          'name': {'identifier': 'read'},
                                                                                                          'scope': {'name': {'identifier': 'input'}}},
                                                                                          'name': {'identifier': 'count'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'expression': {'name': {'identifier': 'clearAttributes'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'done'}},
                                                                           'value': {'value': 'true'}}},
                                                           {'condition': {'left': {'name': {'identifier': 'count'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'value': '1'}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'buffer'}},
                                                                                                                      {'value': '0'},
                                                                                                                      {'value': '1'}],
                                                                                                        'name': {'identifier': 'copyBuffer'},
                                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}]}},
                                                           {'expression': {'value': 'true'}}]},
                               'thenStmt': {'expression': {'value': 'false'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LessThanExpression': [{'IdentifierName': 'pos'},
                                                                                                                                  {'IdentifierName': 'limit'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]},
                                                                                {'IdentifierName': 'b'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'pos'}},
                                         'operator': 'LESS',
                                         'right': {'name': {'identifier': 'limit'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                                   'operator': 'POSTFIX_INCREMENT'},
                                                         'name': {'name': {'identifier': 'bytes'}}},
                                              'value': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Failures'},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'TestRuleMarkFailure'},
                                             {'IdentifierName': 'Chained'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'next'},
                                                                                                                                             {'IdentifierName': 'MarkFailed'}]},
                                                                                                           {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'failures'}},
                                              'value': {'value': 'true'}}},
                              {'body': {'statements': [{'expression': {'name': {'identifier': 'markFailed'},
                                                                       'scope': {'name': {'identifier': 'next'}}}}]},
                               'iterable': {'name': {'identifier': 'chained'}},
                               'variable': {'variables': [{'name': {'identifier': 'next'},
                                                           'type': {'name': {'identifier': 'TestRuleMarkFailure'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'bytesStart'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ReturnStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'bytesStart'},
                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                        {'IdentifierName': 'Grow'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytesStart'}]},
                                                                                                                        {'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bytesStart'},
                                                                                                                                                                                           {'IdentifierName': 'Length'}]},
                                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'bytesStart'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bytesStart'}},
                                              'value': {'arguments': [{'name': {'identifier': 'bytesStart'}},
                                                                      {'left': {'name': {'identifier': 'length'},
                                                                                'scope': {'name': {'identifier': 'bytesStart'}}},
                                                                       'operator': 'PLUS',
                                                                       'right': {'value': '1'}}],
                                                        'name': {'identifier': 'grow'},
                                                        'scope': {'name': {'identifier': 'ArrayUtil'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'TypeOfExpression': [{'IdentifierName': 'ReciprocalSingleFunction'}]},
                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'o'},
                                                                                                                             {'IdentifierName': 'GetType'}]},
                                                                                           {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AsExpression': [{'IdentifierName': 'o'},
                                                                                                                                                {'IdentifierName': 'ReciprocalSingleFunction'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'other'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                  {'IdentifierName': 'm_m'}]},
                                                                                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                  {'IdentifierName': 'm_m'}]}]},
                                                                                                                          {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                  {'IdentifierName': 'm_a'}]},
                                                                                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                  {'IdentifierName': 'm_a'}]}]}]},
                                                                                                {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                        {'IdentifierName': 'm_b'}]},
                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                        {'IdentifierName': 'm_b'}]}]}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                    {'IdentifierName': 'm_source'}]},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                  {'IdentifierName': 'm_source'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'type': {'name': {'identifier': 'ReciprocalFloatFunction'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'getClass'},
                                                       'scope': {'name': {'identifier': 'o'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'o'}},
                                                                             'type': {'name': {'identifier': 'ReciprocalFloatFunction'}}},
                                                             'name': {'identifier': 'other'},
                                                             'type': {'name': {'identifier': 'ReciprocalFloatFunction'}}}]}},
                              {'expression': {'left': {'left': {'left': {'left': {'name': {'identifier': 'm'},
                                                                                  'scope': {}},
                                                                         'operator': 'EQUALS',
                                                                         'right': {'name': {'identifier': 'm'},
                                                                                   'scope': {'name': {'identifier': 'other'}}}},
                                                                'operator': 'AND',
                                                                'right': {'left': {'name': {'identifier': 'a'},
                                                                                   'scope': {}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'a'},
                                                                                    'scope': {'name': {'identifier': 'other'}}}}},
                                                       'operator': 'AND',
                                                       'right': {'left': {'name': {'identifier': 'b'},
                                                                          'scope': {}},
                                                                 'operator': 'EQUALS',
                                                                 'right': {'name': {'identifier': 'b'},
                                                                           'scope': {'name': {'identifier': 'other'}}}}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'name': {'identifier': 'source'},
                                                                       'scope': {'name': {'identifier': 'other'}}}],
                                                        'name': {'identifier': 'equals'},
                                                        'scope': {'name': {'identifier': 'source'},
                                                                  'scope': {}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GermanStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'in'}}],
                                              'type': {'name': {'identifier': 'GermanStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'CheckIntegrity'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'checkIntegrity'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckPerformance'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'KNearestNeighborClassifier'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '100'}]}]}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'MockAnalyzer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'categoryFieldName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}}],
                                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}},
                                                             'name': {'identifier': 'analyzer'},
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'analyzer'}},
                                                                                           {'value': '100'}],
                                                                             'name': {'identifier': 'getRandomIndex'}},
                                                             'name': {'identifier': 'leafReader'},
                                                             'type': {'name': {'identifier': 'LeafReader'}}}]}},
                              {'finallyBlock': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                               'scope': {'name': {'identifier': 'leafReader'}}}}]},
                               'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentTimeMillis'},
                                                                                                          'scope': {'name': {'identifier': 'System'}}},
                                                                                          'name': {'identifier': 'trainStart'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'leafReader'}},
                                                                                                                        {},
                                                                                                                        {'name': {'identifier': 'analyzer'}},
                                                                                                                        {},
                                                                                                                        {'value': '1'},
                                                                                                                        {'value': '1'},
                                                                                                                        {'value': '1'},
                                                                                                                        {'name': {'identifier': 'categoryFieldName'}},
                                                                                                                        {'name': {'identifier': 'textFieldName'}}],
                                                                                                          'type': {'name': {'identifier': 'KNearestNeighborClassifier'}}},
                                                                                          'name': {'identifier': 'kNearestNeighborClassifier'},
                                                                                          'type': {'name': {'identifier': 'KNearestNeighborClassifier'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentTimeMillis'},
                                                                                                          'scope': {'name': {'identifier': 'System'}}},
                                                                                          'name': {'identifier': 'trainEnd'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'trainEnd'}},
                                                                                                          'operator': 'MINUS',
                                                                                                          'right': {'name': {'identifier': 'trainStart'}}},
                                                                                          'name': {'identifier': 'trainTime'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'arguments': [{'left': {'left': {'value': 'training '
                                                                                                                     'took '
                                                                                                                     'more '
                                                                                                                     'than '
                                                                                                                     '10s: '},
                                                                                                   'operator': 'PLUS',
                                                                                                   'right': {'left': {'name': {'identifier': 'trainTime'}},
                                                                                                             'operator': 'DIVIDE',
                                                                                                             'right': {'value': '1000'}}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'value': 's'}},
                                                                                         {'left': {'name': {'identifier': 'trainTime'}},
                                                                                          'operator': 'LESS',
                                                                                          'right': {'value': '10000'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentTimeMillis'},
                                                                                                          'scope': {'name': {'identifier': 'System'}}},
                                                                                          'name': {'identifier': 'evaluationStart'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'leafReader'}},
                                                                                                                        {'name': {'identifier': 'kNearestNeighborClassifier'}},
                                                                                                                        {'name': {'identifier': 'categoryFieldName'}},
                                                                                                                        {'name': {'identifier': 'textFieldName'}},
                                                                                                                        {'expression': {'value': '1'},
                                                                                                                         'operator': 'MINUS'}],
                                                                                                          'name': {'identifier': 'getConfusionMatrix'},
                                                                                                          'scope': {'name': {'identifier': 'ConfusionMatrixGenerator'}}},
                                                                                          'name': {'identifier': 'confusionMatrix'},
                                                                                          'type': {'name': {'identifier': 'ConfusionMatrix'},
                                                                                                   'scope': {'name': {'identifier': 'ConfusionMatrixGenerator'}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'confusionMatrix'}}],
                                                                           'name': {'identifier': 'assertNotNull'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentTimeMillis'},
                                                                                                          'scope': {'name': {'identifier': 'System'}}},
                                                                                          'name': {'identifier': 'evaluationEnd'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'evaluationEnd'}},
                                                                                                          'operator': 'MINUS',
                                                                                                          'right': {'name': {'identifier': 'evaluationStart'}}},
                                                                                          'name': {'identifier': 'evaluationTime'},
                                                                                          'type': {'type': 'LONG'}}]}},
                                                           {'expression': {'arguments': [{'left': {'left': {'value': 'evaluation '
                                                                                                                     'took '
                                                                                                                     'more '
                                                                                                                     'than '
                                                                                                                     '2m: '},
                                                                                                   'operator': 'PLUS',
                                                                                                   'right': {'left': {'name': {'identifier': 'evaluationTime'}},
                                                                                                             'operator': 'DIVIDE',
                                                                                                             'right': {'value': '1000'}}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'value': 's'}},
                                                                                         {'left': {'name': {'identifier': 'evaluationTime'}},
                                                                                          'operator': 'LESS',
                                                                                          'right': {'value': '120000'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getAvgClassificationTime'},
                                                                                                          'scope': {'name': {'identifier': 'confusionMatrix'}}},
                                                                                          'name': {'identifier': 'avgClassificationTime'},
                                                                                          'type': {'type': 'DOUBLE'}}]}},
                                                           {'expression': {'arguments': [{'left': {'value': '5000'},
                                                                                          'operator': 'GREATER',
                                                                                          'right': {'name': {'identifier': 'avgClassificationTime'}}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getAccuracy'},
                                                                                                          'scope': {'name': {'identifier': 'confusionMatrix'}}},
                                                                                          'name': {'identifier': 'accuracy'},
                                                                                          'type': {'type': 'DOUBLE'}}]}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'accuracy'}},
                                                                                          'operator': 'GREATER_EQUALS',
                                                                                          'right': {'value': '0d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'accuracy'}},
                                                                                          'operator': 'LESS_EQUALS',
                                                                                          'right': {'value': '1d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getRecall'},
                                                                                                          'scope': {'name': {'identifier': 'confusionMatrix'}}},
                                                                                          'name': {'identifier': 'recall'},
                                                                                          'type': {'type': 'DOUBLE'}}]}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'recall'}},
                                                                                          'operator': 'GREATER_EQUALS',
                                                                                          'right': {'value': '0d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'recall'}},
                                                                                          'operator': 'LESS_EQUALS',
                                                                                          'right': {'value': '1d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getPrecision'},
                                                                                                          'scope': {'name': {'identifier': 'confusionMatrix'}}},
                                                                                          'name': {'identifier': 'precision'},
                                                                                          'type': {'type': 'DOUBLE'}}]}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'precision'}},
                                                                                          'operator': 'GREATER_EQUALS',
                                                                                          'right': {'value': '0d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'precision'}},
                                                                                          'operator': 'LESS_EQUALS',
                                                                                          'right': {'value': '1d'}}],
                                                                           'name': {'identifier': 'assertTrue'}}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'leafReader'}},
                                                                                                                        {'name': {'identifier': 'categoryFieldName'}}],
                                                                                                          'name': {'identifier': 'getTerms'},
                                                                                                          'scope': {'name': {'identifier': 'MultiFields'}}},
                                                                                          'name': {'identifier': 'terms'},
                                                                                          'type': {'name': {'identifier': 'Terms'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                                                          'scope': {'name': {'identifier': 'terms'}}},
                                                                                          'name': {'identifier': 'iterator'},
                                                                                          'type': {'name': {'identifier': 'TermsEnum'}}}]}},
                                                           {'expression': {'variables': [{'name': {'identifier': 'term'},
                                                                                          'type': {'name': {'identifier': 'BytesRef'}}}]}},
                                                           {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'utf8ToString'},
                                                                                                                                   'scope': {'name': {'identifier': 'term'}}},
                                                                                                                   'name': {'identifier': 's'},
                                                                                                                   'type': {'name': {'identifier': 'String'}}}]}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'recall'}},
                                                                                                    'value': {'arguments': [{'name': {'identifier': 's'}}],
                                                                                                              'name': {'identifier': 'getRecall'},
                                                                                                              'scope': {'name': {'identifier': 'confusionMatrix'}}}}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'recall'}},
                                                                                                                   'operator': 'GREATER_EQUALS',
                                                                                                                   'right': {'value': '0d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'recall'}},
                                                                                                                   'operator': 'LESS_EQUALS',
                                                                                                                   'right': {'value': '1d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'precision'}},
                                                                                                    'value': {'arguments': [{'name': {'identifier': 's'}}],
                                                                                                              'name': {'identifier': 'getPrecision'},
                                                                                                              'scope': {'name': {'identifier': 'confusionMatrix'}}}}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'precision'}},
                                                                                                                   'operator': 'GREATER_EQUALS',
                                                                                                                   'right': {'value': '0d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'precision'}},
                                                                                                                   'operator': 'LESS_EQUALS',
                                                                                                                   'right': {'value': '1d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}},
                                                                                    {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 's'}}],
                                                                                                                                   'name': {'identifier': 'getF1Measure'},
                                                                                                                                   'scope': {'name': {'identifier': 'confusionMatrix'}}},
                                                                                                                   'name': {'identifier': 'f1Measure'},
                                                                                                                   'type': {'type': 'DOUBLE'}}]}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'f1Measure'}},
                                                                                                                   'operator': 'GREATER_EQUALS',
                                                                                                                   'right': {'value': '0d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}},
                                                                                    {'expression': {'arguments': [{'left': {'name': {'identifier': 'f1Measure'}},
                                                                                                                   'operator': 'LESS_EQUALS',
                                                                                                                   'right': {'value': '1d'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}}]},
                                                            'condition': {'left': {'inner': {'operator': 'ASSIGN',
                                                                                             'target': {'name': {'identifier': 'term'}},
                                                                                             'value': {'name': {'identifier': 'next'},
                                                                                                       'scope': {'name': {'identifier': 'iterator'}}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MultiPhraseQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MultiPhraseQueryNode'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                                              {'IdentifierName': 'CloneTree'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'cloneTree'},
                                                                                            'scope': {}},
                                                                             'type': {'name': {'identifier': 'MultiPhraseQueryNode'}}},
                                                             'name': {'identifier': 'clone'},
                                                             'type': {'name': {'identifier': 'MultiPhraseQueryNode'}}}]}},
                              {'expression': {'name': {'identifier': 'clone'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'other'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'IsExpression': [{'IdentifierName': 'other'},
                                                          {'IdentifierName': 'Int64sRef'}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                    {'IdentifierName': 'Int64sEquals'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'Int64sRef'},
                                                                                                                                                      {'IdentifierName': 'other'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'other'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'other'}},
                                             'type': {'name': {'identifier': 'LongsRef'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 'other'}},
                                                                                          'type': {'name': {'identifier': 'LongsRef'}}}],
                                                                           'name': {'identifier': 'longsEquals'},
                                                                           'scope': {}}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                      {'LessThanExpression': [{'IdentifierName': 'j'},
                                                                                              {'IdentifierName': 'NumDocs'}]},
                                                                      {'PostIncrementExpression': [{'IdentifierName': 'j'}]},
                                                                      {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Document'},
                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Document'},
                                                                                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                                                                                 {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                                                                                      {'IdentifierName': 'Add'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TextField'},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'Field'}]},
                                                                                                                                                                                                                    {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'PoolingPayloadTokenStream'},
                                                                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'OuterInstance'}]},
                                                                                                                                                                                                                                                                                  {'Argument': [{'IdentifierName': 'Pool'}]}]}]}]}]}]}]}]}]}]},
                                                                                 {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Writer'},
                                                                                                                                                                      {'IdentifierName': 'AddDocument'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]}]}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Console'},
                                                                                                                                                          {'IdentifierName': 'WriteLine'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                                                    {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]},
                                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Console'},
                                                                                                                                                          {'IdentifierName': 'Write'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                          {'IdentifierName': 'StackTrace'}]}]}]}]}]},
                                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                                          {'IdentifierName': 'Fail'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                                                    {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'name': {'identifier': 'printStackTrace'},
                                                                                         'scope': {'name': {'identifier': 'e'}}}},
                                                                         {'expression': {'arguments': [{'name': {'identifier': 'toString'},
                                                                                                        'scope': {'name': {'identifier': 'e'}}}],
                                                                                         'name': {'identifier': 'fail'}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Document'}}},
                                                                                                                   'name': {'identifier': 'd'},
                                                                                                                   'type': {'name': {'identifier': 'Document'}}}]}},
                                                                                    {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'field'}},
                                                                                                                                 {'arguments': [{'name': {'identifier': 'pool'}}],
                                                                                                                                  'type': {'name': {'identifier': 'PoolingPayloadTokenStream'}}}],
                                                                                                                   'type': {'name': {'identifier': 'TextField'}}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'd'}}}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'd'}}],
                                                                                                    'name': {'identifier': 'addDocument'},
                                                                                                    'scope': {'name': {'identifier': 'writer'}}}}]},
                                                            'compare': {'left': {'name': {'identifier': 'j'}},
                                                                        'operator': 'LESS',
                                                                        'right': {'name': {'identifier': 'numDocs'}}},
                                                            'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                               'name': {'identifier': 'j'},
                                                                                               'type': {'type': 'INT'}}]}],
                                                            'update': [{'expression': {'name': {'identifier': 'j'}},
                                                                        'operator': 'POSTFIX_INCREMENT'}]}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'meta'},
                                                                                                            {'IdentifierName': 'WriteVInt32'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                            {'IdentifierName': 'Number'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'meta'},
                                                                                                            {'IdentifierName': 'WriteByte'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MemoryDocValuesProducer'},
                                                                                                                                            {'IdentifierName': 'BYTES'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddBinaryFieldValues'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                            {'Argument': [{'IdentifierName': 'values'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'number'},
                                                             'scope': {'name': {'identifier': 'field'}}}],
                                              'name': {'identifier': 'writeVInt'},
                                              'scope': {'name': {'identifier': 'meta'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'BYTES'}}],
                                              'name': {'identifier': 'writeByte'},
                                              'scope': {'name': {'identifier': 'meta'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'field'}},
                                                            {'arguments': [{'name': {'identifier': 'field'}},
                                                                           {'name': {'identifier': 'valuesProducer'}},
                                                                           {'name': {'identifier': 'maxDoc'}}],
                                                             'name': {'identifier': 'binaryIterable'},
                                                             'scope': {'name': {'identifier': 'LegacyDocValuesIterables'}}}],
                                              'name': {'identifier': 'addBinaryFieldValues'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'o'}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'o'},
                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                 {'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                      {'IdentifierName': 'GetType'}]},
                                                                                                                    {'ArgumentList': '()'}]},
                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'o'},
                                                                                                                                                      {'IdentifierName': 'GetType'}]},
                                                                                                                    {'ArgumentList': '()'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'o'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'EnumFieldSource'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'EnumFieldSource'},
                                                                                                                                                  {'IdentifierName': 'o'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Collections'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'enumIntToStringMap'}]},
                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'that'},
                                                                                                                                                              {'IdentifierName': 'enumIntToStringMap'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Collections'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'enumStringToIntMap'}]},
                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'that'},
                                                                                                                                                              {'IdentifierName': 'enumStringToIntMap'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'parser'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'that'},
                                                                                                                                                              {'IdentifierName': 'parser'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'o'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'o'}},
                                                      'operator': 'EQUALS',
                                                      'right': {}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'getClass'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {'name': {'identifier': 'getClass'},
                                                                 'scope': {'name': {'identifier': 'o'}}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'o'}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'o'}},
                                                                             'type': {'name': {'identifier': 'EnumFieldSource'}}},
                                                             'name': {'identifier': 'that'},
                                                             'type': {'name': {'identifier': 'EnumFieldSource'}}}]}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'enumIntToStringMap'},
                                                                           'scope': {'name': {'identifier': 'that'}}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {'name': {'identifier': 'enumIntToStringMap'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'enumStringToIntMap'},
                                                                           'scope': {'name': {'identifier': 'that'}}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {'name': {'identifier': 'enumStringToIntMap'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'bufferPosition'},
                                                                {'IdentifierName': 'iterationMarkSpanEndPosition'}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Normalize'},
                                                                                                  {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'SourceCharacter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'bufferPosition'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'iterationMarksSpanSize'}]}]}]}]},
                                                                                                                    {'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'bufferPosition'},
                                                              {'IdentifierName': 'iterationMarkSpanEndPosition'}]},
                                        {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'iterationMarkSpanEndPosition'}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'c'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'iterationMarksSpanSize'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'NextIterationMarkSpanSize'},
                                                                                                          {'ArgumentList': '()'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'iterationMarkSpanEndPosition'},
                                                                                {'AddExpression': [{'IdentifierName': 'bufferPosition'},
                                                                                                   {'IdentifierName': 'iterationMarksSpanSize'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Normalize'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'SourceCharacter'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'bufferPosition'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'iterationMarksSpanSize'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'c'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'bufferPosition'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'iterationMarkSpanEndPosition'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'bufferPosition'}},
                                                                                                        {'name': {'identifier': 'iterationMarksSpanSize'}}],
                                                                                          'name': {'identifier': 'sourceCharacter'}},
                                                                                         {'name': {'identifier': 'c'}}],
                                                                           'name': {'identifier': 'normalize'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'bufferPosition'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'iterationMarkSpanEndPosition'}}},
                               'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'iterationMarkSpanEndPosition'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}},
                                                           {'expression': {'name': {'identifier': 'c'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'iterationMarksSpanSize'}},
                                              'value': {'name': {'identifier': 'nextIterationMarkSpanSize'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'iterationMarkSpanEndPosition'}},
                                              'value': {'left': {'name': {'identifier': 'bufferPosition'}},
                                                        'operator': 'PLUS',
                                                        'right': {'name': {'identifier': 'iterationMarksSpanSize'}}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'bufferPosition'}},
                                                                           {'name': {'identifier': 'iterationMarksSpanSize'}}],
                                                             'name': {'identifier': 'sourceCharacter'}},
                                                            {'name': {'identifier': 'c'}}],
                                              'name': {'identifier': 'normalize'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'state'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'state'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'v'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'inputType'},
                                                              {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FST'},
                                                                                                                                  {'IdentifierName': 'INPUT_TYPE'}]},
                                                                                                {'IdentifierName': 'BYTE1'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v'},
                                                                                                            {'BitwiseAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                                  {'IdentifierName': 'ReadByte'}]},
                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                      {'NumericLiteralExpression': '0xFF'}]}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'inputType'},
                                                                                               {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FST'},
                                                                                                                                                                   {'IdentifierName': 'INPUT_TYPE'}]},
                                                                                                                                 {'IdentifierName': 'BYTE2'}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v'},
                                                                                                                                             {'BitwiseAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                                                                   {'IdentifierName': 'ReadInt16'}]},
                                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                                       {'NumericLiteralExpression': '0xFFFF'}]}]}]}]},
                                                                         {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v'},
                                                                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                                                         {'IdentifierName': 'ReadVInt32'}]},
                                                                                                                                                                                       {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'v'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'v'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'inputType'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'BYTE1'},
                                                       'scope': {'name': {'identifier': 'INPUT_TYPE'}}}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'inputType'}},
                                                          'operator': 'EQUALS',
                                                          'right': {'name': {'identifier': 'BYTE2'},
                                                                    'scope': {'name': {'identifier': 'INPUT_TYPE'}}}},
                                            'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                        'target': {'name': {'identifier': 'v'}},
                                                                                        'value': {'name': {'identifier': 'readVInt'},
                                                                                                  'scope': {'name': {'identifier': 'in'}}}}}]},
                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                        'target': {'name': {'identifier': 'v'}},
                                                                                        'value': {'left': {'name': {'identifier': 'readShort'},
                                                                                                           'scope': {'name': {'identifier': 'in'}}},
                                                                                                  'operator': 'BINARY_AND',
                                                                                                  'right': {'value': '0xFFFF'}}}}]}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'v'}},
                                                                           'value': {'left': {'name': {'identifier': 'readByte'},
                                                                                              'scope': {'name': {'identifier': 'in'}}},
                                                                                     'operator': 'BINARY_AND',
                                                                                     'right': {'value': '0xFF'}}}}]}},
                              {'expression': {'name': {'identifier': 'v'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'stack'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'name': {'identifier': 'level'}},
                                              'name': {'name': {'identifier': 'stack'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AssertingDocValuesFormat'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'type': {'name': {'identifier': 'AssertingDocValuesFormat'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 'to'},
                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'to'}]}]}]}]},
                       {'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'f'},
                                                                      {'IdentifierName': 'from'}]},
                                           {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'InvocationExpression': [{'IdentifierName': 'CompareSaved'},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'val'}]},
                                                                                                                                                     {'Argument': [{'IdentifierName': 'f'}]}]}]},
                                                                                                         {'NumericLiteralExpression': '0'}]},
                                                                       {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'UpperSaved'},
                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]},
                                                                                                                                                   {'Argument': [{'IdentifierName': 't'}]},
                                                                                                                                                   {'Argument': [{'IdentifierName': 'val'}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                     {'IdentifierName': 'f'}]}]}]}]}]},
                                                      {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 't'},
                                                                                                               {'IdentifierName': 'f'}]}]},
                                                      {'ExpressionStatement': [{'SubtractAssignmentExpression': [{'IdentifierName': 'f'},
                                                                                                                 {'LeftShiftExpression': [{'IdentifierName': 'delta'},
                                                                                                                                          {'NumericLiteralExpression': '1'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'UpperSaved'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'from'}]},
                                                                                        {'Argument': [{'IdentifierName': 't'}]},
                                                                                        {'Argument': [{'IdentifierName': 'val'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'to'}},
                                                                             'operator': 'MINUS',
                                                                             'right': {'value': '1'}},
                                                             'name': {'identifier': 'f'},
                                                             'type': {'type': 'INT'}},
                                                            {'initializer': {'name': {'identifier': 'to'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'val'}},
                                                                                             {'name': {'identifier': 'f'}}],
                                                                               'name': {'identifier': 'compareSaved'}},
                                                                      'operator': 'GREATER_EQUALS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'f'}},
                                                                                                                  {'name': {'identifier': 't'}},
                                                                                                                  {'name': {'identifier': 'val'}}],
                                                                                                    'name': {'identifier': 'upperSaved'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 't'}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'name': {'identifier': 'f'}}},
                                                                                      'name': {'identifier': 'delta'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 't'}},
                                                                       'value': {'name': {'identifier': 'f'}}}},
                                                       {'expression': {'operator': 'MINUS',
                                                                       'target': {'name': {'identifier': 'f'}},
                                                                       'value': {'left': {'name': {'identifier': 'delta'}},
                                                                                 'operator': 'LEFT_SHIFT',
                                                                                 'right': {'value': '1'}}}}]},
                               'condition': {'left': {'name': {'identifier': 'f'}},
                                             'operator': 'GREATER',
                                             'right': {'name': {'identifier': 'from'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'from'}},
                                                            {'name': {'identifier': 't'}},
                                                            {'name': {'identifier': 'val'}}],
                                              'name': {'identifier': 'upperSaved'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'it'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'it'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cachedStates'},
                                                                                                                                                                        {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'it'},
                                                                                                                              {'IdentifierName': 'MoveNext'}]},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'it'},
                                                                                                                                                                {'IdentifierName': 'Current'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RestoreState'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'hasNext'},
                                                            'scope': {'name': {'identifier': 'it'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'next'},
                                                                             'scope': {'name': {'identifier': 'it'}}},
                                                             'name': {'identifier': 'state'},
                                                             'type': {'name': {'identifier': 'State'},
                                                                      'scope': {'name': {'identifier': 'AttributeSource'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'name': {'identifier': 'restoreState'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'delGen'},
                                                                                {'IdentifierName': 'nextWriteDelGen'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'nextWriteDelGen'},
                                                                                {'AddExpression': [{'IdentifierName': 'delGen'},
                                                                                                   {'NumericLiteralExpression': '1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'delGen'}},
                                              'value': {'name': {'identifier': 'nextWriteDelGen'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'nextWriteDelGen'}},
                                              'value': {'left': {'name': {'identifier': 'delGen'}},
                                                        'operator': 'PLUS',
                                                        'right': {'value': '1'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'sizeInBytes'}},
                                              'value': {'expression': {'value': '1'},
                                                        'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Collections'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]},
                                                                                        {'Argument': [{'IdentifierName': 'b'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'b'}}],
                                              'name': {'identifier': 'equals'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'hasPayloads'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldInfo'},
                                                                                                                                        {'IdentifierName': 'SetStorePayloads'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'finish'},
                                              'scope': {}}},
                              {'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'sumDocFreq'}},
                                              'value': {'name': {'identifier': 'uniqueTermCount'},
                                                        'scope': {'name': {'identifier': 'fieldState'}}}}},
                              {'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'sumTotalTermFreq'}},
                                              'value': {'name': {'identifier': 'length'},
                                                        'scope': {'name': {'identifier': 'fieldState'}}}}},
                              {'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'fieldState'}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'docCount'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}}]}},
                              {'condition': {'name': {'identifier': 'sawPayloads'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'setStorePayloads'},
                                                                           'scope': {'name': {'identifier': 'fieldInfo'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_buffer'},
                                                                                                                                                                {'IdentifierName': 'Position'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                          {'IdentifierName': 'Put'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'entry'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CharacterDefinition'},
                                                                                                                                                                                          {'IdentifierName': 'LookupCharacterClass'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddMapping'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'characterId'}]},
                                                                                            {'Argument': [{'IdentifierName': 'wordId'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'position'},
                                                                             'scope': {'name': {'identifier': 'buffer'}}},
                                                             'name': {'identifier': 'wordId'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'entry'}}],
                                                                             'name': {'identifier': 'put'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'index': {'value': '0'},
                                                                                            'name': {'name': {'identifier': 'entry'}}}],
                                                                             'name': {'identifier': 'lookupCharacterClass'},
                                                                             'scope': {'name': {'identifier': 'CharacterDefinition'}}},
                                                             'name': {'identifier': 'characterId'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'characterId'}},
                                                            {'name': {'identifier': 'wordId'}}],
                                              'name': {'identifier': 'addMapping'}}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'slowdown'},
                                                                                {'IdentifierName': 'milliseconds'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'slowdown'}},
                                              'value': {'name': {'identifier': 'milliseconds'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'trie'},
                                                                                                        {'IdentifierName': 'Get'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'trie'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_x'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'I_x'},
                                                                                                                                 {'IdentifierName': 'I_p2'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_x'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'condition': {'expression': {'inner': {'left': {'name': {'identifier': 'I_x'}},
                                                                      'operator': 'GREATER_EQUALS',
                                                                      'right': {'name': {'identifier': 'I_p2'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_clauses'},
                                                                                                        {'IdentifierName': 'ToArray'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'elementType': {'name': {'identifier': 'SpanQuery'}},
                                                             'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                       'scope': {'name': {'identifier': 'clauses'}}}}]}],
                                              'name': {'identifier': 'toArray'},
                                              'scope': {'name': {'identifier': 'clauses'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_x'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'I_x'},
                                                                                                                                 {'IdentifierName': 'I_p1'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_x'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'condition': {'expression': {'inner': {'left': {'name': {'identifier': 'I_x'}},
                                                                      'operator': 'GREATER_EQUALS',
                                                                      'right': {'name': {'identifier': 'I_p1'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ScoreDoc'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                            {'IdentifierName': 'MaxValue'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'float'},
                                                                                                                                            {'IdentifierName': 'NegativeInfinity'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'MAX_VALUE'},
                                                             'scope': {'name': {'identifier': 'Integer'}}},
                                                            {'name': {'identifier': 'NEGATIVE_INFINITY'},
                                                             'scope': {'name': {'identifier': 'Float'}}}],
                                              'type': {'name': {'identifier': 'ScoreDoc'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'MatchingDocs'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'MatchingDocs'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'matchingDocsList'},
                                                                                                                                                                                                                                                        {'IdentifierName': 'Count'}]},
                                                                                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'MatchingDocs'},
                                             {'IdentifierName': 'matchingDocsList'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sampledDocsList'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CreateSample'},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'sampledDocsList'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'size'},
                                                                                            'scope': {'name': {'identifier': 'matchingDocsList'}}}],
                                                                             'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'sampledDocsList'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'MatchingDocs'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'docs'}}],
                                                                                      'name': {'identifier': 'createSample'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'sampledDocsList'}}}}]},
                               'iterable': {'name': {'identifier': 'matchingDocsList'}},
                               'variable': {'variables': [{'name': {'identifier': 'docs'},
                                                           'type': {'name': {'identifier': 'MatchingDocs'}}}]}},
                              {'expression': {'name': {'identifier': 'sampledDocsList'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'GreaterThanOrEqualExpression': [{'ParenthesizedExpression': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'suffixed'},
                                                                                                                                                                     {'IdentifierName': 'Length'}]},
                                                                                                                                   {'NumericLiteralExpression': '1'}]}]},
                                                                              {'IdentifierName': 'minimumPrefixLength'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'name': {'identifier': 'length'},
                                                                          'scope': {'name': {'identifier': 'suffixed'}}},
                                                                 'operator': 'MINUS',
                                                                 'right': {'value': '1'}}},
                                              'operator': 'GREATER_EQUALS',
                                              'right': {'name': {'identifier': 'MINIMUM_PREFIX_LENGTH'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'PreIncrementExpression': [{'IdentifierName': 'm_curPos'}]},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'm_entries'},
                                                                                                  {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_entries'},
                                                                                                                                        {'IdentifierName': 'Get'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'spare'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'm_curPos'}]}]}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'spare'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'curPos'}},
                                                      'operator': 'PREFIX_INCREMENT'},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'size'},
                                                       'scope': {'name': {'identifier': 'entries'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'spare'}},
                                                                                         {'name': {'identifier': 'curPos'}}],
                                                                           'name': {'identifier': 'get'},
                                                                           'scope': {'name': {'identifier': 'entries'}}}},
                                                           {'expression': {'name': {'identifier': 'get'},
                                                                           'scope': {'name': {'identifier': 'spare'}}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'size'},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'T'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]},
                                                                                                            {'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'size'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'size'}]}]}]},
                                                                                                            {'DefaultExpression': [{'IdentifierName': 'T'}]}]}]},
                                                   {'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'size'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DownHeap'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'DefaultExpression': [{'IdentifierName': 'T'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {}}]},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'value': '1'},
                                                                                                          'name': {'name': {'identifier': 'heap'}}},
                                                                                          'name': {'identifier': 'result'},
                                                                                          'type': {'name': {'identifier': 'T'}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'index': {'value': '1'},
                                                                                      'name': {'name': {'identifier': 'heap'}}},
                                                                           'value': {'index': {'name': {'identifier': 'size'}},
                                                                                     'name': {'name': {'identifier': 'heap'}}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'index': {'name': {'identifier': 'size'}},
                                                                                      'name': {'name': {'identifier': 'heap'}}},
                                                                           'value': {}}},
                                                           {'expression': {'expression': {'name': {'identifier': 'size'}},
                                                                           'operator': 'POSTFIX_DECREMENT'}},
                                                           {'expression': {'arguments': [{'value': '1'}],
                                                                           'name': {'identifier': 'downHeap'}}},
                                                           {'expression': {'name': {'identifier': 'result'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MultiPhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MultiPhraseQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'ArrayType': [{'IdentifierName': 'Token'},
                                                            {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                             {'IdentifierName': 'INCR_0_QUERY_TOKENS_AND_OR_MATCH'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'IdentifierName': 'Term'},
                                                                                                                               {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'TapTerms'},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'tap'}]}]}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tap'},
                                                                                                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                                                                                                                                         {'IdentifierName': 'PositionIncrement'}]},
                                                                                                                                                                                       {'NumericLiteralExpression': '1'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mpq'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'terms'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'pos'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestZeroPosIncrSloppy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'mpq'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mpq'},
                                                                                                                  {'IdentifierName': 'Slop'}]},
                                                                                {'NumericLiteralExpression': '1'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestZeroPosIncrSloppy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'mpq'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mpq'},
                                                                                                                  {'IdentifierName': 'Slop'}]},
                                                                                {'NumericLiteralExpression': '2'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestZeroPosIncrSloppy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'mpq'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Builder'},
                                                                                      'scope': {'name': {'identifier': 'MultiPhraseQuery'}}}},
                                                             'name': {'identifier': 'mpqb'},
                                                             'type': {'name': {'identifier': 'Builder'},
                                                                      'scope': {'name': {'identifier': 'MultiPhraseQuery'}}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'tap'}}],
                                                                                                      'name': {'identifier': 'tapTerms'}},
                                                                                      'name': {'identifier': 'terms'},
                                                                                      'type': {'componentType': {'name': {'identifier': 'Term'}},
                                                                                               'origin': 'TYPE'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'getPositionIncrement'},
                                                                                                               'scope': {'index': {'value': '0'},
                                                                                                                         'name': {'name': {'identifier': 'tap'}}}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'value': '1'}},
                                                                                      'name': {'identifier': 'pos'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'terms'}},
                                                                                     {'name': {'identifier': 'pos'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'mpqb'}}}}]},
                               'iterable': {'name': {'identifier': 'INCR_0_QUERY_TOKENS_AND_OR_MATCH'}},
                               'variable': {'variables': [{'name': {'identifier': 'tap'},
                                                           'type': {'componentType': {'name': {'identifier': 'Token'}},
                                                                    'origin': 'NAME'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'build'},
                                                             'scope': {'name': {'identifier': 'mpqb'}}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'doTestZeroPosIncrSloppy'}}},
                              {'expression': {'arguments': [{'value': '1'}],
                                              'name': {'identifier': 'setSlop'},
                                              'scope': {'name': {'identifier': 'mpqb'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'build'},
                                                             'scope': {'name': {'identifier': 'mpqb'}}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'doTestZeroPosIncrSloppy'}}},
                              {'expression': {'arguments': [{'value': '2'}],
                                              'name': {'identifier': 'setSlop'},
                                              'scope': {'name': {'identifier': 'mpqb'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'build'},
                                                             'scope': {'name': {'identifier': 'mpqb'}}},
                                                            {'value': '1'}],
                                              'name': {'identifier': 'doTestZeroPosIncrSloppy'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestIndexWriterReopenSegment'},
                                                                          {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'doTestIndexWriterReopenSegment'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'outputUnigrams'}]},
                                                                                {'IdentifierName': 'outputUnigrams'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'gramSize'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'CircularSequence'},
                                                                                                              {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'outputUnigrams'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'outputUnigrams'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'gramSize'}},
                                              'value': {'type': {'name': {'identifier': 'CircularSequence'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CommonGramsFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_luceneMatchVersion'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'commonWords'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'commonGrams'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'input'}},
                                                                                           {'name': {'identifier': 'commonWords'}}],
                                                                             'type': {'name': {'identifier': 'CommonGramsFilter'}}},
                                                             'name': {'identifier': 'commonGrams'},
                                                             'type': {'name': {'identifier': 'CommonGramsFilter'}}}]}},
                              {'expression': {'name': {'identifier': 'commonGrams'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Input'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'input'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'prefixLen'},
                                                                   {'IdentifierName': 'len'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'prefixLen'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                              {'ElementAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]},
                                                                     {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'prefix'}}},
                                                             'name': {'identifier': 'prefixLen'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'prefixLen'}},
                                             'operator': 'GREATER',
                                             'right': {'name': {'identifier': 'len'}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'body': {'condition': {'left': {'index': {'name': {'identifier': 'i'}},
                                                               'name': {'name': {'identifier': 's'}}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                'name': {'identifier': 'charAt'},
                                                                'scope': {'name': {'identifier': 'prefix'}}}},
                                        'thenStmt': {'expression': {'value': 'false'}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'prefixLen'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fragA'},
                                                                                                {'IdentifierName': 'Score'}]},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'fragB'},
                                                                                                {'IdentifierName': 'Score'}]}]},
                                        {'ReturnStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fragA'},
                                                                                                                          {'IdentifierName': 'FragNum'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'fragB'},
                                                                                                                          {'IdentifierName': 'FragNum'}]}]}]},
                                        {'ElseClause': [{'ReturnStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fragA'},
                                                                                                                                       {'IdentifierName': 'Score'}]},
                                                                                                     {'SimpleMemberAccessExpression': [{'IdentifierName': 'fragB'},
                                                                                                                                       {'IdentifierName': 'Score'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'getScore'},
                                                      'scope': {'name': {'identifier': 'fragA'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'getScore'},
                                                       'scope': {'name': {'identifier': 'fragB'}}}},
                               'elseStmt': {'expression': {'left': {'name': {'identifier': 'getScore'},
                                                                    'scope': {'name': {'identifier': 'fragA'}}},
                                                           'operator': 'LESS',
                                                           'right': {'name': {'identifier': 'getScore'},
                                                                     'scope': {'name': {'identifier': 'fragB'}}}}},
                               'thenStmt': {'expression': {'left': {'name': {'identifier': 'fragNum'},
                                                                    'scope': {'name': {'identifier': 'fragA'}}},
                                                           'operator': 'GREATER',
                                                           'right': {'name': {'identifier': 'fragNum'},
                                                                     'scope': {'name': {'identifier': 'fragB'}}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'liveDocs'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'n'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'n'}}],
                                              'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'liveDocs'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'hash'},
                                                                                                                                                                                          {'IdentifierName': 'Add'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'value'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'termID'},
                                                                {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'termID'},
                                                                                                            {'SubtractExpression': [{'UnaryMinusExpression': [{'IdentifierName': 'termID'}]},
                                                                                                                                    {'NumericLiteralExpression': '1'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iwBytesUsed'},
                                                                                                                                                        {'IdentifierName': 'AddAndGet'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '2'},
                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                                {'IdentifierName': 'NUM_BYTES_INT32'}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pending'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'termID'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'UpdateBytesUsed'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'value'}}],
                                                                             'name': {'identifier': 'add'},
                                                                             'scope': {'name': {'identifier': 'hash'}}},
                                                             'name': {'identifier': 'termID'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'termID'}},
                                             'operator': 'LESS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': '2'},
                                                                                          'operator': 'MULTIPLY',
                                                                                          'right': {'name': {'identifier': 'BYTES'},
                                                                                                    'scope': {'name': {'identifier': 'Integer'}}}}],
                                                                           'name': {'identifier': 'addAndGet'},
                                                                           'scope': {'name': {'identifier': 'iwBytesUsed'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'termID'}},
                                                                           'value': {'left': {'expression': {'name': {'identifier': 'termID'}},
                                                                                              'operator': 'MINUS'},
                                                                                     'operator': 'MINUS',
                                                                                     'right': {'value': '1'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'termID'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'pending'}}}},
                              {'expression': {'name': {'identifier': 'updateBytesUsed'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PortugueseAnalyzer'},
                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'type': {'name': {'identifier': 'PortugueseAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'stack'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'level'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'name': {'identifier': 'level'}},
                                              'name': {'name': {'identifier': 'stack'}}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'from'},
                                                                   {'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                     {'IdentifierName': 'Length'}]}]},
                                           {'Block': [{'IfStatement': [{'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'from'}]}]}]},
                                                                                             {'CharacterLiteralExpression': "'-'"}]},
                                                                       {'Block': [{'ReturnStatement': [{'IdentifierName': 'from'}]}]},
                                                                       {'ElseClause': [{'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'from'},
                                                                                                                                                        {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'from'}}],
                                                                               'name': {'identifier': 'charAt'},
                                                                               'scope': {'name': {'identifier': 'in'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'value': '-'}},
                                                        'elseStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                                                    'target': {'name': {'identifier': 'from'}},
                                                                                                    'value': {'value': '2'}}}]},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'from'}}}]}}]},
                               'condition': {'left': {'name': {'identifier': 'from'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'in'}}}}},
                              {'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '4'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '4'},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'FOUR_GRAM_TOKENS_WITHOUT_UNIGRAMS'}},
                                                            {'name': {'identifier': 'FOUR_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS'}},
                                                            {'name': {'identifier': 'FOUR_GRAM_TYPES_WITHOUT_UNIGRAMS'}},
                                                            {'value': 'false'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'Index'},
                                                                {'IdentifierName': 'n'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ClearAttributes'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                                                           {'IdentifierName': 'Buffer'}]},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                            {'CharacterLiteralExpression': "'a'"}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                              {'IdentifierName': 'Length'}]},
                                                                                                            {'NumericLiteralExpression': '1'}]}]},
                                                   {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'Index'}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'index'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'n'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'clearAttributes'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'index': {'value': '0'},
                                                                                      'name': {'name': {'identifier': 'buffer'},
                                                                                               'scope': {'name': {'identifier': 'termAtt'}}}},
                                                                           'value': {'value': 'a'}}},
                                                           {'expression': {'arguments': [{'value': '1'}],
                                                                           'name': {'identifier': 'setLength'},
                                                                           'scope': {'name': {'identifier': 'termAtt'}}}},
                                                           {'expression': {'expression': {'name': {'identifier': 'index'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}},
                                                           {'expression': {'value': 'true'}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DistanceToShapeValueSource'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'MakeShapeValueSource'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'queryPoint'}]},
                                                                                            {'Argument': [{'IdentifierName': 'multiplier'}]},
                                                                                            {'Argument': [{'IdentifierName': 'm_ctx'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'makeShapeValueSource'}},
                                                            {'name': {'identifier': 'queryPoint'}},
                                                            {'name': {'identifier': 'multiplier'}},
                                                            {'name': {'identifier': 'ctx'}}],
                                              'type': {'name': {'identifier': 'DistanceToShapeValueSource'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'current'},
                                                                                                                  {'IdentifierName': 'Bytes'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                            {'IdentifierName': 'Grow'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'current'},
                                                                                                                                                                            {'IdentifierName': 'Bytes'}]}]},
                                                                                                                            {'Argument': [{'AddExpression': [{'IdentifierName': 'm_upto'},
                                                                                                                                                             {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bytes'},
                                                         'scope': {'name': {'identifier': 'current'}}},
                                              'value': {'arguments': [{'name': {'identifier': 'bytes'},
                                                                       'scope': {'name': {'identifier': 'current'}}},
                                                                      {'left': {'name': {'identifier': 'upto'}},
                                                                       'operator': 'PLUS',
                                                                       'right': {'value': '1'}}],
                                                        'name': {'identifier': 'grow'},
                                                        'scope': {'name': {'identifier': 'ArrayUtil'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Cell'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'At'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'way'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'IdentifierName': 'c'},
                                                                                                                          {'NullLiteralExpression': 'null'}]}]},
                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'c'},
                                                                                                         {'IdentifierName': 'cmd'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'way'}}],
                                                                             'name': {'identifier': 'at'}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'name': {'identifier': 'Cell'}}}]}},
                              {'expression': {'condition': {'inner': {'left': {'name': {'identifier': 'c'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}}},
                                              'elseExpr': {'name': {'identifier': 'cmd'},
                                                           'scope': {'name': {'identifier': 'c'}}},
                                              'thenExpr': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTest'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'RandomStrategy'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'RANDOM'},
                                                             'scope': {'name': {'identifier': 'Strategy'}}},
                                                            {'value': '1'}],
                                              'name': {'identifier': 'test'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'prevDocID'},
                                                                                                                             {'NumericLiteralExpression': '1'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'doc'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'prevDocID'},
                                                                                {'IdentifierName': 'doc'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'prevDocID'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}},
                                                            {'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'prevDocID'}},
                                              'value': {'name': {'identifier': 'doc'}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Purge'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'forcePurge'}]}]}]}]}]},
                                         {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ApplyAllDeletesAndUpdates'},
                                                                                                                          {'ArgumentList': '()'}]}]},
                                                                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'flushCount'},
                                                                                                                                                            {'IdentifierName': 'IncrementAndGet'}]},
                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'finallyBlock': {'statements': [{'expression': {'name': {'identifier': 'incrementAndGet'},
                                                                               'scope': {'name': {'identifier': 'flushCount'}}}}]},
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'forcePurge'}}],
                                                                           'name': {'identifier': 'purge'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MatchAllDocsQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DrillDownQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'DrillDownQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'config'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': '@base'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                                                                                                                                                                      {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]},
                                                                                                                                                                                          {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreSame'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@base'}]},
                                                                                            {'Argument': [{'IdentifierName': 'rewrite'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MatchAllDocsQuery'}}},
                                                             'name': {'identifier': 'base'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'config'}},
                                                                                           {'name': {'identifier': 'base'}}],
                                                                             'type': {'name': {'identifier': 'DrillDownQuery'}}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'DrillDownQuery'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                             'name': {'identifier': 'rewrite'},
                                                                             'scope': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                                       'name': {'identifier': 'rewrite'},
                                                                                       'scope': {'name': {'identifier': 'q'}}}},
                                                             'name': {'identifier': 'rewrite'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'base'}},
                                                            {'name': {'identifier': 'rewrite'}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'i'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jjround'},
                                                                                {'NumericLiteralExpression': '0x80000001'}]}]},
                       {'ForStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'i'},
                                                                         {'NumericLiteralExpression': '38'}]},
                                         {'GreaterThanExpression': [{'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                                                    {'NumericLiteralExpression': '0'}]},
                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjrounds'},
                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                  {'NumericLiteralExpression': '0x80000000'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'jjround'}},
                                              'value': {'value': '0x80000001'}}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                  'name': {'name': {'identifier': 'jjrounds'}}},
                                                       'value': {'value': '0x80000000'}}},
                               'compare': {'left': {'expression': {'name': {'identifier': 'i'}},
                                                    'operator': 'POSTFIX_DECREMENT'},
                                           'operator': 'GREATER',
                                           'right': {'value': '0'}},
                               'initialization': [{'operator': 'ASSIGN',
                                                   'target': {'name': {'identifier': 'i'}},
                                                   'value': {'value': '38'}}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BooleanWeight'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'searcher'}]},
                                                                                            {'Argument': [{'IdentifierName': 'disableCoord'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'query'},
                                                             'type': {'name': {'identifier': 'BooleanQuery'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'needsScores'},
                                                      'scope': {'name': {'identifier': 'scoreMode'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': 'false'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'query'}},
                                                                           'value': {'name': {'identifier': 'rewriteNoScoring'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                            {'name': {'identifier': 'searcher'}},
                                                            {'name': {'identifier': 'scoreMode'}},
                                                            {'name': {'identifier': 'boost'}}],
                                              'type': {'name': {'identifier': 'BooleanWeight'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0d'}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'tokenizedDoc'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetWordFreqForClass'},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'word'}]},
                                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'IdentifierName': 'hits'},
                                                                                                                                                                                  {'NumericLiteralExpression': '1'}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'InvocationExpression': [{'IdentifierName': 'GetTextTermFreqForClass'},
                                                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]},
                                                                                                                                                                                  {'IdentifierName': '_docsWithClassSize'}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'DivideExpression': [{'IdentifierName': 'num'},
                                                                                                                                                                                     {'IdentifierName': 'den'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                          {'IdentifierName': 'Log'}]},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'wordProbability'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0d'},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'word'}},
                                                                                                                    {'name': {'identifier': 'term'}}],
                                                                                                      'name': {'identifier': 'getWordFreqForClass'}},
                                                                                      'name': {'identifier': 'hits'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'hits'}},
                                                                                                      'operator': 'PLUS',
                                                                                                      'right': {'value': '1'}},
                                                                                      'name': {'identifier': 'num'},
                                                                                      'type': {'type': 'DOUBLE'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'term'}}],
                                                                                                               'name': {'identifier': 'getTextTermFreqForClass'}},
                                                                                                      'operator': 'PLUS',
                                                                                                      'right': {'name': {'identifier': 'docsWithClass'}}},
                                                                                      'name': {'identifier': 'den'},
                                                                                      'type': {'type': 'DOUBLE'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'num'}},
                                                                                                      'operator': 'DIVIDE',
                                                                                                      'right': {'name': {'identifier': 'den'}}},
                                                                                      'name': {'identifier': 'wordProbability'},
                                                                                      'type': {'type': 'DOUBLE'}}]}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'result'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'wordProbability'}}],
                                                                                 'name': {'identifier': 'log'},
                                                                                 'scope': {'name': {'identifier': 'Math'}}}}}]},
                               'iterable': {'name': {'identifier': 'tokenizedText'}},
                               'variable': {'variables': [{'name': {'identifier': 'word'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'StatementAnonymousInnerClassHelper'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 's'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                                                                                             'name': {'identifier': 'errors'},
                                                                                                                             'type': {'name': {'identifier': 'ArrayList'},
                                                                                                                                      'typeArguments': [{'name': {'identifier': 'Throwable'}}]}}]}},
                                                                                              {'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                                                                                                                         'name': {'identifier': 'add'},
                                                                                                                                                         'scope': {'name': {'identifier': 'errors'}}}}]},
                                                                                                                 'parameter': {'isVarArgs': 'false',
                                                                                                                               'name': {'identifier': 't'},
                                                                                                                               'type': {'name': {'identifier': 'Throwable'}}}}],
                                                                                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'before'}}},
                                                                                                                           {'expression': {'name': {'identifier': 'evaluate'},
                                                                                                                                           'scope': {'name': {'identifier': 's'}}}}]}},
                                                                                              {'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                                                                                                                         'name': {'identifier': 'add'},
                                                                                                                                                         'scope': {'name': {'identifier': 'errors'}}}}]},
                                                                                                                 'parameter': {'isVarArgs': 'false',
                                                                                                                               'name': {'identifier': 't'},
                                                                                                                               'type': {'name': {'identifier': 'Throwable'}}}}],
                                                                                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'after'}}}]}},
                                                                                              {'expression': {'arguments': [{'name': {'identifier': 'errors'}}],
                                                                                                              'name': {'identifier': 'assertEmpty'},
                                                                                                              'scope': {'name': {'identifier': 'MultipleFailureException'}}}}]},
                                                                      'name': {'identifier': 'evaluate'},
                                                                      'thrownExceptions': [{'name': {'identifier': 'Throwable'}}],
                                                                      'type': {}}],
                                              'type': {'name': {'identifier': 'Statement'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'prefixPaths'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'prefixPaths'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'target'}]},
                                                                                {'IdentifierName': 'target'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_targetLength'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'target'},
                                                                                                                  {'IdentifierName': 'Length'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'DoSeekFloor'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'SetResult'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'target'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'target'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'targetLength'}},
                                              'value': {'name': {'identifier': 'length'},
                                                        'scope': {'name': {'identifier': 'target'}}}}},
                              {'expression': {'name': {'identifier': 'doSeekFloor'},
                                              'scope': {}}},
                              {'expression': {'name': {'identifier': 'setResult'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'left'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'start'},
                                                                                                                                        {'IdentifierName': 'AddTransition'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Transition'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'startCode'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'endCode'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'end'}]}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'State'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewUTF8State'},
                                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'start'},
                                                                                                                                                        {'IdentifierName': 'AddTransition'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Transition'},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'startCode'}]},
                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'endCode'}]},
                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'lastN'}]}]}]}]}]}]}]},
                                                                   {'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'left'},
                                                                                                                  {'NumericLiteralExpression': '1'}]},
                                                                                       {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'State'},
                                                                                                                                                          {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewUTF8State'},
                                                                                                                                                                                                                                   {'ArgumentList': '()'}]}]}]}]}]},
                                                                                                  {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lastN'},
                                                                                                                                                                                       {'IdentifierName': 'AddTransition'}]},
                                                                                                                                                     {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Transition'},
                                                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '128'}]},
                                                                                                                                                                                                                                     {'Argument': [{'NumericLiteralExpression': '191'}]},
                                                                                                                                                                                                                                     {'Argument': [{'IdentifierName': 'n'}]}]}]}]}]}]}]},
                                                                                                  {'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'left'}]}]},
                                                                                                  {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastN'},
                                                                                                                                                           {'IdentifierName': 'n'}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lastN'},
                                                                                                                                                        {'IdentifierName': 'AddTransition'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Transition'},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '128'}]},
                                                                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '191'}]},
                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'end'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'left'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'createState'},
                                                                                                          'scope': {'name': {'identifier': 'utf8'}}},
                                                                                          'name': {'identifier': 'lastN'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'start'}},
                                                                                         {'name': {'identifier': 'lastN'}},
                                                                                         {'name': {'identifier': 'startCode'}},
                                                                                         {'name': {'identifier': 'endCode'}}],
                                                                           'name': {'identifier': 'addTransition'},
                                                                           'scope': {'name': {'identifier': 'utf8'}}}},
                                                           {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'createState'},
                                                                                                                                   'scope': {'name': {'identifier': 'utf8'}}},
                                                                                                                   'name': {'identifier': 'n'},
                                                                                                                   'type': {'type': 'INT'}}]}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'lastN'}},
                                                                                                                  {'name': {'identifier': 'n'}},
                                                                                                                  {'value': '128'},
                                                                                                                  {'value': '191'}],
                                                                                                    'name': {'identifier': 'addTransition'},
                                                                                                    'scope': {'name': {'identifier': 'utf8'}}}},
                                                                                    {'expression': {'expression': {'name': {'identifier': 'left'}},
                                                                                                    'operator': 'POSTFIX_DECREMENT'}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'lastN'}},
                                                                                                    'value': {'name': {'identifier': 'n'}}}}]},
                                                            'condition': {'left': {'name': {'identifier': 'left'}},
                                                                          'operator': 'GREATER',
                                                                          'right': {'value': '1'}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'lastN'}},
                                                                                         {'name': {'identifier': 'end'}},
                                                                                         {'value': '128'},
                                                                                         {'value': '191'}],
                                                                           'name': {'identifier': 'addTransition'},
                                                                           'scope': {'name': {'identifier': 'utf8'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'start'}},
                                                                                         {'name': {'identifier': 'end'}},
                                                                                         {'name': {'identifier': 'startCode'}},
                                                                                         {'name': {'identifier': 'endCode'}}],
                                                                           'name': {'identifier': 'addTransition'},
                                                                           'scope': {'name': {'identifier': 'utf8'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'End'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CorrectOffset'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scanner'},
                                                                                                                                                                                                                                             {'IdentifierName': 'YyChar'}]},
                                                                                                                                                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'scanner'},
                                                                                                                                                                                                                                             {'IdentifierName': 'YyLength'}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'offsetAtt'},
                                                                                                            {'IdentifierName': 'SetOffset'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'finalOffset'}]},
                                                                                            {'Argument': [{'IdentifierName': 'finalOffset'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'posIncrAtt'},
                                                                                                                  {'IdentifierName': 'PositionIncrement'}]},
                                                                                {'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'posIncrAtt'},
                                                                                                                                     {'IdentifierName': 'PositionIncrement'}]},
                                                                                                   {'IdentifierName': 'skippedPositions'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'end'},
                                              'scope': {}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'yychar'},
                                                                                                     'scope': {'name': {'identifier': 'scanner'}}},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'name': {'identifier': 'yylength'},
                                                                                                      'scope': {'name': {'identifier': 'scanner'}}}}],
                                                                             'name': {'identifier': 'correctOffset'}},
                                                             'name': {'identifier': 'finalOffset'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'finalOffset'}},
                                                            {'name': {'identifier': 'finalOffset'}}],
                                              'name': {'identifier': 'setOffset'},
                                              'scope': {'name': {'identifier': 'offsetAtt'}}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'getPositionIncrement'},
                                                                      'scope': {'name': {'identifier': 'posIncrAtt'}}},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'skippedPositions'}}}],
                                              'name': {'identifier': 'setPositionIncrement'},
                                              'scope': {'name': {'identifier': 'posIncrAtt'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'directory'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'directory'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'analyzer'}}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_vs'},
                                                                                                                                              {'IdentifierName': 'GetDescription'}]},
                                                                                                            {'ArgumentList': '()'}]},
                                                                                  {'CharacterLiteralExpression': "'='"}]},
                                                               {'InvocationExpression': [{'IdentifierName': 'StrVal'},
                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'name': {'identifier': 'description'},
                                                                'scope': {'name': {'identifier': 'vs'}}},
                                                       'operator': 'PLUS',
                                                       'right': {'value': '='}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                        'name': {'identifier': 'strVal'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sdp'},
                                                                                                            {'IdentifierName': 'Release'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'commit'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'DeleteUnusedFiles'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'commit'}}],
                                              'name': {'identifier': 'release'},
                                              'scope': {'name': {'identifier': 'sdp'}}}},
                              {'expression': {'name': {'identifier': 'deleteUnusedFiles'},
                                              'scope': {'name': {'identifier': 'writer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'Exists'},
                                                                       {'CastExpression': [{'PredefinedType': 'object'},
                                                                                           {'IdentifierName': 'Value'}]},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'exists'}},
                                         'operator': 'OR',
                                         'right': {'left': {'value': '0.0F'},
                                                   'operator': 'EQUALS',
                                                   'right': {'name': {'identifier': 'value'}}}}},
                              {'expression': {'condition': {'name': {'identifier': 'exists'}},
                                              'elseExpr': {},
                                              'thenExpr': {'name': {'identifier': 'value'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                          {'IdentifierName': 'UTF8'}]},
                                                                                                        {'IdentifierName': 'GetString'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                        {'IdentifierName': 'Bytes'}]}]},
                                                                                        {'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                           {'IdentifierName': 'Offset'}]},
                                                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                                           {'IdentifierName': 'Length'}]}]}]},
                                                                                        {'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                                {'IdentifierName': 'Length'}]},
                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bytes'},
                                                             'scope': {'name': {'identifier': 'scratch'}}},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'prefix'}}},
                                                            {'left': {'name': {'identifier': 'length'},
                                                                      'scope': {'name': {'identifier': 'scratch'}}},
                                                             'operator': 'MINUS',
                                                             'right': {'name': {'identifier': 'length'},
                                                                       'scope': {'name': {'identifier': 'prefix'}}}},
                                                            {'name': {'identifier': 'UTF_8'},
                                                             'scope': {'name': {'identifier': 'StandardCharsets'}}}],
                                              'type': {'name': {'identifier': 'String'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'upto'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'docs'},
                                                                                                {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                                                                   {'ForEachStatement': [{'PredefinedType': 'string'},
                                                                                         {'ElementAccessExpression': [{'IdentifierName': 'docs'},
                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'upto'}]}]}]},
                                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                         {'IdentifierName': 'append'}]},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "' "
                                                                                                                                                                                                                      "'"}]}]}]}]},
                                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                         {'IdentifierName': 'append'}]},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'token'}]}]}]}]}]}]},
                                                                   {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'upto'}]}]},
                                                                   {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                  {'IdentifierName': 'toString'}]},
                                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'upto'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'docs'}}}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                                                          'name': {'identifier': 'b'},
                                                                                          'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                                                           {'body': {'statements': [{'expression': {'arguments': [{'value': ' '}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'b'}}}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'token'}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'b'}}}}]},
                                                            'iterable': {'index': {'name': {'identifier': 'upto'}},
                                                                         'name': {'name': {'identifier': 'docs'}}},
                                                            'variable': {'variables': [{'name': {'identifier': 'token'},
                                                                                        'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'expression': {'name': {'identifier': 'upto'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'toString'},
                                                                                          'scope': {'name': {'identifier': 'b'}}}],
                                                                           'type': {'name': {'identifier': 'BytesRef'}}}}]},
                               'thenStmt': {'statements': [{'expression': {}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'JapaneseReadingFormFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'useRomaji'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'useRomaji'}}],
                                              'type': {'name': {'identifier': 'JapaneseReadingFormFilter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StandardTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StandardFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'source'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'LowerCaseFilter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                {'Argument': [{'IdentifierName': 'result'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'StopFilter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                {'Argument': [{'IdentifierName': 'result'}]},
                                                                                                                                {'Argument': [{'IdentifierName': 'm_stopwords'}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemExclusionSet'},
                                                                                                     {'IdentifierName': 'Count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                            {'ObjectCreationExpression': [{'IdentifierName': 'SetKeywordMarkerFilter'},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'result'}]},
                                                                                                                                                            {'Argument': [{'IdentifierName': 'stemExclusionSet'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'SnowballFilter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'result'}]},
                                                                                                                                {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ArmenianStemmer'},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'source'}]},
                                                                                            {'Argument': [{'IdentifierName': 'result'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StandardTokenizer'}}},
                                                             'name': {'identifier': 'source'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'source'}}],
                                                                             'type': {'name': {'identifier': 'StandardFilter'}}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'TokenStream'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'result'}},
                                              'value': {'arguments': [{'name': {'identifier': 'result'}}],
                                                        'type': {'name': {'identifier': 'LowerCaseFilter'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'result'}},
                                              'value': {'arguments': [{'name': {'identifier': 'result'}},
                                                                      {'name': {'identifier': 'stopwords'}}],
                                                        'type': {'name': {'identifier': 'StopFilter'}}}}},
                              {'condition': {'expression': {'name': {'identifier': 'isEmpty'},
                                                            'scope': {'name': {'identifier': 'stemExclusionSet'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'result'}},
                                                           'value': {'arguments': [{'name': {'identifier': 'result'}},
                                                                                   {'name': {'identifier': 'stemExclusionSet'}}],
                                                                     'type': {'name': {'identifier': 'SetKeywordMarkerFilter'}}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'result'}},
                                              'value': {'arguments': [{'name': {'identifier': 'result'}},
                                                                      {'type': {'name': {'identifier': 'ArmenianStemmer'}}}],
                                                        'type': {'name': {'identifier': 'SnowballFilter'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'source'}},
                                                            {'name': {'identifier': 'result'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BaseTokenStreamTestCase'},
                                                                                                            {'IdentifierName': 'AssertTokenStreamContents'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'EmptyTokenStream'},
                                                                                                                                        {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'EmptyTokenStream'}}},
                                                            {'elementType': {'name': {'identifier': 'String'}},
                                                             'levels': [{'dimension': {'value': '0'}}]}],
                                              'name': {'identifier': 'assertTokenStreamContents'},
                                              'scope': {'name': {'identifier': 'BaseTokenStreamTestCase'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'IdentifierName': 'pos'},
                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                      {'IdentifierName': 'Length'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'pos'}},
                                              'operator': 'LESS',
                                              'right': {'name': {'identifier': 'length'},
                                                        'scope': {'name': {'identifier': 'originalString'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'writer'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'InvalidOperationException'},
                                                                                                     {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'utf8'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'writer'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'IllegalStateException'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'utf8'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'writer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Index'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'index'}}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'target'}]},
                                                                                {'IdentifierName': 'target'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_targetLength'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'target'},
                                                                                                                  {'IdentifierName': 'Length'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'DoSeekCeil'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'SetResult'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'target'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'target'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'targetLength'}},
                                              'value': {'name': {'identifier': 'length'},
                                                        'scope': {'name': {'identifier': 'target'}}}}},
                              {'expression': {'name': {'identifier': 'doSeekCeil'},
                                              'scope': {}}},
                              {'expression': {'name': {'identifier': 'setResult'}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                      {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                                              {'IdentifierName': 'RunsToDo'}]},
                                                                      {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                                                      {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TestTermVectors'},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Console'},
                                                                                                                                                          {'IdentifierName': 'WriteLine'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                                                    {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]},
                                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Console'},
                                                                                                                                                          {'IdentifierName': 'Write'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                          {'IdentifierName': 'StackTrace'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': 'return;'}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'name': {'identifier': 'printStackTrace'},
                                                                                         'scope': {'name': {'identifier': 'e'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'body': {'expression': {'name': {'identifier': 'testTermVectors'}}},
                                                            'compare': {'left': {'name': {'identifier': 'i'}},
                                                                        'operator': 'LESS',
                                                                        'right': {'name': {'identifier': 'runsToDo'}}},
                                                            'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                               'name': {'identifier': 'i'},
                                                                                               'type': {'type': 'INT'}}]}],
                                                            'update': [{'expression': {'name': {'identifier': 'i'}},
                                                                        'operator': 'POSTFIX_INCREMENT'}]}]}},
                              {}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ReferenceEquals'},
                                                                  {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                    {'Argument': [{'IdentifierName': 'obj'}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ReferenceEquals'},
                                                                  {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                    {'Argument': [{'IdentifierName': 'obj'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'obj'}]}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'obj'},
                                                                                                                             {'IdentifierName': 'GetType'}]},
                                                                                           {'ArgumentList': '()'}]},
                                                                 {'InvocationExpression': [{'IdentifierName': 'GetType'},
                                                                                           {'ArgumentList': '()'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'TermsIncludingScoreQuery'},
                                                                                                                                                  {'IdentifierName': 'obj'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_field'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                              {'IdentifierName': '_field'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_unwrittenOriginalQuery'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                              {'IdentifierName': '_unwrittenOriginalQuery'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'other'}}],
                                                       'name': {'identifier': 'sameClassAs'}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'arguments': [{'name': {'identifier': 'other'}}],
                                                                       'name': {'identifier': 'cast'},
                                                                       'scope': {'name': {'identifier': 'getClass'}}}],
                                                        'name': {'identifier': 'equalsTo'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                  {'IdentifierName': 'Value'}]},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                  {'IdentifierName': 'Value'}]}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                      {'IdentifierName': 'Value'}]},
                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                      {'IdentifierName': 'Value'}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                                                         {'ElseClause': [{'Block': [{'ReturnStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                      {'IdentifierName': 'Ord'}]},
                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                      {'IdentifierName': 'Ord'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'value'},
                                                      'scope': {'name': {'identifier': 'a'}}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'value'},
                                                       'scope': {'name': {'identifier': 'b'}}}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'value'},
                                                                   'scope': {'name': {'identifier': 'a'}}},
                                                          'operator': 'GREATER',
                                                          'right': {'name': {'identifier': 'value'},
                                                                    'scope': {'name': {'identifier': 'b'}}}},
                                            'elseStmt': {'statements': [{'expression': {'left': {'name': {'identifier': 'ord'},
                                                                                                 'scope': {'name': {'identifier': 'a'}}},
                                                                                        'operator': 'GREATER',
                                                                                        'right': {'name': {'identifier': 'ord'},
                                                                                                  'scope': {'name': {'identifier': 'b'}}}}}]},
                                            'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TryGetValue'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                            {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'name'}}],
                                                                                            'name': {'identifier': 'key'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'cache'}}},
                                                             'name': {'identifier': 'res'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'res'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'nHits'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}}]},
                               'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'nMisses'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}}]}},
                              {'expression': {'name': {'identifier': 'res'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'wordFiles'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'protectedWords'},
                                                                                                            {'InvocationExpression': [{'IdentifierName': 'GetWordSet'},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'loader'}]},
                                                                                                                                                        {'Argument': [{'IdentifierName': 'wordFiles'}]},
                                                                                                                                                        {'Argument': [{'IdentifierName': 'ignoreCase'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'stringPattern'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'pattern'},
                                                                                                            {'ConditionalExpression': [{'IdentifierName': 'ignoreCase'},
                                                                                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'Regex'},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'stringPattern'}]},
                                                                                                                                                                                       {'Argument': [{'BitwiseOrExpression': [{'BitwiseOrExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexOptions'},
                                                                                                                                                                                                                                                                                         {'IdentifierName': 'Compiled'}]},
                                                                                                                                                                                                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexOptions'},
                                                                                                                                                                                                                                                                                         {'IdentifierName': 'IgnoreCase'}]}]},
                                                                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexOptions'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'CultureInvariant'}]}]}]}]}]},
                                                                                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'Regex'},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'stringPattern'}]},
                                                                                                                                                                                       {'Argument': [{'BitwiseOrExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexOptions'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'Compiled'}]},
                                                                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'RegexOptions'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'CultureInvariant'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'wordFiles'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'protectedWords'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'loader'}},
                                                                                                   {'name': {'identifier': 'wordFiles'}},
                                                                                                   {'name': {'identifier': 'ignoreCase'}}],
                                                                                     'name': {'identifier': 'getWordSet'}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'stringPattern'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'pattern'}},
                                                                           'value': {'condition': {'name': {'identifier': 'ignoreCase'}},
                                                                                     'elseExpr': {'arguments': [{'name': {'identifier': 'stringPattern'}}],
                                                                                                  'name': {'identifier': 'compile'},
                                                                                                  'scope': {'name': {'identifier': 'Pattern'}}},
                                                                                     'thenExpr': {'arguments': [{'name': {'identifier': 'stringPattern'}},
                                                                                                                {'left': {'name': {'identifier': 'CASE_INSENSITIVE'},
                                                                                                                          'scope': {'name': {'identifier': 'Pattern'}}},
                                                                                                                 'operator': 'BINARY_OR',
                                                                                                                 'right': {'name': {'identifier': 'UNICODE_CASE'},
                                                                                                                           'scope': {'name': {'identifier': 'Pattern'}}}}],
                                                                                                  'name': {'identifier': 'compile'},
                                                                                                  'scope': {'name': {'identifier': 'Pattern'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TriggerOn'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SorePoint'},
                                                                                                                                            {'IdentifierName': 'BEFORE'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'BEFORE'},
                                                             'scope': {'name': {'identifier': 'SorePoint'}}}],
                                              'name': {'identifier': 'triggerOn'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'GreaterThanOrEqualExpression': [{'InvocationExpression': [{'IdentifierName': 'Find'},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]},
                                                                              {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'key'}}],
                                                       'name': {'identifier': 'find'}},
                                              'operator': 'GREATER_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'PreIncrementExpression': [{'IdentifierName': 'TestNum'}]},
                                                              {'NumericLiteralExpression': '2'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Zombie'},
                                                                                                            {'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper'},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Zombie'},
                                                                                                                                        {'IdentifierName': 'Start'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'testNum'}},
                                                      'operator': 'PREFIX_INCREMENT'},
                                             'operator': 'EQUALS',
                                             'right': {'value': '2'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'zombie'}},
                                                                           'value': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                             'body': {'statements': [{'body': {'statements': [{'catchClauses': [{'body': {},
                                                                                                                                                                                 'parameter': {'isVarArgs': 'false',
                                                                                                                                                                                               'name': {'identifier': 'e'},
                                                                                                                                                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                                                                                                                                                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'await'},
                                                                                                                                                                                                           'scope': {'name': {'identifier': 'die'}}}},
                                                                                                                                                                                           {}]}}]},
                                                                                                                                      'condition': {'value': 'true'}}]},
                                                                                                             'name': {'identifier': 'run'},
                                                                                                             'type': {}}],
                                                                                     'type': {'name': {'identifier': 'Thread'}}}}},
                                                           {'expression': {'name': {'identifier': 'start'},
                                                                           'scope': {'name': {'identifier': 'zombie'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IIndexableField'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'doc'},
                                                                                                                                                                                          {'IdentifierName': 'GetField'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                          {'IdentifierName': 'weightField'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'weight'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'weight'},
                                                                                                                                    {'IdentifierName': 'GetInt64ValueOrDefault'}]},
                                                                                                  {'ArgumentList': '()'}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'weightValues'},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'weightValues'},
                                                                                                                                                                     {'IdentifierName': 'Get'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'docId'}]}]}]}]}]},
                                                                         {'ElseClause': [{'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'weightField'}}],
                                                                             'name': {'identifier': 'getField'},
                                                                             'scope': {'name': {'identifier': 'doc'}}},
                                                             'name': {'identifier': 'weight'},
                                                             'type': {'name': {'identifier': 'IndexableField'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'weight'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'weightValues'}},
                                                          'operator': 'NOT_EQUALS',
                                                          'right': {}},
                                            'elseStmt': {'statements': [{'expression': {'value': '0'}}]},
                                            'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'docID'},
                                                                                                'scope': {'name': {'identifier': 'weightValues'}}},
                                                                                       'operator': 'LESS',
                                                                                       'right': {'name': {'identifier': 'docId'}}},
                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'docId'}}],
                                                                                                                     'name': {'identifier': 'advance'},
                                                                                                                     'scope': {'name': {'identifier': 'weightValues'}}}}]}},
                                                                        {'condition': {'left': {'name': {'identifier': 'docID'},
                                                                                                'scope': {'name': {'identifier': 'weightValues'}}},
                                                                                       'operator': 'EQUALS',
                                                                                       'right': {'name': {'identifier': 'docId'}}},
                                                                         'elseStmt': {'statements': [{'expression': {'value': '0'}}]},
                                                                         'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'longValue'},
                                                                                                                     'scope': {'name': {'identifier': 'weightValues'}}}}]}}]}},
                               'thenStmt': {'statements': [{'expression': {'condition': {'inner': {'left': {'name': {'identifier': 'numericValue'},
                                                                                                            'scope': {'name': {'identifier': 'weight'}}},
                                                                                                   'operator': 'NOT_EQUALS',
                                                                                                   'right': {}}},
                                                                           'elseExpr': {'value': '0'},
                                                                           'thenExpr': {'name': {'identifier': 'longValue'},
                                                                                        'scope': {'name': {'identifier': 'numericValue'},
                                                                                                  'scope': {'name': {'identifier': 'weight'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'FunctionValues'},
                                                                {'ElementAccessExpression': [{'IdentifierName': 'context'},
                                                                                             {'BracketedArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'arguments': [{}],
                                                             'name': {'identifier': 'get'},
                                                             'scope': {'name': {'identifier': 'context'}}},
                                              'type': {'name': {'identifier': 'FunctionValues'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'Weight'},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'pn'},
                                                                                                  {'IdentifierName': 'Weight'}]}]},
                                        {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                        {'ElseClause': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'Weight'},
                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'pn'},
                                                                                                                                 {'IdentifierName': 'Weight'}]}]},
                                                                         {'ReturnStatement': [{'NumericLiteralExpression': '0'}]},
                                                                         {'ElseClause': [{'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'weight'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'weight'},
                                                       'scope': {'name': {'identifier': 'pn'}}}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'weight'}},
                                                          'operator': 'EQUALS',
                                                          'right': {'name': {'identifier': 'weight'},
                                                                    'scope': {'name': {'identifier': 'pn'}}}},
                                            'elseStmt': {'expression': {'value': '1'}},
                                            'thenStmt': {'expression': {'value': '0'}}},
                               'thenStmt': {'expression': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'words'},
                                                                                                        {'IdentifierName': 'Contains'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                        {'IdentifierName': 'Buffer'}]}]},
                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                        {'IdentifierName': 'Length'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'buffer'},
                                                             'scope': {'name': {'identifier': 'termAtt'}}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'termAtt'}}}],
                                              'name': {'identifier': 'contains'},
                                              'scope': {'name': {'identifier': 'words'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PositionCheckSpan'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'context'}]},
                                                                                            {'Argument': [{'IdentifierName': 'acceptDocs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'termContexts'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'context'}},
                                                                                           {'name': {'identifier': 'requiredPostings'}}],
                                                                             'name': {'identifier': 'getSpans'},
                                                                             'scope': {'name': {'identifier': 'matchWeight'}}},
                                                             'name': {'identifier': 'matchSpans'},
                                                             'type': {'name': {'identifier': 'Spans'}}}]}},
                              {'expression': {'condition': {'inner': {'left': {'name': {'identifier': 'matchSpans'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}}},
                                              'elseExpr': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                   'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'candidate'}}],
                                                                                                                           'name': {'identifier': 'acceptPosition'}}}]},
                                                                                   'name': {'identifier': 'accept'},
                                                                                   'parameters': [{'isVarArgs': 'false',
                                                                                                   'name': {'identifier': 'candidate'},
                                                                                                   'type': {'name': {'identifier': 'Spans'}}}],
                                                                                   'thrownExceptions': [{'name': {'identifier': 'IOException'}}],
                                                                                   'type': {'name': {'identifier': 'AcceptStatus'}}}],
                                                           'arguments': [{'name': {'identifier': 'matchSpans'}}],
                                                           'type': {'name': {'identifier': 'FilterSpans'}}},
                                              'thenExpr': {}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'PreDecrementExpression': [{'IdentifierName': 'to'}]},
                                         {'LessThanExpression': [{'IdentifierName': 'from'},
                                                                 {'IdentifierName': 'to'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'from'}]},
                                         {'PreDecrementExpression': [{'IdentifierName': 'to'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Swap'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'from'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'to'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'from'}},
                                                                                     {'name': {'identifier': 'to'}}],
                                                                       'name': {'identifier': 'swap'}}}]},
                               'compare': {'left': {'name': {'identifier': 'from'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'to'}}},
                               'initialization': [{'expression': {'name': {'identifier': 'to'}},
                                                   'operator': 'PREFIX_DECREMENT'}],
                               'update': [{'expression': {'name': {'identifier': 'from'}},
                                           'operator': 'PREFIX_INCREMENT'},
                                          {'expression': {'name': {'identifier': 'to'}},
                                           'operator': 'PREFIX_DECREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'InitIndex'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'newScheduler'}]},
                                                                                        {'Argument': [{'IdentifierName': 'random'}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'IdentifierName': 'NewMockDirectory'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'initialCommit'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                           {'arguments': [{'name': {'identifier': 'commitOnClose'}}],
                                                                                            'name': {'identifier': 'setCommitOnClose'},
                                                                                            'scope': {'arguments': [{'type': {'name': {'identifier': 'ConcurrentMergeScheduler'}}}],
                                                                                                      'name': {'identifier': 'setMergeScheduler'},
                                                                                                      'scope': {'arguments': [{'value': '10'}],
                                                                                                                'name': {'identifier': 'setMaxBufferedDocs'},
                                                                                                                'scope': {'arguments': [{'arguments': [{'name': {'identifier': 'random'}}],
                                                                                                                                         'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                                                                                                          'name': {'identifier': 'newIndexWriterConfig'}}}}}],
                                                                             'type': {'name': {'identifier': 'IndexWriter'}}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'expression': {'name': {'identifier': 'setSuppressExceptions'},
                                              'scope': {'inner': {'expression': {'name': {'identifier': 'getMergeScheduler'},
                                                                                 'scope': {'name': {'identifier': 'getConfig'},
                                                                                           'scope': {'name': {'identifier': 'writer'}}}},
                                                                  'type': {'name': {'identifier': 'ConcurrentMergeScheduler'}}}}}},
                              {'condition': {'name': {'identifier': 'initialCommit'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'commit'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Document'}}},
                                                             'name': {'identifier': 'doc'},
                                                             'type': {'name': {'identifier': 'Document'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'content'},
                                                                           {'value': 'aaa'},
                                                                           {'name': {'identifier': 'NO'},
                                                                            'scope': {'name': {'identifier': 'Store'},
                                                                                      'scope': {'name': {'identifier': 'Field'}}}}],
                                                             'name': {'identifier': 'newTextField'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'id'},
                                                                           {'value': '0'},
                                                                           {'name': {'identifier': 'NO'},
                                                                            'scope': {'name': {'identifier': 'Store'},
                                                                                      'scope': {'name': {'identifier': 'Field'}}}}],
                                                             'name': {'identifier': 'newTextField'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'body': {'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                       'name': {'identifier': 'addDocument'},
                                                       'scope': {'name': {'identifier': 'writer'}}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'value': '157'}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'writer'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                              {'IdentifierName': 'listeners'}]},
                                                                                                            {'IdentifierName': 'AddLast'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'listener'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'listener'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'listeners'},
                                                        'scope': {}}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                      {'NumericLiteralExpression': '0'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_reader'},
                                                                                                                                                                                                                         {'IdentifierName': 'Read'}]},
                                                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]},
                                                                                                                                                                                                         {'Argument': [{'IdentifierName': 'offset'}]},
                                                                                                                                                                                                         {'Argument': [{'IdentifierName': 'len'}]}]}]}]}]}]}]},
                                                      {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'cnt'},
                                                                                               {'NumericLiteralExpression': '0'}]},
                                                                       {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'EndOfStreamException'},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]},
                                                      {'ExpressionStatement': [{'SubtractAssignmentExpression': [{'IdentifierName': 'len'},
                                                                                                                 {'IdentifierName': 'cnt'}]}]},
                                                      {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'offset'},
                                                                                                            {'IdentifierName': 'cnt'}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'b'}},
                                                                                                                    {'name': {'identifier': 'offset'}},
                                                                                                                    {'name': {'identifier': 'len'}}],
                                                                                                      'name': {'identifier': 'read'},
                                                                                                      'scope': {'name': {'identifier': 'is'}}},
                                                                                      'name': {'identifier': 'cnt'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'cnt'}},
                                                                      'operator': 'LESS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'EOFException'}}}}]}},
                                                       {'expression': {'operator': 'MINUS',
                                                                       'target': {'name': {'identifier': 'len'}},
                                                                       'value': {'name': {'identifier': 'cnt'}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'offset'}},
                                                                       'value': {'name': {'identifier': 'cnt'}}}}]},
                               'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_2'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'JjStopStringLiteralDfa_2'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'active0'}]}]}]}]},
                                                                                        {'Argument': [{'AddExpression': [{'IdentifierName': 'pos'},
                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pos'}},
                                                                           {'name': {'identifier': 'active0'}}],
                                                             'name': {'identifier': 'jjStopStringLiteralDfa_2'}},
                                                            {'left': {'name': {'identifier': 'pos'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'jjMoveNfa_2'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_1'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'JjStopStringLiteralDfa_1'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'active0'}]}]}]}]},
                                                                                        {'Argument': [{'AddExpression': [{'IdentifierName': 'pos'},
                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pos'}},
                                                                           {'name': {'identifier': 'active0'}}],
                                                             'name': {'identifier': 'jjStopStringLiteralDfa_1'}},
                                                            {'left': {'name': {'identifier': 'pos'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'jjMoveNfa_1'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'state'},
                                                                                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                                                                                    {'IsExpression': [{'IdentifierName': 'state'},
                                                                                                                                                      {'IdentifierName': 'OrdTermState'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'SeekExact'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'OrdTermState'},
                                                                                                                                                                                             {'IdentifierName': 'state'}]}]},
                                                                                                                                            {'IdentifierName': 'Ord'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'left': {'name': {'identifier': 'state'}},
                                                  'operator': 'NOT_EQUALS',
                                                  'right': {}},
                                         'operator': 'AND',
                                         'right': {'expression': {'name': {'identifier': 'state'}},
                                                   'type': {'name': {'identifier': 'OrdTermState'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ord'},
                                                             'scope': {'inner': {'expression': {'name': {'identifier': 'state'}},
                                                                                 'type': {'name': {'identifier': 'OrdTermState'}}}}}],
                                              'name': {'identifier': 'seekExact'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 'to'},
                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'to'}]}]}]}]},
                       {'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'f'},
                                                                      {'IdentifierName': 'from'}]},
                                           {'Block': [{'IfStatement': [{'LessThanExpression': [{'InvocationExpression': [{'IdentifierName': 'Compare'},
                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]},
                                                                                                                                           {'Argument': [{'IdentifierName': 'val'}]}]}]},
                                                                                               {'NumericLiteralExpression': '0'}]},
                                                                       {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Lower'},
                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]},
                                                                                                                                                   {'Argument': [{'IdentifierName': 't'}]},
                                                                                                                                                   {'Argument': [{'IdentifierName': 'val'}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                     {'IdentifierName': 'f'}]}]}]}]}]},
                                                      {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 't'},
                                                                                                               {'IdentifierName': 'f'}]}]},
                                                      {'ExpressionStatement': [{'SubtractAssignmentExpression': [{'IdentifierName': 'f'},
                                                                                                                 {'LeftShiftExpression': [{'IdentifierName': 'delta'},
                                                                                                                                          {'NumericLiteralExpression': '1'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Lower'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'from'}]},
                                                                                        {'Argument': [{'IdentifierName': 't'}]},
                                                                                        {'Argument': [{'IdentifierName': 'val'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'to'}},
                                                                             'operator': 'MINUS',
                                                                             'right': {'value': '1'}},
                                                             'name': {'identifier': 'f'},
                                                             'type': {'type': 'INT'}},
                                                            {'initializer': {'name': {'identifier': 'to'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'f'}},
                                                                                             {'name': {'identifier': 'val'}}],
                                                                               'name': {'identifier': 'compare'}},
                                                                      'operator': 'LESS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'f'}},
                                                                                                                  {'name': {'identifier': 't'}},
                                                                                                                  {'name': {'identifier': 'val'}}],
                                                                                                    'name': {'identifier': 'lower'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 't'}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'name': {'identifier': 'f'}}},
                                                                                      'name': {'identifier': 'delta'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 't'}},
                                                                       'value': {'name': {'identifier': 'f'}}}},
                                                       {'expression': {'operator': 'MINUS',
                                                                       'target': {'name': {'identifier': 'f'}},
                                                                       'value': {'left': {'name': {'identifier': 'delta'}},
                                                                                 'operator': 'LEFT_SHIFT',
                                                                                 'right': {'value': '1'}}}}]},
                               'condition': {'left': {'name': {'identifier': 'f'}},
                                             'operator': 'GREATER',
                                             'right': {'name': {'identifier': 'from'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'from'}},
                                                            {'name': {'identifier': 't'}},
                                                            {'name': {'identifier': 'val'}}],
                                              'name': {'identifier': 'lower'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'segmentations'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'phraseID'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'name': {'identifier': 'phraseID'}},
                                              'name': {'name': {'identifier': 'segmentations'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleTextNormsProducer'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'SimpleTextNormsProducer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'IdentifierName': 'ThreadClass'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'IdentifierName': 'ThreadClass'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'IdentifierName': 'num'}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'array'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'array'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper2'},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ctrl'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'array'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'Thread'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'num'}}}]},
                                                             'name': {'identifier': 'array'},
                                                             'type': {'componentType': {'name': {'identifier': 'Thread'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'array'}}},
                                                                       'value': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                         'body': {'statements': [{'expression': {'name': {'identifier': 'waitIfStalled'},
                                                                                                                                                 'scope': {'name': {'identifier': 'ctrl'}}}}]},
                                                                                                         'name': {'identifier': 'run'},
                                                                                                         'type': {}}],
                                                                                 'type': {'name': {'identifier': 'Thread'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'array'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'array'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DirectoryReader'},
                                                                                                        {'IdentifierName': 'OpenIfChanged'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'referenceToRefresh'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'referenceToRefresh'}}],
                                              'name': {'identifier': 'openIfChanged'},
                                              'scope': {'name': {'identifier': 'DirectoryReader'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRange'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'from'}]},
                                                                                            {'Argument': [{'IdentifierName': 'to'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Quicksort'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'from'}]},
                                                                                            {'Argument': [{'IdentifierName': 'to'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'CeilLog2'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'to'},
                                                                                                                                                                                            {'IdentifierName': 'from'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'from'}},
                                                            {'name': {'identifier': 'to'}}],
                                              'name': {'identifier': 'checkRange'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'from'}},
                                                            {'name': {'identifier': 'to'}},
                                                            {'left': {'value': '2'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'arguments': [{'left': {'name': {'identifier': 'to'}},
                                                                                      'operator': 'MINUS',
                                                                                      'right': {'name': {'identifier': 'from'}}},
                                                                                     {'value': '2'}],
                                                                       'name': {'identifier': 'log'},
                                                                       'scope': {'name': {'identifier': 'MathUtil'}}}}],
                                              'name': {'identifier': 'quicksort'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FunctionValues'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_a'},
                                                                                                                                                                                          {'IdentifierName': 'GetValues'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'readerContext'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FunctionValues'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_b'},
                                                                                                                                                                                          {'IdentifierName': 'GetValues'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'readerContext'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SingleDocValuesAnonymousInnerClassHelper'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'aVals'}]},
                                                                                            {'Argument': [{'IdentifierName': 'bVals'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'context'}},
                                                                                           {'name': {'identifier': 'readerContext'}}],
                                                                             'name': {'identifier': 'getValues'},
                                                                             'scope': {'name': {'identifier': 'a'}}},
                                                             'name': {'identifier': 'aVals'},
                                                             'type': {'name': {'identifier': 'FunctionValues'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'context'}},
                                                                                           {'name': {'identifier': 'readerContext'}}],
                                                                             'name': {'identifier': 'getValues'},
                                                                             'scope': {'name': {'identifier': 'b'}}},
                                                             'name': {'identifier': 'bVals'},
                                                             'type': {'name': {'identifier': 'FunctionValues'}}}]}},
                              {'expression': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                                                                            {'name': {'identifier': 'aVals'}},
                                                                                                                            {'name': {'identifier': 'bVals'}}],
                                                                                                              'name': {'identifier': 'func'}}}]},
                                                                      'name': {'identifier': 'floatVal'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'doc'},
                                                                                      'type': {'type': 'INT'}}],
                                                                      'thrownExceptions': [{'name': {'identifier': 'IOException'}}],
                                                                      'type': {'type': 'FLOAT'}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                                                                            {'name': {'identifier': 'aVals'}},
                                                                                                                            {'name': {'identifier': 'bVals'}}],
                                                                                                              'name': {'identifier': 'allExists'},
                                                                                                              'scope': {'name': {'identifier': 'MultiFunction'}}}}]},
                                                                      'name': {'identifier': 'exists'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'doc'},
                                                                                      'type': {'type': 'INT'}}],
                                                                      'thrownExceptions': [{'name': {'identifier': 'IOException'}}],
                                                                      'type': {'type': 'BOOLEAN'}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'left': {'left': {'left': {'left': {'left': {'name': {'identifier': 'name'}},
                                                                                                                                                  'operator': 'PLUS',
                                                                                                                                                  'right': {'value': '('}},
                                                                                                                                         'operator': 'PLUS',
                                                                                                                                         'right': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                                                                                                   'name': {'identifier': 'toString'},
                                                                                                                                                   'scope': {'name': {'identifier': 'aVals'}}}},
                                                                                                                                'operator': 'PLUS',
                                                                                                                                'right': {'value': ','}},
                                                                                                                       'operator': 'PLUS',
                                                                                                                       'right': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                                                                                 'name': {'identifier': 'toString'},
                                                                                                                                 'scope': {'name': {'identifier': 'bVals'}}}},
                                                                                                              'operator': 'PLUS',
                                                                                                              'right': {'value': ')'}}}]},
                                                                      'name': {'identifier': 'toString'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'doc'},
                                                                                      'type': {'type': 'INT'}}],
                                                                      'thrownExceptions': [{'name': {'identifier': 'IOException'}}],
                                                                      'type': {'name': {'identifier': 'String'}}}],
                                              'arguments': [{}],
                                              'type': {'name': {'identifier': 'FloatDocValues'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_grid'},
                                                                                                                                                                                          {'IdentifierName': 'GetLevelForDistance'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'distErr'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Cell'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_grid'},
                                                                                                                                                                                          {'IdentifierName': 'GetCells'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'shape'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'detailLevel'}]},
                                                                                                                                                                          {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'm_simplifyIndexedCells'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Field'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Field'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'FieldName'}]},
                                                                                                                                                                              {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'CellTokenStream'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cells'},
                                                                                                                                                                                                                                                                                                                      {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'FIELD_TYPE'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ArrayCreationExpression': [{'ArrayType': [{'IdentifierName': 'Field'},
                                                                                        {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                         {'ArrayInitializerExpression': [{'IdentifierName': 'field'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'shape'}},
                                                                                           {'name': {'identifier': 'detailLevel'}},
                                                                                           {}],
                                                                             'name': {'identifier': 'createCellIteratorToIndex'}},
                                                             'name': {'identifier': 'cells'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{'name': {'identifier': 'Cell'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'newCellToBytesRefIterator'}},
                                                             'name': {'identifier': 'cellToBytesRefIterator'},
                                                             'type': {'name': {'identifier': 'CellToBytesRefIterator'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'cells'}}],
                                              'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'cellToBytesRefIterator'}}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'BytesRefIteratorTokenStream'}}},
                                                             'name': {'identifier': 'tokenStream'},
                                                             'type': {'name': {'identifier': 'BytesRefIteratorTokenStream'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'cellToBytesRefIterator'}}],
                                              'name': {'identifier': 'setBytesRefIterator'},
                                              'scope': {'name': {'identifier': 'tokenStream'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getFieldName'}},
                                                                                           {'name': {'identifier': 'tokenStream'}},
                                                                                           {'name': {'identifier': 'FIELD_TYPE'}}],
                                                                             'type': {'name': {'identifier': 'Field'}}},
                                                             'name': {'identifier': 'field'},
                                                             'type': {'name': {'identifier': 'Field'}}}]}},
                              {'expression': {'elementType': {'name': {'identifier': 'Field'}},
                                              'initializer': {'values': [{'name': {'identifier': 'field'}}]},
                                              'levels': [{}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'UpdateDocuments'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'delTerm'}]},
                                                                                            {'Argument': [{'IdentifierName': 'docs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzer'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'tragedy'}},
                                                                                                       {'value': 'updateDocuments'}],
                                                                                         'name': {'identifier': 'tragicEvent'}}},
                                                                         {'expression': {'expression': {'value': '1'},
                                                                                         'operator': 'MINUS'}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'tragedy'},
                                                               'type': {'elements': [{'name': {'identifier': 'AbortingException'}},
                                                                                     {'name': {'identifier': 'VirtualMachineError'}}]}}}],
                               'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'value': 'false'},
                                                                                          'name': {'identifier': 'success'},
                                                                                          'type': {'type': 'BOOLEAN'}}]}},
                                                           {'finallyBlock': {'statements': [{'condition': {'expression': {'name': {'identifier': 'success'}},
                                                                                                           'operator': 'LOGICAL_COMPLEMENT'},
                                                                                             'thenStmt': {'statements': [{'condition': {'arguments': [{'value': 'IW'}],
                                                                                                                                        'name': {'identifier': 'isEnabled'},
                                                                                                                                        'scope': {'name': {'identifier': 'infoStream'}}},
                                                                                                                          'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'IW'},
                                                                                                                                                                                    {'value': 'hit '
                                                                                                                                                                                              'exception '
                                                                                                                                                                                              'updating '
                                                                                                                                                                                              'document'}],
                                                                                                                                                                      'name': {'identifier': 'message'},
                                                                                                                                                                      'scope': {'name': {'identifier': 'infoStream'}}}}]}}]}}]},
                                                            'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'docs'}},
                                                                                                                                                     {'name': {'identifier': 'analyzer'}},
                                                                                                                                                     {'name': {'identifier': 'delTerm'}}],
                                                                                                                                       'name': {'identifier': 'updateDocuments'},
                                                                                                                                       'scope': {'name': {'identifier': 'docWriter'}}},
                                                                                                                       'name': {'identifier': 'seqNo'},
                                                                                                                       'type': {'type': 'LONG'}}]}},
                                                                                        {'condition': {'left': {'name': {'identifier': 'seqNo'}},
                                                                                                       'operator': 'LESS',
                                                                                                       'right': {'value': '0'}},
                                                                                         'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                     'target': {'name': {'identifier': 'seqNo'}},
                                                                                                                                     'value': {'expression': {'name': {'identifier': 'seqNo'}},
                                                                                                                                               'operator': 'MINUS'}}},
                                                                                                                     {'expression': {'arguments': [{'value': 'true'},
                                                                                                                                                   {'value': 'false'}],
                                                                                                                                     'name': {'identifier': 'processEvents'}}}]}},
                                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'success'}},
                                                                                                        'value': {'value': 'true'}}},
                                                                                        {'expression': {'name': {'identifier': 'seqNo'}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'MultiplyExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                                                                                             {'NumericLiteralExpression': '2'}]},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '16'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ByteArrayDataOutput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ByteArrayDataOutput'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'compressed'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'compressor'},
                                                                                                            {'IdentifierName': 'Compress'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'decompressed'}]},
                                                                                            {'Argument': [{'IdentifierName': 'off'}]},
                                                                                            {'Argument': [{'IdentifierName': 'len'}]},
                                                                                            {'Argument': [{'IdentifierName': '@out'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                                                                                {'IdentifierName': 'Position'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Arrays'},
                                                                                                        {'IdentifierName': 'CopyOf'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'compressed'}]},
                                                                                        {'Argument': [{'IdentifierName': 'compressedLen'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'BYTE'},
                                                                             'levels': [{'dimension': {'left': {'left': {'name': {'identifier': 'len'}},
                                                                                                                'operator': 'MULTIPLY',
                                                                                                                'right': {'value': '2'}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '16'}}}]},
                                                             'name': {'identifier': 'compressed'},
                                                             'type': {'componentType': {'type': 'BYTE'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'compressed'}}],
                                                                             'type': {'name': {'identifier': 'ByteArrayDataOutput'}}},
                                                             'name': {'identifier': 'out'},
                                                             'type': {'name': {'identifier': 'ByteArrayDataOutput'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'decompressed'}},
                                                            {'name': {'identifier': 'off'}},
                                                            {'name': {'identifier': 'len'}},
                                                            {'name': {'identifier': 'out'}}],
                                              'name': {'identifier': 'compress'},
                                              'scope': {'name': {'identifier': 'compressor'}}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getPosition'},
                                                                             'scope': {'name': {'identifier': 'out'}}},
                                                             'name': {'identifier': 'compressedLen'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'compressed'}},
                                                            {'name': {'identifier': 'compressedLen'}}],
                                              'name': {'identifier': 'copyOf'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TextWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StreamWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'os'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                                                                                                              {'IdentifierName': 'UTF8'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEXT'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'os'}},
                                                                                                          {'name': {'identifier': 'UTF_8'},
                                                                                                           'scope': {'name': {'identifier': 'StandardCharsets'}}}],
                                                                                            'type': {'name': {'identifier': 'OutputStreamWriter'}}}],
                                                                             'type': {'name': {'identifier': 'BufferedWriter'}}},
                                                             'name': {'identifier': 'w'},
                                                             'type': {'name': {'identifier': 'BufferedWriter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'TEXT'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'w'}}}},
                              {'expression': {'name': {'identifier': 'newLine'},
                                              'scope': {'name': {'identifier': 'w'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'w'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'NotQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'queries'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'notToken'},
                                                                                                                                            {'IdentifierName': 'Image'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'queries'}},
                                                            {'name': {'identifier': 'image'},
                                                             'scope': {'name': {'identifier': 'notToken'}}}],
                                              'type': {'name': {'identifier': 'NotQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'matchingGroups'}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'matchingGroups'}},
                                              'type': {'name': {'identifier': 'Collection'},
                                                       'typeArguments': [{'name': {'identifier': 'T'}}]}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'ln_min'}]},
                                                                                {'IdentifierName': 'min'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'ln_max'}]},
                                                                                {'IdentifierName': 'max'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'ln_steep'}]},
                                                                                {'IdentifierName': 'steepness'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'DiscountOverlaps'}]},
                                                                                {'IdentifierName': 'discountOverlaps'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ln_min'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'min'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ln_max'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'max'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ln_steep'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'steepness'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'discountOverlaps'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'discountOverlaps'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]},
                                                                                {'CastExpression': [{'PredefinedType': 'short'},
                                                                                                    {'ParenthesizedExpression': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'len'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}},
                               'message': {'left': {'left': {'value': 'len '
                                                                      'must be '
                                                                      '> 0 '
                                                                      '(got '},
                                                    'operator': 'PLUS',
                                                    'right': {'name': {'identifier': 'len'}}},
                                           'operator': 'PLUS',
                                           'right': {'value': ')'}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'valueCount'}}}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'off'}},
                                                  'operator': 'PLUS',
                                                  'right': {'name': {'identifier': 'len'}}},
                                         'operator': 'LESS_EQUALS',
                                         'right': {'name': {'identifier': 'length'},
                                                   'scope': {'name': {'identifier': 'arr'}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'valueCount'}},
                                                                                            'operator': 'MINUS',
                                                                                            'right': {'name': {'identifier': 'index'}}},
                                                                                           {'name': {'identifier': 'len'}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'sets'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'values'}}},
                                                                       'value': {'expression': {'index': {'name': {'identifier': 'o'}},
                                                                                                'name': {'name': {'identifier': 'arr'}}},
                                                                                 'type': {'type': 'SHORT'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'index'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'name': {'identifier': 'off'}},
                                                                  'name': {'identifier': 'o'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'left': {'name': {'identifier': 'index'}},
                                                                                  'operator': 'PLUS',
                                                                                  'right': {'name': {'identifier': 'sets'}}},
                                                                  'name': {'identifier': 'end'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'},
                                          {'expression': {'name': {'identifier': 'o'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'sets'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'indexReader'},
                                                                                            {'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                              {'IdentifierName': 'indexReader'}]}]},
                                                                      {'Block': [{'ReturnStatement': 'return;'}]}]},
                                                     {'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                 {'IdentifierName': 'indexReader'}]},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                        {'IdentifierName': 'indexReader'}]},
                                                                                                                                                                      {'IdentifierName': 'DecRef'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]},
                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                {'IdentifierName': 'indexReader'}]},
                                                                                                              {'IdentifierName': 'indexReader'}]}]},
                                                     {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'indexReader'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'indexReader'},
                                                                                                                                                                      {'IdentifierName': 'IncRef'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                 {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexSearcher'},
                                                                                                                                          {'ObjectCreationExpression': [{'IdentifierName': 'IndexSearcher'},
                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'indexReader'}]}]}]}]}]}]},
                                                                      {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexSearcher'},
                                                                                                                                                          {'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'indexReader'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'indexReader'},
                                                       'scope': {}}},
                               'thenStmt': {'statements': [{}]}},
                              {'condition': {'left': {'name': {'identifier': 'indexReader'},
                                                      'scope': {}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'decRef'},
                                                                           'scope': {'name': {'identifier': 'indexReader'},
                                                                                     'scope': {}}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'indexReader'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'indexReader'}}}},
                              {'condition': {'left': {'name': {'identifier': 'indexReader'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'indexSearcher'}},
                                                                           'value': {}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'incRef'},
                                                                           'scope': {'name': {'identifier': 'indexReader'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'indexSearcher'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'indexReader'}}],
                                                                                     'type': {'name': {'identifier': 'IndexSearcher'}}}}},
                                                           {'expression': {'arguments': [{}],
                                                                           'name': {'identifier': 'setQueryCache'},
                                                                           'scope': {'name': {'identifier': 'indexSearcher'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'MultiplyExpression': [{'ElementAccessExpression': [{'IdentifierName': 'avgChunkSizes'},
                                                                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'block'}]}]}]},
                                                                                                                                                      {'IdentifierName': 'relativeChunk'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'MoveLowOrderBitToSign'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'startPointersDeltas'},
                                                                                                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'block'}]}]}]},
                                                                                                                                                                                                                                                    {'IdentifierName': 'Get'}]},
                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'relativeChunk'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'expected'},
                                                               {'IdentifierName': 'delta'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'index': {'name': {'identifier': 'block'}},
                                                                                      'name': {'name': {'identifier': 'avgChunkSizes'}}},
                                                                             'operator': 'MULTIPLY',
                                                                             'right': {'name': {'identifier': 'relativeChunk'}}},
                                                             'name': {'identifier': 'expected'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'relativeChunk'}}],
                                                                                            'name': {'identifier': 'get'},
                                                                                            'scope': {'index': {'name': {'identifier': 'block'}},
                                                                                                      'name': {'name': {'identifier': 'startPointersDeltas'}}}}],
                                                                             'name': {'identifier': 'zigZagDecode'}},
                                                             'name': {'identifier': 'delta'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'left': {'name': {'identifier': 'expected'}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'delta'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'KStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'KStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'version'},
                                                                          {'IdentifierName': 'VERSION_CHECKSUM'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CodecUtil'},
                                                                                                                                        {'IdentifierName': 'ChecksumEntireFile'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'clone'},
                                                             'scope': {'name': {'identifier': 'data'}}}],
                                              'name': {'identifier': 'checksumEntireFile'},
                                              'scope': {'name': {'identifier': 'CodecUtil'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'IdentifierName': 'Check'},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RegExpSyntax'},
                                                                                                                                                              {'IdentifierName': 'COMPLEMENT'}]}]}]}]},
                                                                  {'InvocationExpression': [{'IdentifierName': 'Match'},
                                                                                            {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'~'"}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'MakeComplement'},
                                                                                                  {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'ParseComplExp'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'ParseCharClassExp'},
                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'COMPLEMENT'}}],
                                                      'name': {'identifier': 'check'}},
                                             'operator': 'AND',
                                             'right': {'arguments': [{'value': '~'}],
                                                       'name': {'identifier': 'match'}}},
                               'elseStmt': {'expression': {'name': {'identifier': 'parseCharClassExp'}}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'parseComplExp'}}],
                                                           'name': {'identifier': 'makeComplement'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzer'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1000'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'arguments': [{'value': '1000'}],
                                                             'name': {'identifier': 'atLeast'}}],
                                              'name': {'identifier': 'checkRandomData'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DistanceValueSource'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'queryPoint'}]},
                                                                                            {'Argument': [{'IdentifierName': 'multiplier'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'queryPoint'}},
                                                            {'name': {'identifier': 'multiplier'}}],
                                              'type': {'name': {'identifier': 'DistanceValueSource'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'ReadVInt32'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'IdentifierName': 'length'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReadBytes'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytes'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'length'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                          {'IdentifierName': 'UTF8'}]},
                                                                                                        {'IdentifierName': 'GetString'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytes'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'readVInt'}},
                                                             'name': {'identifier': 'length'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'type': 'BYTE'},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'}}}]},
                                                             'name': {'identifier': 'bytes'},
                                                             'type': {'componentType': {'type': 'BYTE'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bytes'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'}}],
                                              'name': {'identifier': 'readBytes'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bytes'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'}},
                                                            {'name': {'identifier': 'UTF_8'},
                                                             'scope': {'name': {'identifier': 'StandardCharsets'}}}],
                                              'type': {'name': {'identifier': 'String'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'defaultField'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'WeightedSpanTermExtractor'},
                                                                                                     {'ArgumentList': '()'}]},
                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'WeightedSpanTermExtractor'},
                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'defaultField'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'name': {'identifier': 'defaultField'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'arguments': [{'name': {'identifier': 'defaultField'}}],
                                                           'type': {'name': {'identifier': 'WeightedSpanTermExtractor'}}},
                                              'thenExpr': {'type': {'name': {'identifier': 'WeightedSpanTermExtractor'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LogicalAndExpression': [{'LessThanExpression': [{'IdentifierName': 'pos'},
                                                                                              {'IdentifierName': 'nextPos'}]},
                                                                      {'GreaterThanOrEqualExpression': [{'IdentifierName': 'pos'},
                                                                                                        {'SubtractExpression': [{'IdentifierName': 'nextPos'},
                                                                                                                                {'IdentifierName': 'count'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'name': {'identifier': 'pos'}},
                                                       'operator': 'LESS',
                                                       'right': {'name': {'identifier': 'nextPos'}}},
                                              'operator': 'AND',
                                              'right': {'left': {'name': {'identifier': 'pos'}},
                                                        'operator': 'GREATER_EQUALS',
                                                        'right': {'left': {'name': {'identifier': 'nextPos'}},
                                                                  'operator': 'MINUS',
                                                                  'right': {'name': {'identifier': 'count'}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'reader'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'm_forever'}]},
                                                                    {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'NoMoreDataException'},
                                                                                                                                 {'ArgumentList': '()'}]}]}]}]},
                                                   {'ExpressionStatement': [{'PreIncrementExpression': [{'IdentifierName': 'iteration'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'reader'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'StringReader'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'reader'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'forever'}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'NoMoreDataException'}}}}]}},
                                                           {'expression': {'expression': {'name': {'identifier': 'iteration'}},
                                                                           'operator': 'PREFIX_INCREMENT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'reader'}},
                                              'value': {'arguments': [{'arguments': [{'name': {'identifier': 'docs'}}],
                                                                       'type': {'name': {'identifier': 'StringReader'}}}],
                                                        'type': {'name': {'identifier': 'BufferedReader'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SpanNearQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'MakeQuery'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Spans'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiSpansWrapper'},
                                                                                                                                                                                          {'IdentifierName': 'Wrap'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Searcher'},
                                                                                                                                                                                                                          {'IdentifierName': 'TopReaderContext'}]}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'q'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'span'},
                                                                                                                                                                      {'IdentifierName': 'Next'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 's'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '3'}]}]}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 's'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'span'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'span'},
                                                                                                                                                                      {'IdentifierName': 'Next'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 's'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '4'}]}]}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 's'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'span'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'span'},
                                                                                                                                                                      {'IdentifierName': 'Next'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'makeQuery'}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'SpanNearQuery'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'value': '0'}],
                                                                                            'name': {'identifier': 'get'},
                                                                                            'scope': {'name': {'identifier': 'leaves'},
                                                                                                      'scope': {'name': {'identifier': 'getIndexReader'},
                                                                                                                'scope': {'name': {'identifier': 'searcher'}}}}},
                                                                                           {'name': {'identifier': 'POSITIONS'},
                                                                                            'scope': {'name': {'identifier': 'Postings'},
                                                                                                      'scope': {'name': {'identifier': 'SpanWeight'}}}}],
                                                                             'name': {'identifier': 'getSpans'},
                                                                             'scope': {'arguments': [{'name': {'identifier': 'searcher'}},
                                                                                                     {'name': {'identifier': 'COMPLETE_NO_SCORES'},
                                                                                                      'scope': {'name': {'identifier': 'ScoreMode'}}},
                                                                                                     {'value': '1f'}],
                                                                                       'name': {'identifier': 'createWeight'},
                                                                                       'scope': {'name': {'identifier': 'q'}}}},
                                                             'name': {'identifier': 'span'},
                                                             'type': {'name': {'identifier': 'Spans'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'span'}},
                                                            {'value': '0'},
                                                            {'value': '0'},
                                                            {'value': '3'}],
                                              'name': {'identifier': 'assertNext'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'span'}},
                                                            {'value': '1'},
                                                            {'value': '0'},
                                                            {'value': '4'}],
                                              'name': {'identifier': 'assertNext'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'span'}}],
                                              'name': {'identifier': 'assertFinished'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'AddExpression': [{'MultiplyExpression': [{'NumericLiteralExpression': '2'},
                                                                                                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'counterThread'},
                                                                                                                                                                                                                              {'IdentifierName': 'Resolution'}]}]},
                                                                                                                                                                    {'IdentifierName': 'TIME_ALLOWED'}]},
                                                                                                                                                 {'IdentifierName': 'SLOW_DOWN'}]}]}]}]}]},
                       {'IfStatement': [{'IdentifierName': 'multiThreaded'},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'res'},
                                                                                                            {'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                {'ParenthesizedExpression': [{'MultiplyExpression': [{'IdentifierName': 'res'},
                                                                                                                                                                                     {'IdentifierName': 'MULTI_THREAD_SLACK'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'res'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'left': {'left': {'value': '2'},
                                                                                               'operator': 'MULTIPLY',
                                                                                               'right': {'name': {'identifier': 'getResolution'},
                                                                                                         'scope': {'name': {'identifier': 'counterThread'}}}},
                                                                                      'operator': 'PLUS',
                                                                                      'right': {'name': {'identifier': 'TIME_ALLOWED'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'SLOW_DOWN'}}},
                                                             'name': {'identifier': 'res'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'name': {'identifier': 'multiThreaded'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'MULTIPLY',
                                                                           'target': {'name': {'identifier': 'res'}},
                                                                           'value': {'name': {'identifier': 'MULTI_THREAD_SLACK'}}}}]}},
                              {'expression': {'name': {'identifier': 'res'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                                                                {'IdentifierName': 'Searcher'}]},
                                                                                                                                              {'IdentifierName': 'IndexReader'}]},
                                                                                                            {'IdentifierName': 'DecRef'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                              {'IdentifierName': 'TaxonomyReader'}]},
                                                                                                            {'IdentifierName': 'DecRef'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'decRef'},
                                              'scope': {'name': {'identifier': 'getIndexReader'},
                                                        'scope': {'name': {'identifier': 'searcher'},
                                                                  'scope': {'name': {'identifier': 'ref'}}}}}},
                              {'expression': {'name': {'identifier': 'decRef'},
                                              'scope': {'name': {'identifier': 'taxonomyReader'},
                                                        'scope': {'name': {'identifier': 'ref'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]},
                                                                                {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                    {'ParenthesizedExpression': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'len'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}},
                               'message': {'left': {'left': {'value': 'len '
                                                                      'must be '
                                                                      '> 0 '
                                                                      '(got '},
                                                    'operator': 'PLUS',
                                                    'right': {'name': {'identifier': 'len'}}},
                                           'operator': 'PLUS',
                                           'right': {'value': ')'}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'valueCount'}}}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'off'}},
                                                  'operator': 'PLUS',
                                                  'right': {'name': {'identifier': 'len'}}},
                                         'operator': 'LESS_EQUALS',
                                         'right': {'name': {'identifier': 'length'},
                                                   'scope': {'name': {'identifier': 'arr'}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'valueCount'}},
                                                                                            'operator': 'MINUS',
                                                                                            'right': {'name': {'identifier': 'index'}}},
                                                                                           {'name': {'identifier': 'len'}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'sets'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'values'}}},
                                                                       'value': {'expression': {'index': {'name': {'identifier': 'o'}},
                                                                                                'name': {'name': {'identifier': 'arr'}}},
                                                                                 'type': {'type': 'INT'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'index'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'name': {'identifier': 'off'}},
                                                                  'name': {'identifier': 'o'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'left': {'name': {'identifier': 'index'}},
                                                                                  'operator': 'PLUS',
                                                                                  'right': {'name': {'identifier': 'sets'}}},
                                                                  'name': {'identifier': 'end'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'},
                                          {'expression': {'name': {'identifier': 'o'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'sets'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'NGramTokenizerTest'},
                                                                                                            {'IdentifierName': 'TestNGrams'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'minGram'}]},
                                                                                            {'Argument': [{'IdentifierName': 'maxGram'}]},
                                                                                            {'Argument': [{'IdentifierName': 's'}]},
                                                                                            {'Argument': [{'IdentifierName': 'nonTokenChars'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'minGram'}},
                                                            {'name': {'identifier': 'maxGram'}},
                                                            {'name': {'identifier': 's'}},
                                                            {'name': {'identifier': 'nonTokenChars'}},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'testNGrams'},
                                              'scope': {'name': {'identifier': 'NGramTokenizerTest'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'NullableType': [{'PredefinedType': 'int'}]},
                                                                               {'VariableDeclarator': 'val'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ELEMENTS'},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'elem'}]},
                                                                                            {'Argument': [{'IdentifierName': 'val'}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'val'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'val'},
                                                                                                         {'IdentifierName': 'Value'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'elem'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'ELEMENTS'}}},
                                                             'name': {'identifier': 'val'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'expression': {'condition': {'left': {'name': {'identifier': 'val'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'name': {'identifier': 'intValue'},
                                                           'scope': {'name': {'identifier': 'val'}}},
                                              'thenExpr': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'i'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Pos'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'i'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'pos'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                {'ParenthesizedExpression': [{'AddExpression': [{'NumericLiteralExpression': '0x30'},
                                                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                                                                            {'IdentifierName': 'Next'}]},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '10'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'inner': {'left': {'value': '0x30'},
                                                                       'operator': 'PLUS',
                                                                       'right': {'arguments': [{'value': '10'}],
                                                                                 'name': {'identifier': 'nextInt'},
                                                                                 'scope': {'name': {'identifier': 'random'}}}}},
                                              'type': {'type': 'CHAR'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'BlockedFlush'},
                                             {'IdentifierName': 'blockedFlushes'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                             {'IdentifierName': 'Assert'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blockedFlush'},
                                                                                                                                                                                                                                     {'IdentifierName': 'Dwpt'}]},
                                                                                                                                                                                                   {'IdentifierName': 'deleteQueue'}]},
                                                                                                                                                                 {'IdentifierName': 'flushingQueue'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'check': {'left': {'name': {'identifier': 'deleteQueue'},
                                                                           'scope': {'name': {'identifier': 'dwpt'},
                                                                                     'scope': {'name': {'identifier': 'blockedFlush'}}}},
                                                                  'operator': 'EQUALS',
                                                                  'right': {'name': {'identifier': 'flushingQueue'}}}}]},
                               'iterable': {'name': {'identifier': 'blockedFlushes'}},
                               'variable': {'variables': [{'name': {'identifier': 'blockedFlush'},
                                                           'type': {'name': {'identifier': 'BlockedFlush'}}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'FieldQueryNode'},
                                                                                                                                                  {'IdentifierName': 'queryNode'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TermQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Term'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldNode'},
                                                                                                                                                                                                                                    {'IdentifierName': 'GetFieldAsString'}]},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                          {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldNode'},
                                                                                                                                                                                                                                    {'IdentifierName': 'GetTextAsString'}]},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'queryNode'}},
                                                                             'type': {'name': {'identifier': 'FieldQueryNode'}}},
                                                             'name': {'identifier': 'fieldNode'},
                                                             'type': {'name': {'identifier': 'FieldQueryNode'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'getFieldAsString'},
                                                                            'scope': {'name': {'identifier': 'fieldNode'}}},
                                                                           {'name': {'identifier': 'getTextAsString'},
                                                                            'scope': {'name': {'identifier': 'fieldNode'}}}],
                                                             'type': {'name': {'identifier': 'Term'}}}],
                                              'type': {'name': {'identifier': 'TermQuery'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SegmentInfos'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'SegmentInfos'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'infos'},
                                                                                                            {'IdentifierName': 'Read'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'infos'},
                                                                              {'IdentifierName': 'UserData'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}}],
                                                                             'name': {'identifier': 'readLatestCommit'},
                                                                             'scope': {'name': {'identifier': 'SegmentInfos'}}},
                                                             'name': {'identifier': 'infos'},
                                                             'type': {'name': {'identifier': 'SegmentInfos'}}}]}},
                              {'expression': {'name': {'identifier': 'getUserData'},
                                              'scope': {'name': {'identifier': 'infos'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentSubIndex'}]}]}]},
                                                                                                                                                                                          {'IdentifierName': 'NextOrd'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'segmentOrd'},
                                                              {'IdentifierName': 'NO_MORE_ORDS'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'segmentOrd'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mapping'},
                                                                                                                                                    {'IdentifierName': 'GetGlobalOrd'}]},
                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentSubIndex'}]},
                                                                                                                                    {'Argument': [{'IdentifierName': 'segmentOrd'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'nextOrd'},
                                                                             'scope': {'name': {'identifier': 'currentValues'}}},
                                                             'name': {'identifier': 'segmentOrd'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'segmentOrd'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'NO_MORE_ORDS'}}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'segmentOrd'}}],
                                                                           'name': {'identifier': 'get'},
                                                                           'scope': {'arguments': [{'left': {'name': {'identifier': 'nextLeaf'}},
                                                                                                    'operator': 'MINUS',
                                                                                                    'right': {'value': '1'}}],
                                                                                     'name': {'identifier': 'getGlobalOrds'},
                                                                                     'scope': {'name': {'identifier': 'mapping'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'segmentOrd'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'BeforeClass'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'LineDocFile'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'LineFileDocs'},
                                                                                                              {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                        {'ArgumentList': '()'}]}]},
                                                                                                                                {'Argument': [{'InvocationExpression': [{'IdentifierName': 'DefaultCodecSupportsDocValues'},
                                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lineDocFile'}},
                                              'value': {'arguments': [{'name': {'identifier': 'random'}}],
                                                        'type': {'name': {'identifier': 'LineFileDocs'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'firstPassGroupingCollector'},
                                                                                                                                                                {'IdentifierName': 'GetType'}]},
                                                                                                                              {'ArgumentList': '()'}]},
                                                                                                    {'IdentifierName': 'IsAssignableFrom'}]},
                                                                  {'ArgumentList': [{'Argument': [{'TypeOfExpression': [{'IdentifierName': 'TermFirstPassGroupingCollector'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'TermAllGroupsCollector'},
                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]}]}]},
                                                                                          {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'T'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ValueSource'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRefFieldSource'},
                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]}]}]}]}]}]}]},
                                                                   {'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'FunctionAllGroupsCollector'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'vs'}]},
                                                                                                                                                          {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Hashtable'},
                                                                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                                                                                                          {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'T'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getGroupSelector'},
                                                             'scope': {'name': {'identifier': 'firstPassGroupingCollector'}}}],
                                              'type': {'name': {'identifier': 'AllGroupsCollector'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'len'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'offset'},
                                                                                                                                                                                                      {'IdentifierName': 'i'}]}]}]}]},
                                                                                                             {'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostDecrementExpression': [{'IdentifierName': 'pos'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'left': {'name': {'identifier': 'offset'}},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'name': {'identifier': 'i'}}},
                                                                                  'name': {'name': {'identifier': 'b'}}},
                                                                       'value': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                                                           'operator': 'POSTFIX_DECREMENT'},
                                                                                 'name': {'name': {'identifier': 'bytes'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'len'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'offset'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                   {'IdentifierName': 'l'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'DoStatement': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'j'}]}]}]}]},
                                                                                                                                {'IdentifierName': 'value'}]}]},
                                                                       {'GreaterThanExpression': [{'PreDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'j'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'}},
                                                             'name': {'identifier': 'j'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'packed'}}},
                                                             'name': {'identifier': 'l'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'value'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'body': {'expression': {'operator': 'ASSIGN',
                                                                                'target': {'index': {'expression': {'name': {'identifier': 'j'}},
                                                                                                     'operator': 'POSTFIX_INCREMENT'},
                                                                                           'name': {'name': {'identifier': 'result'}}},
                                                                                'value': {'name': {'identifier': 'value'}}}},
                                                        'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                                               'operator': 'PREFIX_DECREMENT'},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}}}]},
                               'condition': {'left': {'name': {'identifier': 'i'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'l'}}}},
                              {'expression': {'name': {'identifier': 'j'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StandardAnalyzer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StandardAnalyzer'}}},
                                                             'name': {'identifier': 'analyzer'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'analyzer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_writer'},
                                                                                                                                                                                          {'IdentifierName': 'Get'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'w'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'GreaterThanExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                                                                                                     {'IdentifierName': 'NumDeletedDocs'}]},
                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'info'}]}]}]},
                                                                                                                                                         {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'LogicalNotExpression': [{'IdentifierName': 'hasDeletions'}]},
                                                                                                                          {'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'info'},
                                                                                                                                                                                                                        {'IdentifierName': 'Info'}]},
                                                                                                                                                                                      {'IdentifierName': 'HasSeparateNorms'}]}]}]},
                                                                                                {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'info'},
                                                                                                                                                                                          {'IdentifierName': 'Info'}]},
                                                                                                                                                        {'IdentifierName': 'Dir'}]},
                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                                        {'IdentifierName': 'Directory'}]}]}]},
                                                                      {'EqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'UseCompoundFile'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'infos'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'info'}]}]}]},
                                                                                            {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'info'},
                                                                                                                                                                {'IdentifierName': 'Info'}]},
                                                                                                                              {'IdentifierName': 'UseCompoundFile'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'writer'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {}}},
                              {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'info'}}],
                                                                                      'name': {'identifier': 'numDeletedDocs'},
                                                                                      'scope': {'name': {'identifier': 'writer'}}},
                                                                             'operator': 'GREATER',
                                                                             'right': {'value': '0'}},
                                                             'name': {'identifier': 'hasDeletions'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'left': {'left': {'expression': {'name': {'identifier': 'hasDeletions'}},
                                                                'operator': 'LOGICAL_COMPLEMENT'},
                                                       'operator': 'AND',
                                                       'right': {'left': {'name': {'identifier': 'dir'},
                                                                          'scope': {'name': {'identifier': 'info'},
                                                                                    'scope': {'name': {'identifier': 'info'}}}},
                                                                 'operator': 'EQUALS',
                                                                 'right': {'name': {'identifier': 'getDirectory'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}}},
                                              'operator': 'AND',
                                              'right': {'left': {'arguments': [{'name': {'identifier': 'infos'}},
                                                                               {'name': {'identifier': 'info'}},
                                                                               {'name': {'identifier': 'writer'}}],
                                                                 'name': {'identifier': 'useCompoundFile'}},
                                                        'operator': 'EQUALS',
                                                        'right': {'name': {'identifier': 'getUseCompoundFile'},
                                                                  'scope': {'name': {'identifier': 'info'},
                                                                            'scope': {'name': {'identifier': 'info'}}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'globalBufferLock'},
                                                                                                    {'IdentifierName': 'TryLock'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'TryStatement': [{'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'UpdateSlice'},
                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'globalSlice'}]}]}]},
                                                                                                 {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'globalSlice'},
                                                                                                                                                                                                 {'IdentifierName': 'Apply'}]},
                                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'globalBufferedUpdates'}]},
                                                                                                                                                                                 {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BufferedUpdates'},
                                                                                                                                                                                                                                 {'IdentifierName': 'MAX_INT32'}]}]}]}]}]}]}]}]},
                                                                     {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'globalBufferLock'},
                                                                                                                                                                                        {'IdentifierName': 'Unlock'}]},
                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'tryLock'},
                                             'scope': {'name': {'identifier': 'globalBufferLock'}}},
                               'thenStmt': {'statements': [{'finallyBlock': {'statements': [{'expression': {'name': {'identifier': 'unlock'},
                                                                                                            'scope': {'name': {'identifier': 'globalBufferLock'}}}}]},
                                                            'tryBlock': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'globalSlice'}}],
                                                                                                       'name': {'identifier': 'updateSliceNoSeqNo'}},
                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'globalBufferedUpdates'}},
                                                                                                                                                   {'name': {'identifier': 'MAX_INT'},
                                                                                                                                                    'scope': {'name': {'identifier': 'BufferedUpdates'}}}],
                                                                                                                                     'name': {'identifier': 'apply'},
                                                                                                                                     'scope': {'name': {'identifier': 'globalSlice'}}}}]}}]}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'OrQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'queries'}]},
                                                                                            {'Argument': [{'IdentifierName': 'infix'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'orToken'},
                                                                                                                                            {'IdentifierName': 'Image'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'queries'}},
                                                            {'name': {'identifier': 'infix'}},
                                                            {'name': {'identifier': 'image'},
                                                             'scope': {'name': {'identifier': 'orToken'}}}],
                                              'type': {'name': {'identifier': 'OrQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dictionary'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'AfterClass'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'dictionary'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'segments'},
                                                                                                        {'IdentifierName': 'Contains'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'si'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'si'}}],
                                              'name': {'identifier': 'contains'},
                                              'scope': {'name': {'identifier': 'segments'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Monitor'},
                                                                                                                                          {'IdentifierName': 'Wait'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                          {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TimeSpan'},
                                                                                                                                                                                                    {'IdentifierName': 'FromMilliseconds'}]},
                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1000'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ie'}}],
                                                                                         'type': {'name': {'identifier': 'ThreadInterruptedException'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'ie'},
                                                               'type': {'name': {'identifier': 'InterruptedException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'value': '1000'}],
                                                                           'name': {'identifier': 'wait'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Arrays'},
                                                                                                            {'IdentifierName': 'Fill'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'keys'}]},
                                                                                            {'Argument': [{'IdentifierName': 'EmptyVal'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Count'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'keys'}},
                                                            {'name': {'identifier': 'emptyVal'}}],
                                              'name': {'identifier': 'fill'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'count'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                            {'IdentifierName': 'AddDocuments'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaybeCommit'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'r'}},
                                                            {'name': {'identifier': 'getConfig'},
                                                             'scope': {'name': {'identifier': 'w'}}}],
                                              'name': {'identifier': 'maybeChangeLiveIndexWriterConfig'},
                                              'scope': {'name': {'identifier': 'LuceneTestCase'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'docs'}}],
                                                                             'name': {'identifier': 'addDocuments'},
                                                                             'scope': {'name': {'identifier': 'w'}}},
                                                             'name': {'identifier': 'seqNo'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'name': {'identifier': 'maybeFlushOrCommit'}}},
                              {'expression': {'name': {'identifier': 'seqNo'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'provider'},
                                                                                                                                                                                          {'IdentifierName': 'GetOrAdd'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'FieldName'}]},
                                                                                                                                                                          {'Argument': [{'SimpleLambdaExpression': [{'Parameter': 'f'},
                                                                                                                                                                                                                    {'ObjectCreationExpression': [{'IdentifierName': 'PointPrefixTreeFieldCacheProvider'},
                                                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_grid'}]},
                                                                                                                                                                                                                                                                    {'Argument': [{'IdentifierName': 'FieldName'}]},
                                                                                                                                                                                                                                                                    {'Argument': [{'IdentifierName': 'm_defaultFieldValuesArrayLen'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ShapeFieldCacheDistanceValueSource'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_ctx'}]},
                                                                                            {'Argument': [{'IdentifierName': 'p'}]},
                                                                                            {'Argument': [{'IdentifierName': 'queryPoint'}]},
                                                                                            {'Argument': [{'IdentifierName': 'multiplier'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getFieldName'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'provider'}}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'name': {'identifier': 'PointPrefixTreeFieldCacheProvider'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'p'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'p'}},
                                                                                                    'value': {'arguments': [{'name': {'identifier': 'getFieldName'}}],
                                                                                                              'name': {'identifier': 'get'},
                                                                                                              'scope': {'name': {'identifier': 'provider'}}}}},
                                                                                    {'condition': {'left': {'name': {'identifier': 'p'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {}},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'p'}},
                                                                                                                                 'value': {'arguments': [{'name': {'identifier': 'grid'}},
                                                                                                                                                         {'name': {'identifier': 'getFieldName'}},
                                                                                                                                                         {'name': {'identifier': 'defaultFieldValuesArrayLen'}}],
                                                                                                                                           'type': {'name': {'identifier': 'PointPrefixTreeFieldCacheProvider'}}}}},
                                                                                                                 {'expression': {'arguments': [{'name': {'identifier': 'getFieldName'}},
                                                                                                                                               {'name': {'identifier': 'p'}}],
                                                                                                                                 'name': {'identifier': 'put'},
                                                                                                                                 'scope': {'name': {'identifier': 'provider'}}}}]}}]},
                                                            'expression': {}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ctx'}},
                                                            {'name': {'identifier': 'p'}},
                                                            {'name': {'identifier': 'queryPoint'}},
                                                            {'name': {'identifier': 'multiplier'}}],
                                              'type': {'name': {'identifier': 'ShapeFieldCacheDistanceValueSource'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AssertingFieldsProducer'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                      {'IdentifierName': 'FieldsProducer'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'state'}}],
                                                             'name': {'identifier': 'fieldsProducer'},
                                                             'scope': {'name': {'identifier': 'in'}}}],
                                              'type': {'name': {'identifier': 'AssertingFieldsProducer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'make1dmfIndex'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'shortMVValues'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'shortMVValues'}}],
                                              'name': {'identifier': 'make1dmfIndex'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Create'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'sort'}]},
                                                                                        {'Argument': [{'IdentifierName': 'numHits'}]},
                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                        {'Argument': [{'IdentifierName': 'fillFields'}]},
                                                                                        {'Argument': [{'IdentifierName': 'trackDocScores'}]},
                                                                                        {'Argument': [{'IdentifierName': 'trackMaxScore'}]},
                                                                                        {'Argument': [{'IdentifierName': 'docsScoredInOrder'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'fields'},
                                                                'scope': {'name': {'identifier': 'sort'}}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'Sort '
                                                                                                   'must '
                                                                                                   'contain '
                                                                                                   'at '
                                                                                                   'least '
                                                                                                   'one '
                                                                                                   'field'}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'numHits'}},
                                             'operator': 'LESS_EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'numHits '
                                                                                                   'must '
                                                                                                   'be '
                                                                                                   '> '
                                                                                                   '0; '
                                                                                                   'please '
                                                                                                   'use '
                                                                                                   'TotalHitCountCollector '
                                                                                                   'if '
                                                                                                   'you '
                                                                                                   'just '
                                                                                                   'need '
                                                                                                   'the '
                                                                                                   'total '
                                                                                                   'hit '
                                                                                                   'count'}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'fields'},
                                                                                            'scope': {'name': {'identifier': 'sort'}}},
                                                                                           {'name': {'identifier': 'numHits'}}],
                                                                             'name': {'identifier': 'create'},
                                                                             'scope': {'name': {'identifier': 'FieldValueHitQueue'}}},
                                                             'name': {'identifier': 'queue'},
                                                             'type': {'name': {'identifier': 'FieldValueHitQueue'},
                                                                      'typeArguments': [{'name': {'identifier': 'Entry'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'after'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'fields'},
                                                                                   'scope': {'name': {'identifier': 'after'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'after.fields '
                                                                                                                                "wasn't "
                                                                                                                                'set; '
                                                                                                                                'you '
                                                                                                                                'must '
                                                                                                                                'pass '
                                                                                                                                'fillFields=true '
                                                                                                                                'for '
                                                                                                                                'the '
                                                                                                                                'previous '
                                                                                                                                'search'}],
                                                                                                        'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'length'},
                                                                                   'scope': {'name': {'identifier': 'fields'},
                                                                                             'scope': {'name': {'identifier': 'after'}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {'name': {'identifier': 'length'},
                                                                                    'scope': {'name': {'identifier': 'getSort'},
                                                                                              'scope': {'name': {'identifier': 'sort'}}}}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'left': {'value': 'after.fields '
                                                                                                                                                           'has '},
                                                                                                                                         'operator': 'PLUS',
                                                                                                                                         'right': {'name': {'identifier': 'length'},
                                                                                                                                                   'scope': {'name': {'identifier': 'fields'},
                                                                                                                                                             'scope': {'name': {'identifier': 'after'}}}}},
                                                                                                                                'operator': 'PLUS',
                                                                                                                                'right': {'value': ' '
                                                                                                                                                   'values '
                                                                                                                                                   'but '
                                                                                                                                                   'sort '
                                                                                                                                                   'has '}},
                                                                                                                       'operator': 'PLUS',
                                                                                                                       'right': {'name': {'identifier': 'length'},
                                                                                                                                 'scope': {'name': {'identifier': 'getSort'},
                                                                                                                                           'scope': {'name': {'identifier': 'sort'}}}}}],
                                                                                                        'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'sort'}},
                                                                                         {'name': {'identifier': 'queue'}},
                                                                                         {'name': {'identifier': 'after'}},
                                                                                         {'name': {'identifier': 'numHits'}},
                                                                                         {'name': {'identifier': 'fillFields'}},
                                                                                         {'name': {'identifier': 'trackDocScores'}},
                                                                                         {'name': {'identifier': 'trackMaxScore'}},
                                                                                         {'name': {'identifier': 'trackTotalHits'}}],
                                                                           'type': {'name': {'identifier': 'PagingFieldCollector'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'sort'}},
                                                                                         {'name': {'identifier': 'queue'}},
                                                                                         {'name': {'identifier': 'numHits'}},
                                                                                         {'name': {'identifier': 'fillFields'}},
                                                                                         {'name': {'identifier': 'trackDocScores'}},
                                                                                         {'name': {'identifier': 'trackMaxScore'}},
                                                                                         {'name': {'identifier': 'trackTotalHits'}}],
                                                                           'type': {'name': {'identifier': 'SimpleFieldCollector'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'posTranslations'},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                            {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'posTranslations'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                            {'IdentifierName': 'WriteInt64'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'dirStart'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'dirStart'}}],
                                              'name': {'identifier': 'writeLong'},
                                              'scope': {'name': {'identifier': 'out'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'long'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'long'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                                                                                      {'IdentifierName': 'bits'}]},
                                                                                                                                                                                                                                    {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Array'},
                                                                                                            {'IdentifierName': 'Copy'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                            {'IdentifierName': 'bits'}]}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'bits'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FixedBitSet'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'bits'}]},
                                                                                            {'Argument': [{'IdentifierName': 'numBits'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'LONG'},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'},
                                                                                                       'scope': {'name': {'identifier': 'bits'},
                                                                                                                 'scope': {}}}}]},
                                                             'name': {'identifier': 'bits'},
                                                             'type': {'componentType': {'type': 'LONG'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bits'},
                                                             'scope': {}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'bits'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'numWords'}}],
                                              'name': {'identifier': 'arraycopy'},
                                              'scope': {'name': {'identifier': 'System'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bits'}},
                                                            {'name': {'identifier': 'numBits'}}],
                                              'type': {'name': {'identifier': 'FixedBitSet'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'EnglishMinimalStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'EnglishMinimalStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Random'},
                                                                                                                          {'IdentifierName': 'Next'}]},
                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '4'}]}]}]},
                                                              {'NumericLiteralExpression': '2'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'System'},
                                                                                                                                                                                                            {'IdentifierName': 'Threading'}]},
                                                                                                                                                                          {'IdentifierName': 'Thread'}]},
                                                                                                                                        {'IdentifierName': 'Sleep'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'arguments': [{'value': '4'}],
                                                      'name': {'identifier': 'nextInt'},
                                                      'scope': {'name': {'identifier': 'random'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '2'}},
                               'thenStmt': {'expression': {'name': {'identifier': 'yield'},
                                                           'scope': {'name': {'identifier': 'Thread'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                            {'IdentifierName': 'WriteVInt32'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'idx'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'idx'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                                                         {'IdentifierName': 'WriteVInt32'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                                                                                      {'IdentifierName': 'Int32s'}]},
                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'prefix'},
                                                                                                                                                                                                                                                                  {'IdentifierName': 'Offset'}]},
                                                                                                                                                                                                                                {'IdentifierName': 'idx'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'prefix'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'prefix'}}}],
                                              'name': {'identifier': 'writeVInt'},
                                              'scope': {'name': {'identifier': 'out'}}}},
                              {'body': {'statements': [{'expression': {'arguments': [{'index': {'left': {'name': {'identifier': 'offset'},
                                                                                                         'scope': {'name': {'identifier': 'prefix'}}},
                                                                                                'operator': 'PLUS',
                                                                                                'right': {'name': {'identifier': 'idx'}}},
                                                                                      'name': {'name': {'identifier': 'ints'},
                                                                                               'scope': {'name': {'identifier': 'prefix'}}}}],
                                                                       'name': {'identifier': 'writeVInt'},
                                                                       'scope': {'name': {'identifier': 'out'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'idx'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'prefix'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'idx'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'idx'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'hiByte'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec3'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i2'}]}]}]},
                                                                                                                                                                                                 {'IdentifierName': 'l2'}]}]},
                                                                                                                                          {'NumericLiteralExpression': '0L'}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '48'}]},
                                                               {'ReturnStatement': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec1'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i2'}]}]}]},
                                                                                                                                                                                                 {'IdentifierName': 'l2'}]}]},
                                                                                                                                          {'NumericLiteralExpression': '0L'}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec4'},
                                                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i1'}]}]}]},
                                                                                                                                                                {'IdentifierName': 'l1'}]}]},
                                                                                                         {'NumericLiteralExpression': '0L'}]},
                                                                                {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'inner': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i2'}},
                                                                                                                 'name': {'name': {'identifier': 'jjbitVec3'}}},
                                                                                                        'operator': 'BINARY_AND',
                                                                                                        'right': {'name': {'identifier': 'l2'}}}},
                                                                                     'operator': 'NOT_EQUALS',
                                                                                     'right': {'value': '0L'}}}}]},
                                           {'label': {'value': '48'},
                                            'statements': [{'expression': {'inner': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i2'}},
                                                                                                                 'name': {'name': {'identifier': 'jjbitVec1'}}},
                                                                                                        'operator': 'BINARY_AND',
                                                                                                        'right': {'name': {'identifier': 'l2'}}}},
                                                                                     'operator': 'NOT_EQUALS',
                                                                                     'right': {'value': '0L'}}}}]},
                                           {'statements': [{'condition': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i1'}},
                                                                                                      'name': {'name': {'identifier': 'jjbitVec4'}}},
                                                                                             'operator': 'BINARY_AND',
                                                                                             'right': {'name': {'identifier': 'l1'}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {'value': '0L'}},
                                                            'thenStmt': {'expression': {'value': 'true'}}},
                                                           {'expression': {'value': 'false'}}]}],
                               'selector': {'name': {'identifier': 'hiByte'}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'hiByte'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '48'}]},
                                                               {'ReturnStatement': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec0'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i2'}]}]}]},
                                                                                                                                                                                                 {'IdentifierName': 'l2'}]}]},
                                                                                                                                          {'NumericLiteralExpression': '0L'}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'value': '48'},
                                            'statements': [{'expression': {'inner': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i2'}},
                                                                                                                 'name': {'name': {'identifier': 'jjbitVec0'}}},
                                                                                                        'operator': 'BINARY_AND',
                                                                                                        'right': {'name': {'identifier': 'l2'}}}},
                                                                                     'operator': 'NOT_EQUALS',
                                                                                     'right': {'value': '0L'}}}}]},
                                           {'statements': [{'expression': {'value': 'false'}}]}],
                               'selector': {'name': {'identifier': 'hiByte'}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'hiByte'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec3'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i2'}]}]}]},
                                                                                                                                                                                                 {'IdentifierName': 'l2'}]}]},
                                                                                                                                          {'NumericLiteralExpression': '0L'}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjbitVec1'},
                                                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i1'}]}]}]},
                                                                                                                                                                {'IdentifierName': 'l1'}]}]},
                                                                                                         {'NumericLiteralExpression': '0L'}]},
                                                                                {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'inner': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i2'}},
                                                                                                                 'name': {'name': {'identifier': 'jjbitVec3'}}},
                                                                                                        'operator': 'BINARY_AND',
                                                                                                        'right': {'name': {'identifier': 'l2'}}}},
                                                                                     'operator': 'NOT_EQUALS',
                                                                                     'right': {'value': '0L'}}}}]},
                                           {'statements': [{'condition': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i1'}},
                                                                                                      'name': {'name': {'identifier': 'jjbitVec1'}}},
                                                                                             'operator': 'BINARY_AND',
                                                                                             'right': {'name': {'identifier': 'l1'}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {'value': '0L'}},
                                                            'thenStmt': {'expression': {'value': 'true'}}},
                                                           {'expression': {'value': 'false'}}]}],
                               'selector': {'name': {'identifier': 'hiByte'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Token'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'Token'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'index'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                {'IdentifierName': 'Next'}]},
                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 't'},
                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                {'IdentifierName': 'Next'}]}]}]},
                                                                     {'ElseClause': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 't'},
                                                                                                                                              {'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                                                {'IdentifierName': 'Next'}]},
                                                                                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TokenSource'},
                                                                                                                                                                                                                                          {'IdentifierName': 'GetNextToken'}]},
                                                                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'token'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'next'},
                                                                               'scope': {'name': {'identifier': 't'}}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'elseStmt': {'expression': {'operator': 'ASSIGN',
                                                                                    'target': {'name': {'identifier': 't'}},
                                                                                    'value': {'operator': 'ASSIGN',
                                                                                              'target': {'name': {'identifier': 'next'},
                                                                                                         'scope': {'name': {'identifier': 't'}}},
                                                                                              'value': {'name': {'identifier': 'getNextToken'},
                                                                                                        'scope': {'name': {'identifier': 'token_source'}}}}}},
                                                        'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                                                    'target': {'name': {'identifier': 't'}},
                                                                                    'value': {'name': {'identifier': 'next'},
                                                                                              'scope': {'name': {'identifier': 't'}}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'index'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'AllThreads'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'AllThreads'},
                                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                        {'NullLiteralExpression': 'null'}]},
                                                                                               {'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'AllThreads'},
                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                 {'IdentifierName': 'Failed'}]}]},
                                                                     {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'body': {'condition': {'left': {'left': {'index': {'name': {'identifier': 'i'}},
                                                                        'name': {'name': {'identifier': 'allThreads'}}},
                                                               'operator': 'NOT_EQUALS',
                                                               'right': {}},
                                                      'operator': 'AND',
                                                      'right': {'name': {'identifier': 'failed'},
                                                                'scope': {'index': {'name': {'identifier': 'i'}},
                                                                          'name': {'name': {'identifier': 'allThreads'}}}}},
                                        'thenStmt': {'expression': {'value': 'true'}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'allThreads'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                    {'ArgumentList': '()'}]},
                                                                                                                                                                                          {'IdentifierName': 'NextDouble'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'd'},
                                                                {'NumericLiteralExpression': '0.7'}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Cl2oTaxonomyWriterCache'},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1024'}]},
                                                                                                                        {'Argument': [{'NumericLiteralExpression': '0.15f'}]},
                                                                                                                        {'Argument': [{'NumericLiteralExpression': '3'}]}]}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'LogicalAndExpression': [{'IdentifierName': 'TEST_NIGHTLY'},
                                                                                                   {'GreaterThanExpression': [{'IdentifierName': 'd'},
                                                                                                                              {'NumericLiteralExpression': '0.98'}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'IdentifierName': 'NO_OP_CACHE'}]}]},
                                                                         {'ElseClause': [{'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LruTaxonomyWriterCache'},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'DivideExpression': [{'IdentifierName': 'ndocs'},
                                                                                                                                                                                                             {'NumericLiteralExpression': '10'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'nextDouble'},
                                                                             'scope': {'name': {'identifier': 'random'}}},
                                                             'name': {'identifier': 'd'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'd'}},
                                             'operator': 'LESS',
                                             'right': {'value': '0.7'}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'TEST_NIGHTLY'}},
                                                          'operator': 'AND',
                                                          'right': {'left': {'name': {'identifier': 'd'}},
                                                                    'operator': 'GREATER',
                                                                    'right': {'value': '0.98'}}},
                                            'elseStmt': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'ndocs'}},
                                                                                                       'operator': 'DIVIDE',
                                                                                                       'right': {'value': '10'}}],
                                                                                        'type': {'name': {'identifier': 'LruTaxonomyWriterCache'}}}}]},
                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'NO_OP_CACHE'}}}]}},
                               'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'UTF8TaxonomyWriterCache'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                                                        {'ArgumentList': '()'}]}]},
                                                     {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docWriter'},
                                                                                                            {'IdentifierName': 'NumDocs'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'name': {'identifier': 'getNumDocs'},
                                              'scope': {'name': {'identifier': 'docWriter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Failures_Renamed'},
                                                                                                            {'IdentifierName': 'IncrementAndGet'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'incrementAndGet'},
                                              'scope': {'name': {'identifier': 'failures'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'exhausted'},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                        {'ElseClause': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'tokenCount'},
                                                                                                 {'IdentifierName': 'maxTokenCount'}]},
                                                                         {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                                                 {'IdentifierName': 'IncrementToken'}]},
                                                                                                                               {'ArgumentList': '()'}]},
                                                                                                     {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'tokenCount'}]}]},
                                                                                                                {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                                                                                     {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'exhausted'},
                                                                                                                                                                                         {'TrueLiteralExpression': 'true'}]}]},
                                                                                                                                {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                                                                         {'ElseClause': [{'Block': [{'WhileStatement': [{'LogicalAndExpression': [{'IdentifierName': 'consumeAllTokens'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                                                                                              {'IdentifierName': 'IncrementToken'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]},
                                                                                                                        {'Block': []}]},
                                                                                                    {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'exhausted'}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'tokenCount'}},
                                                          'operator': 'LESS',
                                                          'right': {'name': {'identifier': 'maxTokenCount'}}},
                                            'elseStmt': {'statements': [{'body': {},
                                                                         'condition': {'left': {'name': {'identifier': 'consumeAllTokens'}},
                                                                                       'operator': 'AND',
                                                                                       'right': {'name': {'identifier': 'incrementToken'},
                                                                                                 'scope': {'name': {'identifier': 'input'}}}}},
                                                                        {'expression': {'value': 'false'}}]},
                                            'thenStmt': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                                                                       'scope': {'name': {'identifier': 'input'}}},
                                                                         'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                     'target': {'name': {'identifier': 'exhausted'}},
                                                                                                                     'value': {'value': 'true'}}},
                                                                                                     {'expression': {'value': 'false'}}]},
                                                                         'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'tokenCount'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}},
                                                                                                     {'expression': {'value': 'true'}}]}}]}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                      {'IdentifierName': 'freq'}]},
                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                      {'IdentifierName': 'freq'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'freq'},
                                                       'scope': {'name': {'identifier': 'a'}}},
                                              'operator': 'LESS',
                                              'right': {'name': {'identifier': 'freq'},
                                                        'scope': {'name': {'identifier': 'b'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'totalHits'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'totalHits'}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AssertingStoredFieldsWriter'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                      {'IdentifierName': 'FieldsWriter'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'directory'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'si'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'context'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'directory'}},
                                                                           {'name': {'identifier': 'si'}},
                                                                           {'name': {'identifier': 'context'}}],
                                                             'name': {'identifier': 'fieldsWriter'},
                                                             'scope': {'name': {'identifier': 'in'}}}],
                                              'type': {'name': {'identifier': 'AssertingStoredFieldsWriter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': '_index'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': '_lastIndex'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'index'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'size'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Token'},
                                                                                                   {'IdentifierName': 'Next'}]},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Token'},
                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'Token'},
                                                                                                                                   {'IdentifierName': 'Next'}]}]}]},
                                        {'ElseClause': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Token'},
                                                                                                                 {'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Token'},
                                                                                                                                                                                   {'IdentifierName': 'Next'}]},
                                                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TokenSource'},
                                                                                                                                                                                                             {'IdentifierName': 'GetNextToken'}]},
                                                                                                                                                                           {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jj_ntk'},
                                                                                {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'jj_gen'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'Token'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'next'},
                                                      'scope': {'name': {'identifier': 'token'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'elseStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'token'}},
                                                           'value': {'operator': 'ASSIGN',
                                                                     'target': {'name': {'identifier': 'next'},
                                                                                'scope': {'name': {'identifier': 'token'}}},
                                                                     'value': {'name': {'identifier': 'getNextToken'},
                                                                               'scope': {'name': {'identifier': 'token_source'}}}}}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'token'}},
                                                           'value': {'name': {'identifier': 'next'},
                                                                     'scope': {'name': {'identifier': 'token'}}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'jj_ntk'}},
                                              'value': {'expression': {'value': '1'},
                                                        'operator': 'MINUS'}}},
                              {'expression': {'expression': {'name': {'identifier': 'jj_gen'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'token'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DocIdSetIterator'},
                                                                              {'IdentifierName': 'NO_MORE_DOCS'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'NO_MORE_DOCS'},
                                              'scope': {'name': {'identifier': 'DocIdSetIterator'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SoraniNormalizationFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'SoraniNormalizationFilter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'MultiplyExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                  {'IdentifierName': 'Tf'}]},
                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'freq'}]}]}]},
                                                                                                                                                      {'IdentifierName': 'weightValue'}]}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'norms'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                       {'IdentifierName': 'raw'},
                                                                       {'MultiplyExpression': [{'IdentifierName': 'raw'},
                                                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                           {'IdentifierName': 'DecodeNormValue'}]},
                                                                                                                         {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'norms'},
                                                                                                                                                                                                                     {'IdentifierName': 'Get'}]},
                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'freq'}}],
                                                                                      'name': {'identifier': 'tf'}},
                                                                             'operator': 'MULTIPLY',
                                                                             'right': {'name': {'identifier': 'queryWeight'}}},
                                                             'name': {'identifier': 'raw'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'expression': {'variables': [{'initializer': {'index': {'expression': {'inner': {'left': {'name': {'identifier': 'norm'}},
                                                                                                                'operator': 'BINARY_AND',
                                                                                                                'right': {'value': '0xFF'}}},
                                                                                       'type': {'type': 'INT'}},
                                                                             'name': {'name': {'identifier': 'normTable'}}},
                                                             'name': {'identifier': 'normValue'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'expression': {'left': {'name': {'identifier': 'raw'}},
                                              'operator': 'MULTIPLY',
                                              'right': {'name': {'identifier': 'normValue'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'DoFail'},
                                                                                {'FalseLiteralExpression': 'false'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doFail'}},
                                              'value': {'value': 'false'}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'TrueLiteralExpression': 'true'},
                                           {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Thread'},
                                                                                                                                                                        {'IdentifierName': 'Sleep'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1000'}]}]}]}]}]},
                                                                        {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'ThreadInterruptedException'}]},
                                                                                         {'Block': []}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'catchClauses': [{'body': {},
                                                                          'parameter': {'isVarArgs': 'false',
                                                                                        'name': {'identifier': 'e'},
                                                                                        'type': {'name': {'identifier': 'InterruptedException'}}}}],
                                                        'tryBlock': {'statements': [{'expression': {'arguments': [{'value': '1000'}],
                                                                                                    'name': {'identifier': 'sleep'},
                                                                                                    'scope': {'name': {'identifier': 'Thread'}}}}]}}]},
                               'condition': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'DUMMY_DECOMPRESSOR'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'DUMMY_DECOMPRESSOR'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'getAddAndVerifyIndexedDocuments'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'DATA_SIMPLE_BBOX'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'executeQueries'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SpatialMatchConcern'},
                                                                                                                                            {'IdentifierName': 'EXACT'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'QTEST_Simple_Queries_BBox'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'DATA_SIMPLE_BBOX'}}],
                                              'name': {'identifier': 'getAddAndVerifyIndexedDocuments'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'EXACT'},
                                                             'scope': {'name': {'identifier': 'SpatialMatchConcern'}}},
                                                            {'name': {'identifier': 'QTEST_Simple_Queries_BBox'}}],
                                              'name': {'identifier': 'executeQueries'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetParams'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@params'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'docSize'},
                                                                                {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                    {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'float'},
                                                                                                                                                                {'IdentifierName': 'Parse'}]},
                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': '@params'}]},
                                                                                                                                                {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CultureInfo'},
                                                                                                                                                                                                {'IdentifierName': 'InvariantCulture'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'params'}}],
                                              'name': {'identifier': 'setParams'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'docSize'}},
                                              'value': {'expression': {'arguments': [{'name': {'identifier': 'params'}}],
                                                                       'name': {'identifier': 'parseFloat'},
                                                                       'scope': {'name': {'identifier': 'Float'}}},
                                                        'type': {'type': 'INT'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldsWriter'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'FieldsWriter'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'docID'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'docID'}}],
                                              'name': {'identifier': 'oldToNew'},
                                              'scope': {'name': {'identifier': 'sortDocMap'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Analyzer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AnalyzerAnonymousInnerClassHelper'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'a'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                                                                                                                           'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                                                                                                                          {'value': 'false'}],
                                                                                                                                                                            'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                                                                                            'name': {'identifier': 'tokenizer'},
                                                                                                                                                            'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                                                                                                                             {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                                                                                                           {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                                                                                                                            'type': {'name': {'identifier': 'HyphenatedWordsFilter'}}}],
                                                                                                                                             'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]},
                                                                                                     'name': {'identifier': 'createComponents'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'fieldName'},
                                                                                                                     'type': {'name': {'identifier': 'String'}}}],
                                                                                                     'type': {'name': {'identifier': 'TokenStreamComponents'}}}],
                                                                             'type': {'name': {'identifier': 'Analyzer'}}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MatchAllDocsQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                                  {'IdentifierName': 'Boost'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Bqtest'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'q'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '0'},
                                                                                                                                                                       {'NumericLiteralExpression': '1'},
                                                                                                                                                                       {'NumericLiteralExpression': '2'},
                                                                                                                                                                       {'NumericLiteralExpression': '3'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MatchAllDocsQuery'}}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'q'}},
                                                                           {'value': '0'}],
                                                             'type': {'name': {'identifier': 'BoostQuery'}}},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '0'},
                                                                                        {'value': '1'},
                                                                                        {'value': '2'},
                                                                                        {'value': '3'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'bqtest'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                  {'IdentifierName': 'comparer'}]},
                                                                                                                                {'IdentifierName': 'Compare'}]},
                                                                                              {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                {'IdentifierName': 'Current'}]}]},
                                                                                                                {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                {'IdentifierName': 'Current'}]}]}]}]},
                                                                    {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'current'},
                                                                      'scope': {'name': {'identifier': 'a'}}},
                                                                     {'name': {'identifier': 'current'},
                                                                      'scope': {'name': {'identifier': 'b'}}}],
                                                       'name': {'identifier': 'compare'},
                                                       'scope': {'name': {'identifier': 'comparator'}}},
                                              'operator': 'LESS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'BoostAttribute'},
                                                                                                                                                                   {'IdentifierName': 'target'}]}]},
                                                                                                                  {'IdentifierName': 'Boost'}]},
                                                                                {'IdentifierName': 'boost'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'boost'}}],
                                              'name': {'identifier': 'setBoost'},
                                              'scope': {'inner': {'expression': {'name': {'identifier': 'target'}},
                                                                  'type': {'name': {'identifier': 'BoostAttribute'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': 'message'}]}]},
                       {'TryStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'message'},
                                                                                                             {'ElementAccessExpression': [{'IdentifierName': 'ZZ_ERROR_MSG'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'errorCode'}]}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                   {'IdentifierName': 'IndexOutOfRangeException'}]}]},
                                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'message'},
                                                                                                                              {'ElementAccessExpression': [{'IdentifierName': 'ZZ_ERROR_MSG'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'ZZ_UNKNOWN_ERROR'}]}]}]}]}]}]}]}]},
                       {'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'message'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'message'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'catchClauses': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                         'target': {'name': {'identifier': 'message'}},
                                                                                         'value': {'index': {'name': {'identifier': 'ZZ_UNKNOWN_ERROR'}},
                                                                                                   'name': {'name': {'identifier': 'ZZ_ERROR_MSG'}}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'ArrayIndexOutOfBoundsException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'message'}},
                                                                           'value': {'index': {'name': {'identifier': 'errorCode'}},
                                                                                     'name': {'name': {'identifier': 'ZZ_ERROR_MSG'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'message'}}],
                                              'type': {'name': {'identifier': 'Error'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNotFinished'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'm_off'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'm_values'},
                                                                                                {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Flush'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'm_values'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'm_off'}]}]}]}]},
                                                                                {'IdentifierName': 'l'}]}]},
                       {'ExpressionStatement': [{'PreIncrementExpression': [{'IdentifierName': 'm_ord'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'checkNotFinished'}}},
                              {'condition': {'left': {'name': {'identifier': 'off'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'values'}}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'flush'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'expression': {'name': {'identifier': 'off'}},
                                                                   'operator': 'POSTFIX_INCREMENT'},
                                                         'name': {'name': {'identifier': 'values'}}},
                                              'value': {'name': {'identifier': 'l'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'ord'}},
                                              'operator': 'PREFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AlcoholicMergePolicy'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Next'}]},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'tz'}},
                                                            {'arguments': [{'name': {'identifier': 'nextLong'},
                                                                            'scope': {'name': {'identifier': 'r'}}}],
                                                             'type': {'name': {'identifier': 'Random'}}}],
                                              'type': {'name': {'identifier': 'AlcoholicMergePolicy'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'LookaheadTokenFilter'},
                                                                                             {'IdentifierName': 'Position'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'type': {'name': {'identifier': 'Position'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'InitIndex'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'newScheduler'}]},
                                                                                                                                                                          {'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                                          {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MockDirectoryWrapper'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MockDirectoryWrapper'},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                                                                    {'IdentifierName': 'Directory'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Crash'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexReader'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DirectoryReader'},
                                                                                                                                                                                          {'IdentifierName': 'Open'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '157'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                            {'IdentifierName': 'NumDocs'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'random'}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                           {'name': {'identifier': 'INSTANCE'},
                                                                                            'scope': {'name': {'identifier': 'NoLockFactory'}}}],
                                                                             'name': {'identifier': 'newMockDirectory'}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'MockDirectoryWrapper'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                           {'name': {'identifier': 'dir'}},
                                                                                           {'value': 'false'},
                                                                                           {'value': 'false'}],
                                                                             'name': {'identifier': 'initIndex'}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'finallyBlock': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                               'scope': {'name': {'identifier': 'writer'}}}}]},
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'commit'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}}]}},
                              {'expression': {'name': {'identifier': 'crash'},
                                              'scope': {'name': {'identifier': 'dir'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}}],
                                                                             'name': {'identifier': 'open'},
                                                                             'scope': {'name': {'identifier': 'DirectoryReader'}}},
                                                             'name': {'identifier': 'reader'},
                                                             'type': {'name': {'identifier': 'IndexReader'}}}]}},
                              {'expression': {'arguments': [{'value': '157'},
                                                            {'name': {'identifier': 'numDocs'},
                                                             'scope': {'name': {'identifier': 'reader'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'PredefinedType': 'string'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'i'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'b'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'i'}}],
                                              'type': {'name': {'identifier': 'String'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'automata'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'automata'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetupToken'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'posIncrAtt'},
                                                                                                                  {'IdentifierName': 'PositionIncrement'}]},
                                                                                {'IdentifierName': 'positionInc'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'typeAtt'},
                                                                                                                  {'IdentifierName': 'Type'}]},
                                                                                {'IdentifierName': 'type'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setupToken'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'positionInc'}}],
                                              'name': {'identifier': 'setPositionIncrement'},
                                              'scope': {'name': {'identifier': 'posIncrAtt'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'type'}}],
                                              'name': {'identifier': 'setType'},
                                              'scope': {'name': {'identifier': 'typeAtt'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'NUM_BYTES_ARRAY_HEADER'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'array'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Type'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'array'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'GetType'}]},
                                                                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                                                                      {'IdentifierName': 'GetElementType'}]},
                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                                   {'IfStatement': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arrayElementClazz'},
                                                                                                                                                                  {'IdentifierName': 'GetTypeInfo'}]},
                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                      {'IdentifierName': 'IsPrimitive'}]},
                                                                    {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'size'},
                                                                                                                                     {'MultiplyExpression': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                                                 {'IdentifierName': 'len'}]},
                                                                                                                                                             {'ElementAccessExpression': [{'IdentifierName': 'primitiveSizes'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'arrayElementClazz'}]}]}]}]}]}]}]},
                                                                    {'ElseClause': [{'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'size'},
                                                                                                                                                     {'MultiplyExpression': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                                                                 {'IdentifierName': 'NUM_BYTES_OBJECT_REF'}]},
                                                                                                                                                                             {'IdentifierName': 'len'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'AlignObjectSize'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'size'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'NUM_BYTES_ARRAY_HEADER'}},
                                                             'name': {'identifier': 'size'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'array'}}],
                                                                             'name': {'identifier': 'getLength'},
                                                                             'scope': {'name': {'identifier': 'Array'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getComponentType'},
                                                                                                          'scope': {'name': {'identifier': 'getClass'},
                                                                                                                    'scope': {'name': {'identifier': 'array'}}}},
                                                                                          'name': {'identifier': 'arrayElementClazz'},
                                                                                          'type': {'name': {'identifier': 'Class'},
                                                                                                   'typeArguments': [{}]}}]}},
                                                           {'condition': {'name': {'identifier': 'isPrimitive'},
                                                                          'scope': {'name': {'identifier': 'arrayElementClazz'}}},
                                                            'elseStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                                                        'target': {'name': {'identifier': 'size'}},
                                                                                                        'value': {'left': {'expression': {'name': {'identifier': 'NUM_BYTES_OBJECT_REF'}},
                                                                                                                           'type': {'type': 'LONG'}},
                                                                                                                  'operator': 'MULTIPLY',
                                                                                                                  'right': {'name': {'identifier': 'len'}}}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                                                        'target': {'name': {'identifier': 'size'}},
                                                                                                        'value': {'left': {'expression': {'name': {'identifier': 'len'}},
                                                                                                                           'type': {'type': 'LONG'}},
                                                                                                                  'operator': 'MULTIPLY',
                                                                                                                  'right': {'arguments': [{'name': {'identifier': 'arrayElementClazz'}}],
                                                                                                                            'name': {'identifier': 'get'},
                                                                                                                            'scope': {'name': {'identifier': 'primitiveSizes'}}}}}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'size'}}],
                                              'name': {'identifier': 'alignObjectSize'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ctx'},
                                                                                                        {'IdentifierName': 'ReadShapeFromWkt'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'str'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'str'}}],
                                              'name': {'identifier': 'readShapeFromWkt'},
                                              'scope': {'name': {'identifier': 'ctx'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'BitwiseAndExpression': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                          {'IdentifierName': 'index'}]},
                                                                      {'IdentifierName': 'pageMask'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'expression': {'name': {'identifier': 'index'}},
                                                       'type': {'type': 'INT'}},
                                              'operator': 'BINARY_AND',
                                              'right': {'name': {'identifier': 'pageMask'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'bytes'}},
                                                                                           {'name': {'identifier': 'UTF_8'},
                                                                                            'scope': {'name': {'identifier': 'StandardCharsets'}}}],
                                                                             'type': {'name': {'identifier': 'String'}}},
                                                             'name': {'identifier': 'value'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'value'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SpanishLightStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'SpanishLightStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pp'},
                                                                                                                           {'IdentifierName': 'position'}]},
                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'pp2'},
                                                                                                                           {'IdentifierName': 'position'}]}]},
                                                                 {'ParenthesizedExpression': [{'LogicalAndExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pp'},
                                                                                                                                                                                {'IdentifierName': 'position'}]},
                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'pp2'},
                                                                                                                                                                                {'IdentifierName': 'position'}]}]},
                                                                                                                        {'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pp'},
                                                                                                                                                                                  {'IdentifierName': 'offset'}]},
                                                                                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'pp2'},
                                                                                                                                                                                  {'IdentifierName': 'offset'}]}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'pp'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'pp2'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'position'},
                                                               'scope': {'name': {'identifier': 'pp'}}},
                                                      'operator': 'LESS',
                                                      'right': {'name': {'identifier': 'position'},
                                                                'scope': {'name': {'identifier': 'pp2'}}}},
                                             'operator': 'OR',
                                             'right': {'inner': {'left': {'left': {'name': {'identifier': 'position'},
                                                                                   'scope': {'name': {'identifier': 'pp'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'position'},
                                                                                    'scope': {'name': {'identifier': 'pp2'}}}},
                                                                 'operator': 'AND',
                                                                 'right': {'left': {'name': {'identifier': 'offset'},
                                                                                    'scope': {'name': {'identifier': 'pp'}}},
                                                                           'operator': 'LESS',
                                                                           'right': {'name': {'identifier': 'offset'},
                                                                                     'scope': {'name': {'identifier': 'pp2'}}}}}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'pp'}}}]}},
                              {'expression': {'name': {'identifier': 'pp2'}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'children'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'IsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'children'},
                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                       {'IdentifierName': 'DeletedQueryNode'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'children'},
                                                                                                                                                                     {'IdentifierName': 'RemoveAt'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'PostDecrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'children'}}},
                                                                      'type': {'name': {'identifier': 'DeletedQueryNode'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                   'operator': 'POSTFIX_DECREMENT'}],
                                                                                                    'name': {'identifier': 'remove'},
                                                                                                    'scope': {'name': {'identifier': 'children'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'children'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                  {'IdentifierName': 'Int32s'}]},
                                                                                {'IdentifierName': 'targetMap'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                  {'IdentifierName': 'Offset'}]},
                                                                                {'ElementAccessExpression': [{'IdentifierName': 'targetMapOffsets'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'sourceId'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'SubtractExpression': [{'ElementAccessExpression': [{'IdentifierName': 'targetMapOffsets'},
                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'sourceId'},
                                                                                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                          {'IdentifierName': 'Offset'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ints'},
                                                         'scope': {'name': {'identifier': 'ref'}}},
                                              'value': {'name': {'identifier': 'targetMap'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'offset'},
                                                         'scope': {'name': {'identifier': 'ref'}}},
                                              'value': {'index': {'name': {'identifier': 'sourceId'}},
                                                        'name': {'name': {'identifier': 'targetMapOffsets'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'length'},
                                                         'scope': {'name': {'identifier': 'ref'}}},
                                              'value': {'left': {'index': {'left': {'name': {'identifier': 'sourceId'}},
                                                                           'operator': 'PLUS',
                                                                           'right': {'value': '1'}},
                                                                 'name': {'name': {'identifier': 'targetMapOffsets'}}},
                                                        'operator': 'MINUS',
                                                        'right': {'name': {'identifier': 'offset'},
                                                                  'scope': {'name': {'identifier': 'ref'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'NoTokenFoundQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'NoTokenFoundQueryNode'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                                              {'IdentifierName': 'CloneTree'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'cloneTree'},
                                                                                            'scope': {}},
                                                                             'type': {'name': {'identifier': 'NoTokenFoundQueryNode'}}},
                                                             'name': {'identifier': 'clone'},
                                                             'type': {'name': {'identifier': 'NoTokenFoundQueryNode'}}}]}},
                              {'expression': {'name': {'identifier': 'clone'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'text'},
                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                 {'LessThanOrEqualExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                                {'NumericLiteralExpression': '0'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                                                           {'IdentifierName': 'Length'}]},
                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]},
                                         {'GreaterThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                           {'NumericLiteralExpression': '0'}]},
                                         {'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'ParenthesizedExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                           {'CharacterLiteralExpression': "'*'"}]},
                                                                                                                                                     {'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                           {'CharacterLiteralExpression': "'?'"}]}]}]},
                                                                                               {'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'UnescapedCharSequence'},
                                                                                                                                                                                     {'IdentifierName': 'WasEscaped'}]},
                                                                                                                                                   {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StringCharSequenceWrapper'},
                                                                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]}]}]}]},
                                                                                                                                                                     {'Argument': [{'IdentifierName': 'i'}]}]}]}]}]},
                                                                     {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'text'}},
                                                      'operator': 'EQUALS',
                                                      'right': {}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'length'},
                                                                'scope': {'name': {'identifier': 'text'}}},
                                                       'operator': 'LESS_EQUALS',
                                                       'right': {'value': '0'}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'body': {'statements': [{'condition': {'left': {'inner': {'left': {'left': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                           'name': {'identifier': 'charAt'},
                                                                                                           'scope': {'name': {'identifier': 'text'}}},
                                                                                                  'operator': 'EQUALS',
                                                                                                  'right': {'value': '*'}},
                                                                                         'operator': 'OR',
                                                                                         'right': {'left': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                            'name': {'identifier': 'charAt'},
                                                                                                            'scope': {'name': {'identifier': 'text'}}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'value': '?'}}}},
                                                                      'operator': 'AND',
                                                                      'right': {'expression': {'arguments': [{'name': {'identifier': 'text'}},
                                                                                                             {'name': {'identifier': 'i'}}],
                                                                                               'name': {'identifier': 'wasEscaped'},
                                                                                               'scope': {'name': {'identifier': 'UnescapedCharSequence'}}},
                                                                                'operator': 'LOGICAL_COMPLEMENT'}},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'GREATER_EQUALS',
                                           'right': {'value': '0'}},
                               'initialization': [{'variables': [{'initializer': {'left': {'name': {'identifier': 'length'},
                                                                                           'scope': {'name': {'identifier': 'text'}}},
                                                                                  'operator': 'MINUS',
                                                                                  'right': {'value': '1'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_DECREMENT'}]},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'indexReader'},
                                                                                                        {'IdentifierName': 'RamBytesUsed'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ramBytesUsed'},
                                              'scope': {'name': {'identifier': 'indexReader'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'buffer'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'count'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ords'},
                                                                                                                                                           {'IdentifierName': 'MoveNext'}]},
                                                                                                                         {'ArgumentList': '()'}]}]},
                                                                     {'BreakStatement': 'break;'}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ords'},
                                                                                                                                                                                                                               {'IdentifierName': 'Current'}]},
                                                                                                                                                                                             {'IdentifierName': 'Value'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                                                         {'IdentifierName': 'WriteVInt64'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'ord'},
                                                                                                                                                               {'IdentifierName': 'lastOrd'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastOrd'},
                                                                                                             {'IdentifierName': 'ord'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'buffer'}}],
                                              'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'out'}}}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'lastOrd'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'longValue'},
                                                                                                      'scope': {'name': {'identifier': 'next'},
                                                                                                                'scope': {'name': {'identifier': 'ords'}}}},
                                                                                      'name': {'identifier': 'ord'},
                                                                                      'type': {'type': 'LONG'}}]}},
                                                       {'expression': {'arguments': [{'left': {'name': {'identifier': 'ord'}},
                                                                                      'operator': 'MINUS',
                                                                                      'right': {'name': {'identifier': 'lastOrd'}}}],
                                                                       'name': {'identifier': 'writeVLong'},
                                                                       'scope': {'name': {'identifier': 'out'}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'lastOrd'}},
                                                                       'value': {'name': {'identifier': 'ord'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'count'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'IQueryNodeProcessor'},
                                             {'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                               {'IdentifierName': 'processors'}]},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'queryTree'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'processor'},
                                                                                                                                                                             {'IdentifierName': 'Process'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'queryTree'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'queryTree'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'queryTree'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'queryTree'}}],
                                                                                 'name': {'identifier': 'process'},
                                                                                 'scope': {'name': {'identifier': 'processor'}}}}}]},
                               'iterable': {'name': {'identifier': 'processors'},
                                            'scope': {}},
                               'variable': {'variables': [{'name': {'identifier': 'processor'},
                                                           'type': {'name': {'identifier': 'QueryNodeProcessor'}}}]}},
                              {'expression': {'name': {'identifier': 'queryTree'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pending'},
                                                                                                                                                                                                             {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                           {'ArgumentList': '()'}]},
                                                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pendingCounts'},
                                                                                                                                                                                                             {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                           {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iwBytesUsed'},
                                                                                                            {'IdentifierName': 'AddAndGet'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'newBytesUsed'},
                                                                                                                                  {'IdentifierName': 'bytesUsed'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'bytesUsed'},
                                                                                {'IdentifierName': 'newBytesUsed'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'ramBytesUsed'},
                                                                                      'scope': {'name': {'identifier': 'pending'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'ramBytesUsed'},
                                                                                       'scope': {'name': {'identifier': 'pendingCounts'}}}},
                                                             'name': {'identifier': 'newBytesUsed'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'newBytesUsed'}},
                                                             'operator': 'MINUS',
                                                             'right': {'name': {'identifier': 'bytesUsed'}}}],
                                              'name': {'identifier': 'addAndGet'},
                                              'scope': {'name': {'identifier': 'iwBytesUsed'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bytesUsed'}},
                                              'value': {'name': {'identifier': 'newBytesUsed'}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                                                                                                                     {'IdentifierName': 'OpenInput'}]},
                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                                                                     {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOContext'},
                                                                                                                                                                                                                                     {'IdentifierName': 'DEFAULT'}]}]}]}]},
                                                                                                                                         {'IdentifierName': 'Dispose'}]},
                                                                                                       {'ArgumentList': '()'}]}]},
                                                    {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'FileNotFoundException'}]},
                                                          {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                      {'IdentifierName': 'IO'}]},
                                                                                                   {'IdentifierName': 'DirectoryNotFoundException'}]}]},
                                                          {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'value': 'false'}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'elements': [{'name': {'identifier': 'NoSuchFileException'}},
                                                                                     {'name': {'identifier': 'FileNotFoundException'}}]}}}],
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                           'scope': {'arguments': [{'name': {'identifier': 'fileName'}},
                                                                                                   {'name': {'identifier': 'DEFAULT'},
                                                                                                    'scope': {'name': {'identifier': 'IOContext'}}}],
                                                                                     'name': {'identifier': 'openInput'},
                                                                                     'scope': {'name': {'identifier': 'dir'}}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'e'}]},
                                                                                            {'Argument': [{'IdentifierName': 'a'}]},
                                                                                            {'Argument': [{'IdentifierName': 'm'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'm'}},
                                                            {'name': {'identifier': 'e'}},
                                                            {'name': {'identifier': 'a'}}],
                                              'name': {'identifier': 'assertEquals'},
                                              'scope': {'name': {'identifier': 'Assert'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'scorer'}]},
                                                                                {'IdentifierName': 'scorer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'scorer'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'scorer'}}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'context'},
                                                                                                      {'IdentifierName': 'Parent'}]},
                                                                    {'NullLiteralExpression': 'null'}]},
                                           {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'context'},
                                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'context'},
                                                                                                                                                 {'IdentifierName': 'Parent'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'context'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'context'}},
                                                                       'value': {'name': {'identifier': 'parent'},
                                                                                 'scope': {'name': {'identifier': 'context'}}}}}]},
                               'condition': {'left': {'name': {'identifier': 'parent'},
                                                      'scope': {'name': {'identifier': 'context'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}}},
                              {'expression': {'name': {'identifier': 'context'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'InflectionAttribute'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'InflectionAttribute'},
                                                                                                                                                  {'IdentifierName': 'target'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'SetToken'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'token'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'target'}},
                                                                             'type': {'name': {'identifier': 'InflectionAttribute'}}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'InflectionAttribute'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'token'}}],
                                              'name': {'identifier': 'setToken'},
                                              'scope': {'name': {'identifier': 't'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'set'},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'NO_MORE_ORDS'}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'set'},
                                                                                                                            {'TrueLiteralExpression': 'true'}]}]},
                                                                   {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                    {'IdentifierName': 'GetOrd'}]},
                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'docID'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'ord'}},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ord'}},
                                              'value': {'name': {'identifier': 'NO_MORE_ORDS'}}}},
                              {'expression': {'name': {'identifier': 'v'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'replicator'},
                                                                                                            {'IdentifierName': 'Publish'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CreateRevision'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IRevision'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CreateRevision'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'replicator'},
                                                                                                            {'IdentifierName': 'Publish'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'rev'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SessionToken'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'replicator'},
                                                                                                                                                                                          {'IdentifierName': 'CheckForUpdate'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertNotNull'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'res'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rev'},
                                                                                                                                                                      {'IdentifierName': 'CompareTo'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'res'},
                                                                                                                                                                                                      {'IdentifierName': 'Version'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'value': '1'}],
                                                             'name': {'identifier': 'createRevision'}}],
                                              'name': {'identifier': 'publish'},
                                              'scope': {'name': {'identifier': 'replicator'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'value': '2'}],
                                                                             'name': {'identifier': 'createRevision'}},
                                                             'name': {'identifier': 'rev'},
                                                             'type': {'name': {'identifier': 'Revision'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'rev'}}],
                                              'name': {'identifier': 'publish'},
                                              'scope': {'name': {'identifier': 'replicator'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                             'name': {'identifier': 'checkForUpdate'},
                                                                             'scope': {'name': {'identifier': 'replicator'}}},
                                                             'name': {'identifier': 'res'},
                                                             'type': {'name': {'identifier': 'SessionToken'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'res'}}],
                                              'name': {'identifier': 'assertNotNull'}}},
                              {'expression': {'arguments': [{'value': '0'},
                                                            {'arguments': [{'name': {'identifier': 'version'},
                                                                            'scope': {'name': {'identifier': 'res'}}}],
                                                             'name': {'identifier': 'compareTo'},
                                                             'scope': {'name': {'identifier': 'rev'}}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'delegator'},
                                                                                                        {'IdentifierName': 'Create'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'name': {'identifier': 'fst'},
                                                                     'scope': {'name': {'identifier': 'map'}}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'arguments': [{'name': {'identifier': 'input'}},
                                                                         {'name': {'identifier': 'map'}},
                                                                         {'name': {'identifier': 'ignoreCase'}}],
                                                           'type': {'name': {'identifier': 'SynonymFilter'}}},
                                              'thenExpr': {'name': {'identifier': 'input'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                          {'IdentifierName': 'Assert'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Info'},
                                                                                                                                                                                                                                       {'IdentifierName': 'Info'}]},
                                                                                                                                                                                                     {'IdentifierName': 'DocCount'}]},
                                                                                                                                                                   {'NumericLiteralExpression': '0'}]}]}]}]}]},
                                                     {'IfStatement': [{'IdentifierName': 'liveDocsShared'},
                                                                      {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LiveDocsFormat'},
                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Info'},
                                                                                                                                                                                                                                                                                              {'IdentifierName': 'Info'}]},
                                                                                                                                                                                                                                                            {'IdentifierName': 'Codec'}]},
                                                                                                                                                                                                                          {'IdentifierName': 'LiveDocsFormat'}]}]}]}]}]},
                                                                                 {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'liveDocs'},
                                                                                                                        {'NullLiteralExpression': 'null'}]},
                                                                                                  {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'liveDocs'},
                                                                                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'liveDocsFormat'},
                                                                                                                                                                                                                                  {'IdentifierName': 'NewLiveDocs'}]},
                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Info'},
                                                                                                                                                                                                                                                                                                    {'IdentifierName': 'Info'}]},
                                                                                                                                                                                                                                                                  {'IdentifierName': 'DocCount'}]}]}]}]}]}]}]},
                                                                                                  {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'liveDocs'},
                                                                                                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'liveDocsFormat'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'NewLiveDocs'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'liveDocs'}]}]}]}]}]}]}]}]},
                                                                                 {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'liveDocsShared'},
                                                                                                                                          {'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'maxDoc'},
                                                  'scope': {'name': {'identifier': 'info'},
                                                            'scope': {'name': {'identifier': 'info'}}}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}}},
                              {'condition': {'name': {'identifier': 'liveDocsShared'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'liveDocsFormat'},
                                                                                                          'scope': {'name': {'identifier': 'getCodec'},
                                                                                                                    'scope': {'name': {'identifier': 'info'},
                                                                                                                              'scope': {'name': {'identifier': 'info'}}}}},
                                                                                          'name': {'identifier': 'liveDocsFormat'},
                                                                                          'type': {'name': {'identifier': 'LiveDocsFormat'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'liveDocs'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {}},
                                                            'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'liveDocs'}},
                                                                                                        'value': {'arguments': [{'name': {'identifier': 'liveDocs'}}],
                                                                                                                  'name': {'identifier': 'newLiveDocs'},
                                                                                                                  'scope': {'name': {'identifier': 'liveDocsFormat'}}}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'liveDocs'}},
                                                                                                        'value': {'arguments': [{'name': {'identifier': 'maxDoc'},
                                                                                                                                 'scope': {'name': {'identifier': 'info'},
                                                                                                                                           'scope': {'name': {'identifier': 'info'}}}}],
                                                                                                                  'name': {'identifier': 'newLiveDocs'},
                                                                                                                  'scope': {'name': {'identifier': 'liveDocsFormat'}}}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'liveDocsShared'}},
                                                                           'value': {'value': 'false'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TaskSequence'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'TaskSequence'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                                              {'IdentifierName': 'Clone'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'res'},
                                                                                                                  {'IdentifierName': 'tasks'}]},
                                                                                {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'PerfTask'}]}]},
                                                                                                              {'ArgumentList': '()'}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'tasks'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'res'},
                                                                                                                                                                           {'IdentifierName': 'tasks'}]},
                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'PerfTask'},
                                                                                                                                                           {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tasks'},
                                                                                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                                       {'IdentifierName': 'Clone'}]},
                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'res'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'clone'},
                                                                                            'scope': {}},
                                                                             'type': {'name': {'identifier': 'TaskSequence'}}},
                                                             'name': {'identifier': 'res'},
                                                             'type': {'name': {'identifier': 'TaskSequence'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'tasks'},
                                                         'scope': {'name': {'identifier': 'res'}}},
                                              'value': {'type': {'name': {'identifier': 'ArrayList'}}}}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'clone'},
                                                                                      'scope': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                'name': {'identifier': 'get'},
                                                                                                'scope': {'name': {'identifier': 'tasks'}}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'tasks'},
                                                                                 'scope': {'name': {'identifier': 'res'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'tasks'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'res'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'startTimeMillis'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Support'},
                                                                                                                                                                              {'IdentifierName': 'Time'}]},
                                                                                                                                            {'IdentifierName': 'CurrentTimeMilliseconds'}]},
                                                                                                          {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'startTimeMillis'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'startTimeMillis'}},
                                              'value': {'name': {'identifier': 'currentTimeMillis'},
                                                        'scope': {'name': {'identifier': 'System'}}}}},
                              {'expression': {'name': {'identifier': 'startTimeMillis'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'upto'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'lastPos'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'upto'},
                                                         'scope': {}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastPos'},
                                                         'scope': {}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Weight'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'searcher'},
                                                                                                                                                                                          {'IdentifierName': 'CreateNormalizedWeight'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'q'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'context'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]},
                                                                                {'IdentifierName': 'w'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'q'}},
                                                                                           {'name': {'identifier': 'COMPLETE'},
                                                                                            'scope': {'name': {'identifier': 'ScoreMode'}}}],
                                                                             'name': {'identifier': 'createNormalizedWeight'},
                                                                             'scope': {'name': {'identifier': 'searcher'}}},
                                                             'name': {'identifier': 'w'},
                                                             'type': {'name': {'identifier': 'Weight'}}}]}},
                              {'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'w'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'context'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAtt'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'basicFormAtt'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'GetBaseForm'}]},
                                                                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]},
                                                                               {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'baseForm'},
                                                                                                                         {'NullLiteralExpression': 'null'}]},
                                                                                                {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                            {'IdentifierName': 'SetEmpty'}]},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                                                                                                                {'IdentifierName': 'Append'}]},
                                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'baseForm'}]}]}]}]}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAtt'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getBaseForm'},
                                                                                                                                       'scope': {'name': {'identifier': 'basicFormAtt'}}},
                                                                                                                       'name': {'identifier': 'baseForm'},
                                                                                                                       'type': {'name': {'identifier': 'String'}}}]}},
                                                                                        {'condition': {'left': {'name': {'identifier': 'baseForm'}},
                                                                                                       'operator': 'NOT_EQUALS',
                                                                                                       'right': {}},
                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'baseForm'}}],
                                                                                                                                     'name': {'identifier': 'append'},
                                                                                                                                     'scope': {'name': {'identifier': 'setEmpty'},
                                                                                                                                               'scope': {'name': {'identifier': 'termAtt'}}}}}]}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'PostDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'position'},
                                                                                                            {'SubtractExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'postings'},
                                                                                                                                                                                                {'IdentifierName': 'NextPosition'}]},
                                                                                                                                                              {'ArgumentList': '()'}]},
                                                                                                                                    {'IdentifierName': 'offset'}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                      'operator': 'POSTFIX_DECREMENT'},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'elseStmt': {'expression': {'value': 'false'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'position'}},
                                                                           'value': {'left': {'name': {'identifier': 'nextPosition'},
                                                                                              'scope': {'name': {'identifier': 'postings'}}},
                                                                                     'operator': 'MINUS',
                                                                                     'right': {'name': {'identifier': 'offset'}}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                              {'IdentifierName': 'IndexReader'}]},
                                                                                                            {'IdentifierName': 'DecRef'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'decRef'},
                                              'scope': {'name': {'identifier': 'getIndexReader'},
                                                        'scope': {'name': {'identifier': 's'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'GreaterThanOrEqualExpression': [{'InvocationExpression': [{'IdentifierName': 'OrdVal'},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                              {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                       'name': {'identifier': 'getOrdForDoc'}},
                                              'operator': 'GREATER_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'boost'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'termState'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'Clear'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'boost'}},
                                              'value': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'termState'}},
                                              'value': {}}},
                              {'expression': {'name': {'identifier': 'clear'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'var'},
                                             {'IdentifierName': 'queries'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bq'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'occur'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                      'name': {'identifier': 'get'},
                                                                                      'scope': {'name': {'identifier': 'queries'}}},
                                                                                     {'name': {'identifier': 'occur'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'bq'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'queries'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'ScoreDoc'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'DoSearch'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '15'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '15'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tdc'},
                                                                                                                                                                                                                                          {'IdentifierName': 'GetTopDocs'}]},
                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                                                                                              {'IdentifierName': 'ScoreDocs'}]},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'tdc'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'DoSearch'},
                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '15'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '5'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tdc'},
                                                                                                                                                                                                                                          {'IdentifierName': 'GetTopDocs'}]},
                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '10'}]}]}]},
                                                                                                                                                                              {'IdentifierName': 'ScoreDocs'}]},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '15'}],
                                                                             'name': {'identifier': 'doSearch'}},
                                                             'name': {'identifier': 'tdc'},
                                                             'type': {'name': {'identifier': 'TopDocsCollector'},
                                                                      'typeArguments': [{'name': {'identifier': 'ScoreDoc'}}]}}]}},
                              {'expression': {'arguments': [{'value': '15'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'scoreDocs'},
                                                                       'scope': {'arguments': [{'value': '0'}],
                                                                                 'name': {'identifier': 'topDocs'},
                                                                                 'scope': {'name': {'identifier': 'tdc'}}}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'tdc'}},
                                              'value': {'arguments': [{'value': '15'}],
                                                        'name': {'identifier': 'doSearch'}}}},
                              {'expression': {'arguments': [{'value': '5'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'scoreDocs'},
                                                                       'scope': {'arguments': [{'value': '10'}],
                                                                                 'name': {'identifier': 'topDocs'},
                                                                                 'scope': {'name': {'identifier': 'tdc'}}}}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldIndexData'},
                                                                               {'VariableDeclarator': 'fieldData'}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'LogicalOrExpression': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                                                                {'IdentifierName': 'TryGetValue'}]},
                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldInfo'}]},
                                                                                                                                                                {'Argument': [{'IdentifierName': 'fieldData'}]}]}]}]},
                                                                                          {'EqualsExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                {'NullLiteralExpression': 'null'}]}]},
                                                                 {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                         {'IdentifierName': 'fst'}]},
                                                                                       {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexEnum'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                                                                                        {'IdentifierName': 'fst'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'},
                                                                                            'scope': {'name': {'identifier': 'fieldInfo'}}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'fields'}}},
                                                             'name': {'identifier': 'fieldData'},
                                                             'type': {'name': {'identifier': 'FieldIndexData'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'fst'},
                                                      'scope': {'name': {'identifier': 'fieldData'}}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'fst'},
                                                                                          'scope': {'name': {'identifier': 'fieldData'}}}],
                                                                           'type': {'name': {'identifier': 'IndexEnum'}}}}]},
                               'thenStmt': {'statements': [{'expression': {}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Cache'},
                                                                                                                                                                                          {'IdentifierName': 'Get'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'subclazz'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'distance'},
                                                              {'DefaultExpression': [{'PredefinedType': 'int'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Cache'},
                                                                                                                                        {'IdentifierName': 'Put'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'subclazz'}]},
                                                                                                                        {'Argument': [{'SimpleAssignmentExpression': [{'IdentifierName': 'distance'},
                                                                                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Convert'},
                                                                                                                                                                                                                                  {'IdentifierName': 'ToInt32'}]},
                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'ReflectImplementationDistance'},
                                                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'subclazz'}]}]}]}]},
                                                                                                                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CultureInfo'},
                                                                                                                                                                                                                                                                  {'IdentifierName': 'InvariantCulture'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                {'IdentifierName': 'distance'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'intValue'},
                                              'scope': {'arguments': [{'name': {'identifier': 'subclazz'}}],
                                                        'name': {'identifier': 'get'},
                                                        'scope': {'name': {'identifier': 'distanceOfClass'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docTerms'},
                                                                                                            {'IdentifierName': 'Get'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tempBR'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetMissingBytes'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tempBR'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'CompareValues'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'topValue'}]},
                                                                                        {'Argument': [{'IdentifierName': 'tempBR'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'topValue'}},
                                                            {'arguments': [{'name': {'identifier': 'doc'}}],
                                                             'name': {'identifier': 'getValueForDoc'}}],
                                              'name': {'identifier': 'compareValues'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Write'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'TERMTEXT'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Write'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'NewLine'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Write'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'TERMFREQ'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Write'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Convert'},
                                                                                                                                                                      {'IdentifierName': 'ToString'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'freq'}]},
                                                                                                                                                      {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CultureInfo'},
                                                                                                                                                                                                      {'IdentifierName': 'InvariantCulture'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'NewLine'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'TERMTEXT'}}],
                                              'name': {'identifier': 'write'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'term'}}],
                                              'name': {'identifier': 'write'}}},
                              {'expression': {'name': {'identifier': 'newLine'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'TERMFREQ'}}],
                                              'name': {'identifier': 'write'}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'freq'}}],
                                                             'name': {'identifier': 'toString'},
                                                             'scope': {'name': {'identifier': 'Integer'}}}],
                                              'name': {'identifier': 'write'}}},
                              {'expression': {'name': {'identifier': 'newLine'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Int64sRef'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'longs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'Offset'}]},
                                                                                            {'Argument': [{'IdentifierName': 'Length'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'longs'}},
                                                            {'name': {'identifier': 'offset'}},
                                                            {'name': {'identifier': 'length'}}],
                                              'type': {'name': {'identifier': 'LongsRef'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'IdentifierName': 'testTokenWithHoles'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TOKENS_WITH_HOLES'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_POSITION_INCREMENTS_WITH_HOLES'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TYPES_WITH_HOLES'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '2'},
                                                            {'name': {'identifier': 'testTokenWithHoles'}},
                                                            {'name': {'identifier': 'BI_GRAM_TOKENS_WITH_HOLES'}},
                                                            {'name': {'identifier': 'BI_GRAM_POSITION_INCREMENTS_WITH_HOLES'}},
                                                            {'name': {'identifier': 'BI_GRAM_TYPES_WITH_HOLES'}},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'articlesFile'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'articles'},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'FrenchAnalyzer'},
                                                                                                                                              {'IdentifierName': 'DEFAULT_ARTICLES'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'articles'},
                                                                                                                            {'InvocationExpression': [{'IdentifierName': 'GetWordSet'},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'loader'}]},
                                                                                                                                                                        {'Argument': [{'IdentifierName': 'articlesFile'}]},
                                                                                                                                                                        {'Argument': [{'IdentifierName': 'ignoreCase'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'articlesFile'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'articles'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'loader'}},
                                                                                                   {'name': {'identifier': 'articlesFile'}},
                                                                                                   {'name': {'identifier': 'ignoreCase'}}],
                                                                                     'name': {'identifier': 'getWordSet'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'articles'}},
                                                                           'value': {'name': {'identifier': 'DEFAULT_ARTICLES'},
                                                                                     'scope': {'name': {'identifier': 'FrenchAnalyzer'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'DocID'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'NO_MORE_DOCS'}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'expression': {'value': '1'},
                                                      'operator': 'MINUS'}},
                                           {'label': {'name': {'identifier': 'NO_MORE_DOCS'},
                                                      'scope': {'name': {'identifier': 'DocIdSetIterator'}}},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'statements': [{'expression': {'left': {'name': {'identifier': 'state'}},
                                                                           'operator': 'NOT_EQUALS',
                                                                           'right': {'name': {'identifier': 'APPROXIMATING'},
                                                                                     'scope': {'name': {'identifier': 'IteratorState'}}}}}]}],
                               'selector': {'name': {'identifier': 'docID'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LogicalOrExpression': [{'LogicalOrExpression': [{'NotEqualsExpression': [{'IdentifierName': 'changeCount'},
                                                                                                                       {'IdentifierName': 'lastCommitChangeCount'}]},
                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docWriter'},
                                                                                                                                                          {'IdentifierName': 'AnyChanges'}]},
                                                                                                                        {'ArgumentList': '()'}]}]},
                                                                     {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bufferedUpdatesStream'},
                                                                                                                                 {'IdentifierName': 'Any'}]},
                                                                                               {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'left': {'name': {'identifier': 'get'},
                                                                         'scope': {'name': {'identifier': 'changeCount'}}},
                                                                'operator': 'NOT_EQUALS',
                                                                'right': {'name': {'identifier': 'lastCommitChangeCount'}}},
                                                       'operator': 'OR',
                                                       'right': {'name': {'identifier': 'anyChanges'},
                                                                 'scope': {'name': {'identifier': 'docWriter'}}}},
                                              'operator': 'OR',
                                              'right': {'name': {'identifier': 'any'},
                                                        'scope': {'name': {'identifier': 'bufferedUpdatesStream'}}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'maxDims'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'config'},
                                                                                                                                         {'IdentifierName': 'SetHierarchical'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                                   {'IdentifierName': 'ToString'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CultureInfo'},
                                                                                                                                                                                                                                   {'IdentifierName': 'InvariantCulture'}]}]}]}]}]},
                                                                                                                         {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'config'},
                                                                                                                                         {'IdentifierName': 'SetMultiValued'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                                   {'IdentifierName': 'ToString'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CultureInfo'},
                                                                                                                                                                                                                                   {'IdentifierName': 'InvariantCulture'}]}]}]}]}]},
                                                                                                                         {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                      'name': {'identifier': 'toString'},
                                                                                      'scope': {'name': {'identifier': 'Integer'}}},
                                                                                     {'value': 'true'}],
                                                                       'name': {'identifier': 'setHierarchical'},
                                                                       'scope': {'name': {'identifier': 'config'}}}},
                                                       {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                      'name': {'identifier': 'toString'},
                                                                                      'scope': {'name': {'identifier': 'Integer'}}},
                                                                                     {'value': 'true'}],
                                                                       'name': {'identifier': 'setMultiValued'},
                                                                       'scope': {'name': {'identifier': 'config'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'maxDims'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'liveTerms'},
                                                                                                                                   {'IdentifierName': 'Get'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'Ord'}]}]}]},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'AcceptStatus'},
                                                                                                         {'IdentifierName': 'YES'}]},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'AcceptStatus'},
                                                                                                         {'IdentifierName': 'NO'}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'ord'}}],
                                             'name': {'identifier': 'get'},
                                             'scope': {'name': {'identifier': 'liveTerms'}}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'NO'},
                                                                           'scope': {'name': {'identifier': 'AcceptStatus'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'YES'},
                                                                           'scope': {'name': {'identifier': 'AcceptStatus'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PostingsWriterBase'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Lucene41PostingsWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'TryStatement': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldsConsumer'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FSTOrdTermsWriter'},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]},
                                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'postingsWriter'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'success'},
                                                                                                             {'TrueLiteralExpression': 'true'}]}]},
                                                    {'ReturnStatement': [{'IdentifierName': 'ret'}]}]},
                                         {'FinallyClause': [{'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'success'}]},
                                                                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                                                        {'IdentifierName': 'DisposeWhileHandlingException'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'postingsWriter'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'state'}}],
                                                                             'type': {'name': {'identifier': 'Lucene50PostingsWriter'}}},
                                                             'name': {'identifier': 'postingsWriter'},
                                                             'type': {'name': {'identifier': 'PostingsWriterBase'}}}]}},
                              {'expression': {'variables': [{'initializer': {'value': 'false'},
                                                             'name': {'identifier': 'success'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'finallyBlock': {'statements': [{'condition': {'expression': {'name': {'identifier': 'success'}},
                                                                              'operator': 'LOGICAL_COMPLEMENT'},
                                                                'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'postingsWriter'}}],
                                                                                                            'name': {'identifier': 'closeWhileHandlingException'},
                                                                                                            'scope': {'name': {'identifier': 'IOUtils'}}}}]}}]},
                               'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'state'}},
                                                                                                                        {'name': {'identifier': 'postingsWriter'}}],
                                                                                                          'type': {'name': {'identifier': 'FSTOrdTermsWriter'}}},
                                                                                          'name': {'identifier': 'ret'},
                                                                                          'type': {'name': {'identifier': 'FieldsConsumer'}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'success'}},
                                                                           'value': {'value': 'true'}}},
                                                           {'expression': {'name': {'identifier': 'ret'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_normalization'},
                                                                                                                                                                                          {'IdentifierName': 'Tfn'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'stats'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'freq'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'docLen'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'MultiplyExpression': [{'MultiplyExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                              {'IdentifierName': 'TotalBoost'}]},
                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_basicModel'},
                                                                                                                                                        {'IdentifierName': 'Score'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'stats'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'tfn'}]}]}]}]},
                                                                    {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_afterEffect'},
                                                                                                                                {'IdentifierName': 'Score'}]},
                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'stats'}]},
                                                                                                                {'Argument': [{'IdentifierName': 'tfn'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'stats'}},
                                                                                           {'name': {'identifier': 'freq'}},
                                                                                           {'name': {'identifier': 'docLen'}}],
                                                                             'name': {'identifier': 'tfn'},
                                                                             'scope': {'name': {'identifier': 'normalization'}}},
                                                             'name': {'identifier': 'tfn'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'stats'}}],
                                                                             'name': {'identifier': 'scoreTimes1pTfn'},
                                                                             'scope': {'name': {'identifier': 'afterEffect'}}},
                                                             'name': {'identifier': 'aeTimes1pTfn'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'left': {'name': {'identifier': 'getBoost'},
                                                       'scope': {'name': {'identifier': 'stats'}}},
                                              'operator': 'MULTIPLY',
                                              'right': {'arguments': [{'name': {'identifier': 'stats'}},
                                                                      {'name': {'identifier': 'tfn'}},
                                                                      {'name': {'identifier': 'aeTimes1pTfn'}}],
                                                        'name': {'identifier': 'score'},
                                                        'scope': {'name': {'identifier': 'basicModel'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                              {'IdentifierName': 'constant'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'constant'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'results'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'EMPTY_TOPDOCS'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'float'},
                                                                                                                                                                {'IdentifierName': 'NaN'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'start'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'maxScore'},
                                                                                                            {'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'results'},
                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                                                              {'IdentifierName': 'Score'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_pq'},
                                                                                                                                                                                               {'IdentifierName': 'Count'}]}]}]}]},
                                                                                     {'GreaterThanExpression': [{'IdentifierName': 'i'},
                                                                                                                {'NumericLiteralExpression': '1'}]},
                                                                                     {'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_pq'},
                                                                                                                                                                                     {'IdentifierName': 'Pop'}]},
                                                                                                                                                   {'ArgumentList': '()'}]}]}]}]},
                                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'maxScore'},
                                                                                                                            {'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_pq'},
                                                                                                                                                                                                                          {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                        {'ArgumentList': '()'}]},
                                                                                                                                                              {'IdentifierName': 'Score'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TopDocs'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_totalHits'}]},
                                                                                            {'Argument': [{'IdentifierName': 'results'}]},
                                                                                            {'Argument': [{'IdentifierName': 'maxScore'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'results'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'EMPTY_TOPDOCS'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'NaN'},
                                                                             'scope': {'name': {'identifier': 'Float'}}},
                                                             'name': {'identifier': 'maxScore'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'start'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'body': {'statements': [{'expression': {'name': {'identifier': 'pop'},
                                                                                                    'scope': {'name': {'identifier': 'pq'}}}}]},
                                                            'compare': {'left': {'name': {'identifier': 'i'}},
                                                                        'operator': 'GREATER',
                                                                        'right': {'value': '1'}},
                                                            'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'size'},
                                                                                                               'scope': {'name': {'identifier': 'pq'}}},
                                                                                               'name': {'identifier': 'i'},
                                                                                               'type': {'type': 'INT'}}]}],
                                                            'update': [{'expression': {'name': {'identifier': 'i'}},
                                                                        'operator': 'POSTFIX_DECREMENT'}]},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'maxScore'}},
                                                                           'value': {'name': {'identifier': 'score'},
                                                                                     'scope': {'name': {'identifier': 'pop'},
                                                                                               'scope': {'name': {'identifier': 'pq'}}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'maxScore'}},
                                                                           'value': {'name': {'identifier': 'score'},
                                                                                     'scope': {'index': {'value': '0'},
                                                                                               'name': {'name': {'identifier': 'results'}}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'totalHits'}},
                                                            {'name': {'identifier': 'results'}},
                                                            {'name': {'identifier': 'maxScore'}}],
                                              'type': {'name': {'identifier': 'TopDocs'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'didRefresh'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'afterRefreshCalled'},
                                                                                                                                        {'IdentifierName': 'Set'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'didRefresh'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'true'}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'afterRefreshCalled'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ForEachStatement': [{'PredefinedType': 'string'},
                                                                           {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                                                       {'IdentifierName': 'ListAll'}]},
                                                                                                     {'ArgumentList': '()'}]},
                                                                           {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'file'},
                                                                                                                                                                   {'IdentifierName': 'StartsWith'}]},
                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'SNAPSHOTS_PREFIX'}]},
                                                                                                                                                   {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StringComparison'},
                                                                                                                                                                                                   {'IdentifierName': 'Ordinal'}]}]}]}]},
                                                                                                       {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                                                                                                                       {'IdentifierName': 'DeleteFile'}]},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'file'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'SNAPSHOTS_PREFIX'}}],
                                                                      'name': {'identifier': 'startsWith'},
                                                                      'scope': {'name': {'identifier': 'file'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'file'}}],
                                                                                                    'name': {'identifier': 'deleteFile'},
                                                                                                    'scope': {'name': {'identifier': 'dir'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'listAll'},
                                            'scope': {'name': {'identifier': 'dir'}}},
                               'variable': {'variables': [{'name': {'identifier': 'file'},
                                                           'type': {'name': {'identifier': 'String'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'queryTree'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'PreProcessNode'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'queryTree'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ProcessChildren'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'queryTree'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'queryTree'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'PostProcessNode'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'queryTree'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'queryTree'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'queryTree'}},
                                              'value': {'arguments': [{'name': {'identifier': 'queryTree'}}],
                                                        'name': {'identifier': 'preProcessNode'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'queryTree'}}],
                                              'name': {'identifier': 'processChildren'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'queryTree'}},
                                              'value': {'arguments': [{'name': {'identifier': 'queryTree'}}],
                                                        'name': {'identifier': 'postProcessNode'}}}},
                              {'expression': {'name': {'identifier': 'queryTree'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Stopped'}]},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'stopped'},
                                                         'scope': {}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                            {'IdentifierName': 'CopyTo'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'off'}]},
                                                                                            {'Argument': [{'IdentifierName': 'm_buf'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                            {'IdentifierName': 'm_len'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'len'}]}]}]}]},
                       {'ExpressionStatement': [{'AddAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                               {'IdentifierName': 'm_len'}]},
                                                                             {'IdentifierName': 'len'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'b'}},
                                                            {'name': {'identifier': 'off'}},
                                                            {'name': {'identifier': 'buf'}},
                                                            {'name': {'identifier': 'len'},
                                                             'scope': {}},
                                                            {'name': {'identifier': 'len'}}],
                                              'name': {'identifier': 'arraycopy'},
                                              'scope': {'name': {'identifier': 'System'}}}},
                              {'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'len'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'len'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                        {'ArrayRankSpecifier': [{'IdentifierName': 'size'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'elementType': {'type': 'BYTE'},
                                              'levels': [{'dimension': {'name': {'identifier': 'size'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'DoubleVal'},
                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                     {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                       'name': {'identifier': 'doubleVal'}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': '@in'}]},
                                                                                {'IdentifierName': '@in'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'valueCount'},
                                                                                                                                            {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'valueCount'}]},
                                                                                {'IdentifierName': 'valueCount'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'off'},
                                                                                {'IdentifierName': 'blockSize'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ord'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'in'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'in'}}}},
                              {'check': {'left': {'name': {'identifier': 'valueCount'}},
                                         'operator': 'GREATER_EQUALS',
                                         'right': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'valueCount'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'valueCount'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'off'}},
                                              'value': {'name': {'identifier': 'blockSize'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ord'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'Parse'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                        {'Argument': [{'IdentifierName': 'defaultField'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                                           {'name': {'identifier': 'defaultField'}}],
                                                             'name': {'identifier': 'parse'},
                                                             'scope': {}},
                                              'type': {'name': {'identifier': 'Query'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'fst'}]},
                                                                                {'IdentifierName': 'fst'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'fst'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'fst'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                        {'IdentifierName': 'Subpath'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'prefixLen'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'prefixLen'}}],
                                              'name': {'identifier': 'subpath'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'FieldQueryNode'},
                                                                                                                                                  {'IdentifierName': 'node'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SpanTermQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Term'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldQueryNode'},
                                                                                                                                                                                                                                    {'IdentifierName': 'GetFieldAsString'}]},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                          {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldQueryNode'},
                                                                                                                                                                                                                                    {'IdentifierName': 'GetTextAsString'}]},
                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'node'}},
                                                                             'type': {'name': {'identifier': 'FieldQueryNode'}}},
                                                             'name': {'identifier': 'fieldQueryNode'},
                                                             'type': {'name': {'identifier': 'FieldQueryNode'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'getFieldAsString'},
                                                                            'scope': {'name': {'identifier': 'fieldQueryNode'}}},
                                                                           {'name': {'identifier': 'getTextAsString'},
                                                                            'scope': {'name': {'identifier': 'fieldQueryNode'}}}],
                                                             'type': {'name': {'identifier': 'Term'}}}],
                                              'type': {'name': {'identifier': 'SpanTermQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'x'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'Infos'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'x'}]},
                                         {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                                                 {'IdentifierName': 'Equals'}]},
                                                                                               {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Infos'},
                                                                                                                                                                                                                                                               {'IdentifierName': 'Info'}]},
                                                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                                                                                                                                                   {'IdentifierName': 'Info'}]},
                                                                                                                                                                 {'IdentifierName': 'Name'}]}]}]}]},
                                                                     {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Infos'},
                                                                                                                                                                 {'IdentifierName': 'Info'}]},
                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'},
                                                                                     'scope': {'name': {'identifier': 'info'},
                                                                                               'scope': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                                                         'name': {'identifier': 'info'},
                                                                                                         'scope': {'name': {'identifier': 'infos'}}}}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'name'}}},
                                                        'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                                    'name': {'identifier': 'info'},
                                                                                    'scope': {'name': {'identifier': 'infos'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'x'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'infos'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'x'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'x'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TwoPhaseCommitImpl'},
                                                                                                                  {'IdentifierName': 'CommitCalled'}]},
                                                                                {'FalseLiteralExpression': 'false'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'commitCalled'},
                                                         'scope': {'name': {'identifier': 'TwoPhaseCommitImpl'}}},
                                              'value': {'value': 'false'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StopAnalyzer'},
                                                                                                                                                                                                                            {'IdentifierName': 'ENGLISH_STOP_WORDS_SET'}]},
                                                                                                                                                                                          {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'WhileStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'it'},
                                                                                                       {'IdentifierName': 'MoveNext'}]},
                                                                     {'ArgumentList': '()'}]},
                                           {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'inValidTokens'},
                                                                                                                                           {'IdentifierName': 'Add'}]},
                                                                                                         {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'it'},
                                                                                                                                                                           {'IdentifierName': 'Current'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                             'scope': {'name': {'identifier': 'ENGLISH_STOP_WORDS_SET'},
                                                                                       'scope': {'name': {'identifier': 'StopAnalyzer'}}}},
                                                             'name': {'identifier': 'it'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'next'},
                                                                                      'scope': {'name': {'identifier': 'it'}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'inValidTokens'}}}}]},
                               'condition': {'name': {'identifier': 'hasNext'},
                                             'scope': {'name': {'identifier': 'it'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'stop'}},
                                              'value': {'type': {'name': {'identifier': 'StopAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'utf8SortedAsUnicodeSortOrder'},
                                                                                                        {'IdentifierName': 'Compare'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                        {'Argument': [{'IdentifierName': 'other'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'bytes'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'aBytes'},
                                                             'type': {'componentType': {'type': 'BYTE'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'aUpto'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'bytes'},
                                                                             'scope': {'name': {'identifier': 'other'}}},
                                                             'name': {'identifier': 'bBytes'},
                                                             'type': {'componentType': {'type': 'BYTE'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'},
                                                                             'scope': {'name': {'identifier': 'other'}}},
                                                             'name': {'identifier': 'bUpto'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'aUpto'}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'arguments': [{'name': {'identifier': 'length'},
                                                                                                      'scope': {}},
                                                                                                     {'name': {'identifier': 'length'},
                                                                                                      'scope': {'name': {'identifier': 'other'}}}],
                                                                                       'name': {'identifier': 'min'},
                                                                                       'scope': {'name': {'identifier': 'Math'}}}},
                                                             'name': {'identifier': 'aStop'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'index': {'expression': {'name': {'identifier': 'aUpto'}},
                                                                                                                         'operator': 'POSTFIX_INCREMENT'},
                                                                                                               'name': {'name': {'identifier': 'aBytes'}}},
                                                                                                      'operator': 'BINARY_AND',
                                                                                                      'right': {'value': '0xff'}},
                                                                                      'name': {'identifier': 'aByte'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'index': {'expression': {'name': {'identifier': 'bUpto'}},
                                                                                                                         'operator': 'POSTFIX_INCREMENT'},
                                                                                                               'name': {'name': {'identifier': 'bBytes'}}},
                                                                                                      'operator': 'BINARY_AND',
                                                                                                      'right': {'value': '0xff'}},
                                                                                      'name': {'identifier': 'bByte'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'aByte'}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'name': {'identifier': 'bByte'}}},
                                                                                      'name': {'identifier': 'diff'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'diff'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'diff'}}}]}}]},
                               'condition': {'left': {'name': {'identifier': 'aUpto'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'aStop'}}}},
                              {'expression': {'left': {'name': {'identifier': 'length'},
                                                       'scope': {}},
                                              'operator': 'MINUS',
                                              'right': {'name': {'identifier': 'length'},
                                                        'scope': {'name': {'identifier': 'other'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'utf8'},
                                                                                                                                                                                   {'IdentifierName': 'Offset'}]},
                                                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'utf8'},
                                                                                                                                                                                   {'IdentifierName': 'Length'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'IdentifierName': 'FST'},
                                                                                                  {'IdentifierName': 'BytesReader'}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'automaton'},
                                                                                                                                                                                          {'IdentifierName': 'GetBytesReader'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'utf8'},
                                                                                                                                                   {'IdentifierName': 'Offset'}]}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'max'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'automaton'},
                                                                                                                                                       {'IdentifierName': 'FindTargetArc'}]},
                                                                                                                     {'ArgumentList': [{'Argument': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'utf8'},
                                                                                                                                                                                                                                              {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                               {'NumericLiteralExpression': '0xff'}]}]},
                                                                                                                                       {'Argument': [{'IdentifierName': 'arc'}]},
                                                                                                                                       {'Argument': [{'IdentifierName': 'arc'}]},
                                                                                                                                       {'Argument': [{'IdentifierName': 'fstReader'}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                     {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'offset'},
                                                                                      'scope': {'name': {'identifier': 'utf8'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'length'},
                                                                                       'scope': {'name': {'identifier': 'utf8'}}}},
                                                             'name': {'identifier': 'max'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getBytesReader'},
                                                                             'scope': {'name': {'identifier': 'automaton'}}},
                                                             'name': {'identifier': 'fstReader'},
                                                             'type': {'name': {'identifier': 'BytesReader'},
                                                                      'scope': {'name': {'identifier': 'FST'}}}}]}},
                              {'body': {'statements': [{'condition': {'left': {'arguments': [{'left': {'index': {'name': {'identifier': 'i'}},
                                                                                                       'name': {'name': {'identifier': 'bytes'},
                                                                                                                'scope': {'name': {'identifier': 'utf8'}}}},
                                                                                              'operator': 'BINARY_AND',
                                                                                              'right': {'value': '0xff'}},
                                                                                             {'name': {'identifier': 'arc'}},
                                                                                             {'name': {'identifier': 'arc'}},
                                                                                             {'name': {'identifier': 'fstReader'}}],
                                                                               'name': {'identifier': 'findTargetArc'},
                                                                               'scope': {'name': {'identifier': 'automaton'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'max'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'offset'},
                                                                                  'scope': {'name': {'identifier': 'utf8'}}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexSearcher'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'r'}}],
                                              'type': {'name': {'identifier': 'IndexSearcher'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentTokType'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numBalanced'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'positionInc'},
                                                                                {'NumericLiteralExpression': '1'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numLinkToks'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numWikiTokensSeen'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentTokType'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'numBalanced'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'positionInc'}},
                                              'value': {'value': '1'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'numLinkToks'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'numWikiTokensSeen'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'pos'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'pos'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexInput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'IndexInput'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                                                                                                                              {'IdentifierName': 'Clone'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clone'},
                                                                                                            {'IdentifierName': 'Seek'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ChecksumIndexInput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BufferedChecksumIndexInput'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'clone'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                            {'IdentifierName': 'GetFilePointer'}]},
                                                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                                                {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'Seek'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                    {'IdentifierName': 'Length'}]},
                                                                                                                                  {'InvocationExpression': [{'IdentifierName': 'FooterLength'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckFooter'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'clone'},
                                                                             'scope': {'name': {'identifier': 'input'}}},
                                                             'name': {'identifier': 'clone'},
                                                             'type': {'name': {'identifier': 'IndexInput'}}}]}},
                              {'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'seek'},
                                              'scope': {'name': {'identifier': 'clone'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'clone'}}],
                                                                             'type': {'name': {'identifier': 'BufferedChecksumIndexInput'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'ChecksumIndexInput'}}}]}},
                              {'check': {'left': {'name': {'identifier': 'getFilePointer'},
                                                  'scope': {'name': {'identifier': 'in'}}},
                                         'operator': 'EQUALS',
                                         'right': {'value': '0'}}},
                              {'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'in'}}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'footerLength'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'left': {'value': 'misplaced '
                                                                                                                              'codec '
                                                                                                                              'footer '
                                                                                                                              '(file '
                                                                                                                              'truncated?): '
                                                                                                                              'length='},
                                                                                                            'operator': 'PLUS',
                                                                                                            'right': {'name': {'identifier': 'length'},
                                                                                                                      'scope': {'name': {'identifier': 'in'}}}},
                                                                                                   'operator': 'PLUS',
                                                                                                   'right': {'value': ' '
                                                                                                                      'but '
                                                                                                                      'footerLength=='}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'footerLength'}}},
                                                                                         {'name': {'identifier': 'input'}}],
                                                                           'type': {'name': {'identifier': 'CorruptIndexException'}}}}]}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'length'},
                                                                      'scope': {'name': {'identifier': 'in'}}},
                                                             'operator': 'MINUS',
                                                             'right': {'name': {'identifier': 'footerLength'}}}],
                                              'name': {'identifier': 'seek'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'in'}}],
                                              'name': {'identifier': 'checkFooter'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'cache'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'cache'},
                                                                                                            {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'AttributeSource'},
                                                                                                                                                                                                    {'IdentifierName': 'State'}]}]}]},
                                                                                                                                          {'ArgumentList': '()'}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'FillCache'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'iterator'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cache'},
                                                                                                                                                                        {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iterator'},
                                                                                                                              {'IdentifierName': 'MoveNext'}]},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RestoreState'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iterator'},
                                                                                                                                            {'IdentifierName': 'Current'}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'cache'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'cache'}},
                                                                           'value': {'arguments': [{'value': '64'}],
                                                                                     'type': {'name': {'identifier': 'ArrayList'}}}}},
                                                           {'expression': {'name': {'identifier': 'fillCache'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'iterator'}},
                                                                           'value': {'name': {'identifier': 'iterator'},
                                                                                     'scope': {'name': {'identifier': 'cache'}}}}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'hasNext'},
                                                            'scope': {'name': {'identifier': 'iterator'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'next'},
                                                             'scope': {'name': {'identifier': 'iterator'}}}],
                                              'name': {'identifier': 'restoreState'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RegexpQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RegexpQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'NewTerm'},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'regex'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Searcher'},
                                                                                                                                          {'IdentifierName': 'Search'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                                                          {'Argument': [{'NumericLiteralExpression': '5'}]}]}]},
                                                                              {'IdentifierName': 'TotalHits'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'regex'}}],
                                                                                            'name': {'identifier': 'newTerm'}}],
                                                                             'type': {'name': {'identifier': 'RegexpQuery'}}},
                                                             'name': {'identifier': 'query'},
                                                             'type': {'name': {'identifier': 'RegexpQuery'}}}]}},
                              {'expression': {'name': {'identifier': 'totalHits'},
                                              'scope': {'arguments': [{'name': {'identifier': 'query'}},
                                                                      {'value': '5'}],
                                                        'name': {'identifier': 'search'},
                                                        'scope': {'name': {'identifier': 'searcher'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MockTokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'WHITESPACE'}]}]},
                                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'DEFAULT_MAX_TOKEN_LENGTH'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenizer'},
                                                                                                                  {'IdentifierName': 'EnableChecks'}]},
                                                                                {'ParenthesizedExpression': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenStream'},
                                                                               {'VariableDeclarator': 'next'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'numStopChars'},
                                                                 {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'next'},
                                                                                                            {'ObjectCreationExpression': [{'IdentifierName': 'TokenEater'},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'preserveHoles'}]},
                                                                                                                                                            {'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                            {'Argument': [{'IdentifierName': 'numStopChars'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'next'},
                                                                                                                            {'IdentifierName': 'tokenizer'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'IdentifierName': 'next'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'false'},
                                                                                           {'name': {'identifier': 'DEFAULT_MAX_TOKEN_LENGTH'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'MockTokenizer'}}}]}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setEnableChecks'},
                                              'scope': {'name': {'identifier': 'tokenizer'}}}},
                              {'expression': {'variables': [{'name': {'identifier': 'next'},
                                                             'type': {'name': {'identifier': 'TokenStream'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'numStopChars'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'next'}},
                                                                           'value': {'name': {'identifier': 'tokenizer'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'next'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'preserveHoles'}},
                                                                                                   {'name': {'identifier': 'tokenizer'}},
                                                                                                   {'name': {'identifier': 'numStopChars'}}],
                                                                                     'type': {'name': {'identifier': 'TokenEater'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'name': {'identifier': 'next'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'tokens'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'tokens'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'obj'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'obj'}},
                                              'operator': 'EQUALS',
                                              'right': {}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                        {'IdentifierName': 'size'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'DefaultExpression': [{'IdentifierName': 'T'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'size'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'heap'}}},
                                                                       'value': {}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'size'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'size'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'directory'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'counterThread'},
                                                                                                            {'IdentifierName': 'StopTimer'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'counterThread'},
                                                                                                            {'IdentifierName': 'Join'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'directory'}}}},
                              {'expression': {'name': {'identifier': 'stopTimer'},
                                              'scope': {'name': {'identifier': 'counterThread'}}}},
                              {'expression': {'name': {'identifier': 'join'},
                                              'scope': {'name': {'identifier': 'counterThread'}}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'IntersectTermsEnum'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'compiled'}]},
                                                                                            {'Argument': [{'IdentifierName': 'startTerm'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'type'},
                                                      'scope': {'name': {'identifier': 'compiled'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'NORMAL'},
                                                       'scope': {'name': {'identifier': 'AUTOMATON_TYPE'},
                                                                 'scope': {'name': {'identifier': 'CompiledAutomaton'}}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'please '
                                                                                                   'use '
                                                                                                   'CompiledAutomaton.getTermsEnum '
                                                                                                   'instead'}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'compiled'}},
                                                            {'name': {'identifier': 'startTerm'}}],
                                              'type': {'name': {'identifier': 'IntersectTermsEnum'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_0'},
                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'jjMoveNfa_0'}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'm_curChar'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'NumericLiteralExpression': '40'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopAtPos'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '13'}]}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'NumericLiteralExpression': '41'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopAtPos'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '14'}]}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'NumericLiteralExpression': '44'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopAtPos'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '15'}]}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'NumericLiteralExpression': '58'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopAtPos'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '16'}]}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'NumericLiteralExpression': '94'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopAtPos'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '17'}]}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_1'},
                                                                                                              {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'value': '40'},
                                            'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '13'}],
                                                                           'name': {'identifier': 'jjStopAtPos'}}}]},
                                           {'label': {'value': '41'},
                                            'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '14'}],
                                                                           'name': {'identifier': 'jjStopAtPos'}}}]},
                                           {'label': {'value': '44'},
                                            'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '15'}],
                                                                           'name': {'identifier': 'jjStopAtPos'}}}]},
                                           {'label': {'value': '58'},
                                            'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '16'}],
                                                                           'name': {'identifier': 'jjStopAtPos'}}}]},
                                           {'label': {'value': '94'},
                                            'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '17'}],
                                                                           'name': {'identifier': 'jjStopAtPos'}}}]},
                                           {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                         {'value': '0'}],
                                                                           'name': {'identifier': 'jjMoveNfa_1'}}}]}],
                               'selector': {'name': {'identifier': 'curChar'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'RomanianStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'RomanianStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CommandLineUtil'},
                                                                                                        {'IdentifierName': 'NewFSDirectory'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'clazz'}]},
                                                                                        {'Argument': [{'IdentifierName': 'file'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'd'},
                                                             'type': {'name': {'identifier': 'FSDirectory'}}}]}},
                              {'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                         'name': {'identifier': 'rethrow'},
                                                                                         'scope': {'name': {'identifier': 'Rethrow'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'ReflectiveOperationException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'd'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'clazz'}},
                                                                                                   {'name': {'identifier': 'path'}},
                                                                                                   {'name': {'identifier': 'lf'}}],
                                                                                     'name': {'identifier': 'newFSDirectory'},
                                                                                     'scope': {'name': {'identifier': 'CommandLineUtil'}}}}}]}},
                              {'expression': {'name': {'identifier': 'd'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'doc'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doc'}},
                                              'value': {}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'EmptyTokenStream'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertFalse'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                                                                                      {'IdentifierName': 'IncrementToken'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'End'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertFalse'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                                                                                      {'IdentifierName': 'IncrementToken'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'End'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ts'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'EmptyTokenStream'}}},
                                                             'name': {'identifier': 'ts'},
                                                             'type': {'name': {'identifier': 'TokenStream'}}}]}},
                              {'expression': {'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'ts'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'incrementToken'},
                                                             'scope': {'name': {'identifier': 'ts'}}}],
                                              'name': {'identifier': 'assertFalse'}}},
                              {'expression': {'name': {'identifier': 'end'},
                                              'scope': {'name': {'identifier': 'ts'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'ts'}}}},
                              {'expression': {'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'ts'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'incrementToken'},
                                                             'scope': {'name': {'identifier': 'ts'}}}],
                                              'name': {'identifier': 'assertFalse'}}},
                              {'expression': {'name': {'identifier': 'end'},
                                              'scope': {'name': {'identifier': 'ts'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'ts'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'bufferPosition'},
                                                              {'IdentifierName': 'bufferLength'}]},
                                        {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'currentBufferIndex'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SwitchCurrentBuffer'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'crc'},
                                                                                                            {'IdentifierName': 'Update'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'currentBuffer'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'bufferPosition'}]}]}]}]},
                                                                                {'IdentifierName': 'b'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'bufferPosition'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'bufferLength'}}},
                               'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'currentBufferIndex'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}},
                                                           {'expression': {'name': {'identifier': 'switchCurrentBuffer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'crc'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'b'}}],
                                                                           'name': {'identifier': 'update'},
                                                                           'scope': {'name': {'identifier': 'crc'}}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'expression': {'name': {'identifier': 'bufferPosition'}},
                                                                   'operator': 'POSTFIX_INCREMENT'},
                                                         'name': {'name': {'identifier': 'currentBuffer'}}},
                                              'value': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckMax'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TermQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'checkMax'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'term'}}],
                                              'type': {'name': {'identifier': 'TermQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'HumanReadableUnits'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytes'}]},
                                                                                        {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'NumberFormatInfo'},
                                                                                                                                    {'ArgumentList': '()'},
                                                                                                                                    {'ObjectInitializerExpression': [{'SimpleAssignmentExpression': [{'IdentifierName': 'NumberDecimalDigits'},
                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'bytes'}},
                                                      'operator': 'DIVIDE',
                                                      'right': {'name': {'identifier': 'ONE_GB'}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'elseStmt': {'condition': {'left': {'left': {'name': {'identifier': 'bytes'}},
                                                                   'operator': 'DIVIDE',
                                                                   'right': {'name': {'identifier': 'ONE_MB'}}},
                                                          'operator': 'GREATER',
                                                          'right': {'value': '0'}},
                                            'elseStmt': {'condition': {'left': {'left': {'name': {'identifier': 'bytes'}},
                                                                                'operator': 'DIVIDE',
                                                                                'right': {'name': {'identifier': 'ONE_KB'}}},
                                                                       'operator': 'GREATER',
                                                                       'right': {'value': '0'}},
                                                         'elseStmt': {'statements': [{'expression': {'left': {'name': {'identifier': 'bytes'}},
                                                                                                     'operator': 'PLUS',
                                                                                                     'right': {'value': ' '
                                                                                                                        'bytes'}}}]},
                                                         'thenStmt': {'statements': [{'expression': {'left': {'arguments': [{'left': {'expression': {'name': {'identifier': 'bytes'}},
                                                                                                                                      'type': {'type': 'FLOAT'}},
                                                                                                                             'operator': 'DIVIDE',
                                                                                                                             'right': {'name': {'identifier': 'ONE_KB'}}}],
                                                                                                              'name': {'identifier': 'format'},
                                                                                                              'scope': {'name': {'identifier': 'df'}}},
                                                                                                     'operator': 'PLUS',
                                                                                                     'right': {'value': ' '
                                                                                                                        'KB'}}}]}},
                                            'thenStmt': {'statements': [{'expression': {'left': {'arguments': [{'left': {'expression': {'name': {'identifier': 'bytes'}},
                                                                                                                         'type': {'type': 'FLOAT'}},
                                                                                                                'operator': 'DIVIDE',
                                                                                                                'right': {'name': {'identifier': 'ONE_MB'}}}],
                                                                                                 'name': {'identifier': 'format'},
                                                                                                 'scope': {'name': {'identifier': 'df'}}},
                                                                                        'operator': 'PLUS',
                                                                                        'right': {'value': ' '
                                                                                                           'MB'}}}]}},
                               'thenStmt': {'statements': [{'expression': {'left': {'arguments': [{'left': {'expression': {'name': {'identifier': 'bytes'}},
                                                                                                            'type': {'type': 'FLOAT'}},
                                                                                                   'operator': 'DIVIDE',
                                                                                                   'right': {'name': {'identifier': 'ONE_GB'}}}],
                                                                                    'name': {'identifier': 'format'},
                                                                                    'scope': {'name': {'identifier': 'df'}}},
                                                                           'operator': 'PLUS',
                                                                           'right': {'value': ' '
                                                                                              'GB'}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'valsArr'},
                                                                                                {'IdentifierName': 'Length'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0.0f'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'valsArr'},
                                                                                                                                                                                                                                {'IdentifierName': 'Select'}]},
                                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleLambdaExpression': [{'Parameter': 'vals'},
                                                                                                                                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'vals'},
                                                                                                                                                                                                                                                                                                                      {'IdentifierName': 'SingleVal'}]},
                                                                                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]}]},
                                                                                                                                                                    {'IdentifierName': 'Concat'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ImplicitArrayCreationExpression': [{'ArrayInitializerExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'float'},
                                                                                                                                                                                                                                                                         {'IdentifierName': 'NegativeInfinity'}]}]}]}]}]}]},
                                                                                                        {'IdentifierName': 'Max'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                          {'name': {'identifier': 'valsArr'}}],
                                                            'name': {'identifier': 'exists'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': '0.0f'}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'NEGATIVE_INFINITY'},
                                                                             'scope': {'name': {'identifier': 'Float'}}},
                                                             'name': {'identifier': 'val'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                      'name': {'identifier': 'exists'},
                                                                      'scope': {'name': {'identifier': 'vals'}}},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'val'}},
                                                                                                    'value': {'arguments': [{'arguments': [{'name': {'identifier': 'doc'}}],
                                                                                                                             'name': {'identifier': 'floatVal'},
                                                                                                                             'scope': {'name': {'identifier': 'vals'}}},
                                                                                                                            {'name': {'identifier': 'val'}}],
                                                                                                              'name': {'identifier': 'max'},
                                                                                                              'scope': {'name': {'identifier': 'Math'}}}}}]}}]},
                               'iterable': {'name': {'identifier': 'valsArr'}},
                               'variable': {'variables': [{'name': {'identifier': 'vals'},
                                                           'type': {'name': {'identifier': 'FunctionValues'}}}]}},
                              {'expression': {'name': {'identifier': 'val'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_a'},
                                                                                                            {'IdentifierName': 'CreateWeight'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                            {'Argument': [{'IdentifierName': 'searcher'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_b'},
                                                                                                            {'IdentifierName': 'CreateWeight'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                            {'Argument': [{'IdentifierName': 'searcher'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'context'}},
                                                            {'name': {'identifier': 'searcher'}}],
                                              'name': {'identifier': 'createWeight'},
                                              'scope': {'name': {'identifier': 'a'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'context'}},
                                                            {'name': {'identifier': 'searcher'}}],
                                              'name': {'identifier': 'createWeight'},
                                              'scope': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ShapeDocValueSource'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FieldName'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_ctx'},
                                                                                                                                            {'IdentifierName': 'BinaryCodec'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getFieldName'}},
                                                            {'name': {'identifier': 'getBinaryCodec'},
                                                             'scope': {'name': {'identifier': 'ctx'}}}],
                                              'type': {'name': {'identifier': 'ShapeDocValueSource'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'PersianNormalizationFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'PersianNormalizationFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'among_var'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_ket'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'among_var'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_1'}]},
                                                                                                                            {'Argument': [{'NumericLiteralExpression': '294'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'among_var'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_bra'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'among_var'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '1'}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SliceDel'},
                                                                                                                  {'ArgumentList': '()'}]}]},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'among_var'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ket'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'among_var'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a_1'}},
                                                                      {'value': '294'}],
                                                        'name': {'identifier': 'find_among_b'}}}},
                              {'condition': {'left': {'name': {'identifier': 'among_var'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bra'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'value': '1'},
                                            'statements': [{'expression': {'name': {'identifier': 'slice_del'}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'among_var'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'runInBackground'},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'deltaPri'}]},
                                                                                {'IdentifierName': 'deltaPri'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'runInBackground'}},
                                              'value': {'value': 'true'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'deltaPri'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'deltaPri'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'len'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                            {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Flush'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                        {'IdentifierName': 'Update'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'off'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'len'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'IfStatement': [{'GreaterThanExpression': [{'AddExpression': [{'IdentifierName': 'upto'},
                                                                                                                                  {'IdentifierName': 'len'}]},
                                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                 {'IdentifierName': 'Length'}]}]},
                                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Flush'},
                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'System'},
                                                                                                                                                                                          {'IdentifierName': 'Buffer'}]},
                                                                                                                                                        {'IdentifierName': 'BlockCopy'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'off'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'buffer'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'upto'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'len'}]}]}]}]},
                                                                   {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'upto'},
                                                                                                                         {'IdentifierName': 'len'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'buffer'}}}},
                               'elseStmt': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'upto'}},
                                                                                   'operator': 'PLUS',
                                                                                   'right': {'name': {'identifier': 'len'}}},
                                                                          'operator': 'GREATER',
                                                                          'right': {'name': {'identifier': 'length'},
                                                                                    'scope': {'name': {'identifier': 'buffer'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'flush'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'b'}},
                                                                                         {'name': {'identifier': 'off'}},
                                                                                         {'name': {'identifier': 'buffer'}},
                                                                                         {'name': {'identifier': 'upto'}},
                                                                                         {'name': {'identifier': 'len'}}],
                                                                           'name': {'identifier': 'arraycopy'},
                                                                           'scope': {'name': {'identifier': 'System'}}}},
                                                           {'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'upto'}},
                                                                           'value': {'name': {'identifier': 'len'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'flush'}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'b'}},
                                                                                         {'name': {'identifier': 'off'}},
                                                                                         {'name': {'identifier': 'len'}}],
                                                                           'name': {'identifier': 'update'},
                                                                           'scope': {'name': {'identifier': 'in'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrowableWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'GrowableWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'BitsPerValue'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'newSize'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'acceptableOverheadRatio'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                                          {'IdentifierName': 'Min'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'Count'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'newSize'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PackedInt32s'},
                                                                                                            {'IdentifierName': 'Copy'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'current'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'next'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'limit'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PackedInt32s'},
                                                                                                                                            {'IdentifierName': 'DEFAULT_BUFFER_SIZE'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'next'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getBitsPerValue'}},
                                                                                           {'name': {'identifier': 'newSize'}},
                                                                                           {'name': {'identifier': 'acceptableOverheadRatio'}}],
                                                                             'type': {'name': {'identifier': 'GrowableWriter'}}},
                                                             'name': {'identifier': 'next'},
                                                             'type': {'name': {'identifier': 'GrowableWriter'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'size'}},
                                                                                           {'name': {'identifier': 'newSize'}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'limit'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'current'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'next'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'limit'}},
                                                            {'name': {'identifier': 'DEFAULT_BUFFER_SIZE'},
                                                             'scope': {'name': {'identifier': 'PackedInts'}}}],
                                              'name': {'identifier': 'copy'},
                                              'scope': {'name': {'identifier': 'PackedInts'}}}},
                              {'expression': {'name': {'identifier': 'next'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldsReader'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'FieldsReader'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'EqualsExpression': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                        {'IdentifierName': 'output'}]},
                                                                                                                                                    {'NumericLiteralExpression': '7'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'accept'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RejectCount'},
                                                                                                                                        {'IdentifierName': 'IncrementAndGet'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'accept'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'intValue'},
                                                                                      'scope': {'name': {'identifier': 'output'}}},
                                                                             'operator': 'EQUALS',
                                                                             'right': {'value': '7'}},
                                                             'name': {'identifier': 'accept'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'accept'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'incrementAndGet'},
                                                                           'scope': {'name': {'identifier': 'rejectCount'}}}}]}},
                              {'expression': {'name': {'identifier': 'accept'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'ids'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'ids'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                {'ElementAccessExpression': [{'IdentifierName': 'ids'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'j'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'ids'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'j'}]}]}]},
                                                                                {'IdentifierName': 'id'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'name': {'identifier': 'i'}},
                                                                             'name': {'name': {'identifier': 'ids'}}},
                                                             'name': {'identifier': 'id'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'i'}},
                                                         'name': {'name': {'identifier': 'ids'}}},
                                              'value': {'index': {'name': {'identifier': 'j'}},
                                                        'name': {'name': {'identifier': 'ids'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'j'}},
                                                         'name': {'name': {'identifier': 'ids'}}},
                                              'value': {'name': {'identifier': 'id'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'WordlistLoader'},
                                                                                                        {'IdentifierName': 'GetLines'}]},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'loader'},
                                                                                                                                                                  {'IdentifierName': 'OpenResource'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'resource'}]}]}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                        {'IdentifierName': 'UTF8'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'resource'}}],
                                                             'name': {'identifier': 'openResource'},
                                                             'scope': {'name': {'identifier': 'loader'}}},
                                                            {'name': {'identifier': 'UTF_8'},
                                                             'scope': {'name': {'identifier': 'StandardCharsets'}}}],
                                              'name': {'identifier': 'getLines'},
                                              'scope': {'name': {'identifier': 'WordlistLoader'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'term_Renamed'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'Grow'},
                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frame'},
                                                                                                                                                                                                              {'IdentifierName': 'fstArc'}]},
                                                                                                                                                                            {'IdentifierName': 'Label'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'level'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'term'}},
                                              'value': {'arguments': [{'name': {'identifier': 'label'},
                                                                       'scope': {'name': {'identifier': 'fstArc'},
                                                                                 'scope': {'name': {'identifier': 'frame'}}}}],
                                                        'name': {'identifier': 'grow'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'level'}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'byte'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CharacterDefinition'},
                                                                                                                                                                                          {'IdentifierName': 'LookupCharacterClass'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'characterClassName'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'invokeMap'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'characterClass'}]}]}]},
                                                                                {'EqualsExpression': [{'IdentifierName': 'invoke'},
                                                                                                      {'NumericLiteralExpression': '1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'groupMap'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'characterClass'}]}]}]},
                                                                                {'EqualsExpression': [{'IdentifierName': 'group'},
                                                                                                      {'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'characterClassName'}}],
                                                                             'name': {'identifier': 'lookupCharacterClass'},
                                                                             'scope': {'name': {'identifier': 'CharacterDefinition'}}},
                                                             'name': {'identifier': 'characterClass'},
                                                             'type': {'type': 'BYTE'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'characterClass'}},
                                                         'name': {'name': {'identifier': 'invokeMap'}}},
                                              'value': {'left': {'name': {'identifier': 'invoke'}},
                                                        'operator': 'EQUALS',
                                                        'right': {'value': '1'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'characterClass'}},
                                                         'name': {'name': {'identifier': 'groupMap'}}},
                                              'value': {'left': {'name': {'identifier': 'group'}},
                                                        'operator': 'EQUALS',
                                                        'right': {'value': '1'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GermanLightStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'GermanLightStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'exception'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'suppressed'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'exception'},
                                                                                                                                        {'IdentifierName': 'AddSuppressed'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'suppressed'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'exception'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'suppressed'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'suppressed'}}],
                                                                           'name': {'identifier': 'addSuppressed'},
                                                                           'scope': {'name': {'identifier': 'exception'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                              {'IdentifierName': 'dv'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'dv'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleTextTermVectorsWriter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'directory'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'segmentInfo'},
                                                                                                                                            {'IdentifierName': 'Name'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'context'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'directory'}},
                                                            {'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'segmentInfo'}}},
                                                            {'name': {'identifier': 'context'}}],
                                              'type': {'name': {'identifier': 'SimpleTextTermVectorsWriter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': 'distErrPctStr'},
                                                                               {'VariableDeclarator': 'distErrStr'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nameValPairs'},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'DIST_ERR_PCT'}]},
                                                                                            {'Argument': [{'IdentifierName': 'distErrPctStr'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nameValPairs'},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'DIST_ERR'}]},
                                                                                            {'Argument': [{'IdentifierName': 'distErrStr'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'args'},
                                                                                                                  {'IdentifierName': 'DistErrPct'}]},
                                                                                {'InvocationExpression': [{'IdentifierName': 'ReadDouble'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'distErrPctStr'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nameValPairs'},
                                                                                                            {'IdentifierName': 'Remove'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'DIST_ERR_PCT'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'args'},
                                                                                                                  {'IdentifierName': 'DistErr'}]},
                                                                                {'InvocationExpression': [{'IdentifierName': 'ReadDouble'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'distErrStr'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nameValPairs'},
                                                                                                            {'IdentifierName': 'Remove'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'DIST_ERR'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'arguments': [{'name': {'identifier': 'DIST_ERR_PCT'}}],
                                                                            'name': {'identifier': 'remove'},
                                                                            'scope': {'name': {'identifier': 'nameValPairs'}}}],
                                                             'name': {'identifier': 'readDouble'}}],
                                              'name': {'identifier': 'setDistErrPct'},
                                              'scope': {'name': {'identifier': 'args'}}}},
                              {'expression': {'arguments': [{'arguments': [{'arguments': [{'name': {'identifier': 'DIST_ERR'}}],
                                                                            'name': {'identifier': 'remove'},
                                                                            'scope': {'name': {'identifier': 'nameValPairs'}}}],
                                                             'name': {'identifier': 'readDouble'}}],
                                              'name': {'identifier': 'setDistErr'},
                                              'scope': {'name': {'identifier': 'args'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'RandomInstance'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RandomInts'},
                                                                                                                                                                  {'IdentifierName': 'NextIntBetween'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                                                                                  {'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                                                                                  {'Argument': [{'NumericLiteralExpression': '500'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'withSegmentSuffix'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'value': '1'},
                                                                           {'left': {'value': '1'},
                                                                            'operator': 'LEFT_SHIFT',
                                                                            'right': {'value': '15'}}],
                                                             'name': {'identifier': 'randomIntBetween'},
                                                             'scope': {'name': {'identifier': 'RandomNumbers'}}},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'value': '64'},
                                                                           {'value': '1024'}],
                                                             'name': {'identifier': 'randomIntBetween'},
                                                             'scope': {'name': {'identifier': 'RandomNumbers'}}},
                                                            {'name': {'identifier': 'withSegmentSuffix'}},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'value': '1'},
                                                                           {'value': '1024'}],
                                                             'name': {'identifier': 'randomIntBetween'},
                                                             'scope': {'name': {'identifier': 'RandomNumbers'}}}],
                                              'name': {'identifier': 'randomInstance'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'GreaterThanExpression': [{'IdentifierName': 'size'},
                                                                       {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'size'}},
                                              'operator': 'GREATER',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Create'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'numHits'}]},
                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                        {'Argument': [{'IdentifierName': 'docsScoredInOrder'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'numHits'}},
                                             'operator': 'LESS_EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'numHits '
                                                                                                   'must '
                                                                                                   'be '
                                                                                                   '> '
                                                                                                   '0; '
                                                                                                   'please '
                                                                                                   'use '
                                                                                                   'TotalHitCountCollector '
                                                                                                   'if '
                                                                                                   'you '
                                                                                                   'just '
                                                                                                   'need '
                                                                                                   'the '
                                                                                                   'total '
                                                                                                   'hit '
                                                                                                   'count'}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'after'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'numHits'}},
                                                                                         {'name': {'identifier': 'after'}}],
                                                                           'type': {'name': {'identifier': 'PagingTopScoreDocCollector'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'numHits'}},
                                                                                         {'name': {'identifier': 'trackTotalHits'}}],
                                                                           'type': {'name': {'identifier': 'SimpleTopScoreDocCollector'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'IdentifierName': 'Search'},
                                                                                                  {'IdentifierName': 'Query'}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'MakeLuceneQueryFieldNoBoost'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldName'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'qf'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'IdentifierName': 'IsWeighted'},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                                                              {'IdentifierName': 'Boost'}]},
                                                                                                            {'ParenthesizedExpression': [{'MultiplyExpression': [{'IdentifierName': 'Weight'},
                                                                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                                                                                                                   {'IdentifierName': 'Boost'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'q'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'fieldName'}},
                                                                                           {'name': {'identifier': 'qf'}}],
                                                                             'name': {'identifier': 'makeLuceneQueryFieldNoBoost'}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'condition': {'name': {'identifier': 'isWeighted'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'q'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'q'}},
                                                                                                   {'name': {'identifier': 'getWeight'}}],
                                                                                     'type': {'name': {'identifier': 'BoostQuery'}}}}}]}},
                              {'expression': {'name': {'identifier': 'q'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                            {'IdentifierName': 'Append'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAttribute'},
                                                                                                                                            {'IdentifierName': 'Buffer'}]}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAttribute'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                            {'IdentifierName': 'Append'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'SEPARATOR'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastStartOffset'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'offsetAttribute'},
                                                                                                                  {'IdentifierName': 'StartOffset'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastWasCommon'},
                                                                                {'IdentifierName': 'IsCommon'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'setLength'},
                                              'scope': {'name': {'identifier': 'buffer'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'buffer'},
                                                             'scope': {'name': {'identifier': 'termAttribute'}}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'termAttribute'}}}],
                                              'name': {'identifier': 'append'},
                                              'scope': {'name': {'identifier': 'buffer'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'SEPARATOR'}}],
                                              'name': {'identifier': 'append'},
                                              'scope': {'name': {'identifier': 'buffer'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastStartOffset'}},
                                              'value': {'name': {'identifier': 'startOffset'},
                                                        'scope': {'name': {'identifier': 'offsetAttribute'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastWasCommon'}},
                                              'value': {'name': {'identifier': 'isCommon'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                                                                              {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexWriterConfig'},
                                                                                                                                                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Util'},
                                                                                                                                                                                                                                                                                                                                                                                                                       {'IdentifierName': 'LuceneTestCase'}]},
                                                                                                                                                                                                                                                                                                                                                                                     {'IdentifierName': 'TEST_VERSION_CURRENT'}]}]},
                                                                                                                                                                                                                                                                                                                                     {'Argument': [{'IdentifierName': 'analyzer'}]}]}]}]},
                                                                                                                                                                                                                                                        {'IdentifierName': 'SetSimilarity'}]},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'CoalesceExpression': [{'IdentifierName': 'similarity'},
                                                                                                                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'IndexSearcher'},
                                                                                                                                                                                                                                                                                                                {'IdentifierName': 'DefaultSimilarity'}]}]}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'AddDocument'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Commit'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SegmentCommitInfo'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                                                                          {'IdentifierName': 'NewestSegment'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'info'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                           {'arguments': [{'condition': {'left': {'name': {'identifier': 'similarity'}},
                                                                                                                         'operator': 'EQUALS',
                                                                                                                         'right': {}},
                                                                                                           'elseExpr': {'name': {'identifier': 'similarity'}},
                                                                                                           'thenExpr': {'name': {'identifier': 'getDefaultSimilarity'},
                                                                                                                        'scope': {'name': {'identifier': 'IndexSearcher'}}}}],
                                                                                            'name': {'identifier': 'setSimilarity'},
                                                                                            'scope': {'arguments': [{'name': {'identifier': 'analyzer'}}],
                                                                                                      'type': {'name': {'identifier': 'IndexWriterConfig'}}}}],
                                                                             'type': {'name': {'identifier': 'IndexWriter'}}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'addDocument'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'commit'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'newestSegment'},
                                                                             'scope': {'name': {'identifier': 'writer'}}},
                                                             'name': {'identifier': 'info'},
                                                             'type': {'name': {'identifier': 'SegmentCommitInfo'}}}]}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'info'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ForEachStatement': [{'IdentifierName': 'ReadersAndUpdates'},
                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'readerMap'},
                                                                                                             {'IdentifierName': 'Values'}]},
                                                                           {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rld'},
                                                                                                                                                                  {'IdentifierName': 'PendingDeleteCount'}]},
                                                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                                                       {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                                                     {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'getPendingDeleteCount'},
                                                                               'scope': {'name': {'identifier': 'rld'}}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'readerMap'}}},
                               'variable': {'variables': [{'name': {'identifier': 'rld'},
                                                           'type': {'name': {'identifier': 'ReadersAndUpdates'}}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'MergedDir'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'Merge1Dir'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'Merge2Dir'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'Reader1'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'Reader2'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'mergedDir'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'merge1Dir'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'merge2Dir'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'reader1'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'reader2'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'GetSortedDocValues'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'FIELD_NAME'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'FIELD_NAME'}}],
                                              'name': {'identifier': 'getSortedDocValues'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'j'},
                                                                                {'IdentifierName': 'k'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'b'},
                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'k'}]}]}]},
                                                              {'CharacterLiteralExpression': "'e'"}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'M'},
                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                                   {'IfStatement': [{'LogicalOrExpression': [{'GreaterThanExpression': [{'IdentifierName': 'a'},
                                                                                                                        {'NumericLiteralExpression': '1'}]},
                                                                                             {'LogicalAndExpression': [{'EqualsExpression': [{'IdentifierName': 'a'},
                                                                                                                                             {'NumericLiteralExpression': '1'}]},
                                                                                                                       {'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'Cvc'},
                                                                                                                                                                           {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'k'},
                                                                                                                                                                                                                                   {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                                                                    {'Block': [{'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'k'}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'k'}]}]}]},
                                                                                                                  {'CharacterLiteralExpression': "'l'"}]},
                                                                                            {'InvocationExpression': [{'IdentifierName': 'DoubleC'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'k'}]}]}]}]},
                                                                  {'GreaterThanExpression': [{'InvocationExpression': [{'IdentifierName': 'M'},
                                                                                                                       {'ArgumentList': '()'}]},
                                                                                             {'NumericLiteralExpression': '1'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'k'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'j'}},
                                              'value': {'name': {'identifier': 'k'}}}},
                              {'condition': {'left': {'index': {'name': {'identifier': 'k'}},
                                                      'name': {'name': {'identifier': 'b'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': 'e'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'm'}},
                                                                                          'name': {'identifier': 'a'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'condition': {'left': {'left': {'name': {'identifier': 'a'}},
                                                                                   'operator': 'GREATER',
                                                                                   'right': {'value': '1'}},
                                                                          'operator': 'OR',
                                                                          'right': {'left': {'left': {'name': {'identifier': 'a'}},
                                                                                             'operator': 'EQUALS',
                                                                                             'right': {'value': '1'}},
                                                                                    'operator': 'AND',
                                                                                    'right': {'expression': {'arguments': [{'left': {'name': {'identifier': 'k'}},
                                                                                                                            'operator': 'MINUS',
                                                                                                                            'right': {'value': '1'}}],
                                                                                                             'name': {'identifier': 'cvc'}},
                                                                                              'operator': 'LOGICAL_COMPLEMENT'}}},
                                                            'thenStmt': {'expression': {'expression': {'name': {'identifier': 'k'}},
                                                                                        'operator': 'POSTFIX_DECREMENT'}}}]}},
                              {'condition': {'left': {'left': {'left': {'index': {'name': {'identifier': 'k'}},
                                                                        'name': {'name': {'identifier': 'b'}}},
                                                               'operator': 'EQUALS',
                                                               'right': {'value': 'l'}},
                                                      'operator': 'AND',
                                                      'right': {'arguments': [{'name': {'identifier': 'k'}}],
                                                                'name': {'identifier': 'doublec'}}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'm'}},
                                                       'operator': 'GREATER',
                                                       'right': {'value': '1'}}},
                               'thenStmt': {'expression': {'expression': {'name': {'identifier': 'k'}},
                                                           'operator': 'POSTFIX_DECREMENT'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'MultiplyExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blocks'},
                                                                                                                                                      {'IdentifierName': 'Count'}]},
                                                                                                                    {'ParenthesizedExpression': [{'ConditionalExpression': [{'NotEqualsExpression': [{'IdentifierName': 'currentBlock'},
                                                                                                                                                                                                     {'NullLiteralExpression': 'null'}]},
                                                                                                                                                                            {'NumericLiteralExpression': '1'},
                                                                                                                                                                            {'NumericLiteralExpression': '0'}]}]}]}]},
                                                                    {'IdentifierName': 'bytesUsedPerBlock'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'BASE_RAM_BYTES_USED'}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'arguments': [{'name': {'identifier': 'blocks'}}],
                                                                                       'name': {'identifier': 'shallowSizeOf'},
                                                                                       'scope': {'name': {'identifier': 'RamUsageEstimator'}}}},
                                                             'name': {'identifier': 'size'},
                                                             'type': {'type': 'LONG'}}]}},
                              {},
                              {'condition': {'left': {'name': {'identifier': 'numBlocks'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'size'}},
                                                                           'value': {'left': {'inner': {'left': {'name': {'identifier': 'numBlocks'}},
                                                                                                        'operator': 'MINUS',
                                                                                                        'right': {'value': '1'}}},
                                                                                     'operator': 'MULTIPLY',
                                                                                     'right': {'name': {'identifier': 'bytesUsedPerBlock'}}}}},
                                                           {'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'size'}},
                                                                           'value': {'arguments': [{'index': {'left': {'name': {'identifier': 'numBlocks'}},
                                                                                                              'operator': 'MINUS',
                                                                                                              'right': {'value': '1'}},
                                                                                                    'name': {'name': {'identifier': 'blocks'}}}],
                                                                                     'name': {'identifier': 'sizeOf'},
                                                                                     'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'currentBlock'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'size'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'currentBlock'}}],
                                                                                     'name': {'identifier': 'sizeOf'},
                                                                                     'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}}]}},
                              {'expression': {'name': {'identifier': 'size'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'SIMPLE'}]}]},
                                                                                                                                                                              {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TestTooManyExpressionsTokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'SIMPLE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'true'}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': 'a'},
                                                                                                                                                           {'value': '0'},
                                                                                                                                                           {'value': '1'}],
                                                                                                                                             'type': {'name': {'identifier': 'Token'}}},
                                                                                                                             'name': {'identifier': 'a'},
                                                                                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                                                                                              {'expression': {'arguments': [{'value': '1'}],
                                                                                                              'name': {'identifier': 'setPositionIncrement'},
                                                                                                              'scope': {'name': {'identifier': 'a'}}}},
                                                                                              {'expression': {'variables': [{'initializer': {'arguments': [{'value': 'b'},
                                                                                                                                                           {'value': '0'},
                                                                                                                                                           {'value': '1'}],
                                                                                                                                             'type': {'name': {'identifier': 'Token'}}},
                                                                                                                             'name': {'identifier': 'b'},
                                                                                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                                                                                              {'expression': {'arguments': [{'value': '0'}],
                                                                                                              'name': {'identifier': 'setPositionIncrement'},
                                                                                                              'scope': {'name': {'identifier': 'b'}}}},
                                                                                              {'expression': {'arguments': [{'elementType': {'name': {'identifier': 'Token'}},
                                                                                                                             'initializer': {'values': [{'name': {'identifier': 'a'}},
                                                                                                                                                        {'name': {'identifier': 'b'}}]},
                                                                                                                             'levels': [{}]}],
                                                                                                              'type': {'name': {'identifier': 'CannedTokenStream'}}}}]},
                                                                      'name': {'identifier': 'getTokenStream'},
                                                                      'type': {'name': {'identifier': 'TokenStream'}}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {},
                                                                      'name': {'identifier': 'setReader'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'reader'},
                                                                                      'type': {'name': {'identifier': 'Reader'}}}],
                                                                      'type': {}}],
                                              'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                            {'IdentifierName': 'UpdateNumericDocValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]},
                                                                                            {'Argument': [{'IdentifierName': 'field'}]},
                                                                                            {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'r'}},
                                                            {'name': {'identifier': 'getConfig'},
                                                             'scope': {'name': {'identifier': 'w'}}}],
                                              'name': {'identifier': 'maybeChangeLiveIndexWriterConfig'},
                                              'scope': {'name': {'identifier': 'LuceneTestCase'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'term'}},
                                                            {'name': {'identifier': 'field'}},
                                                            {'name': {'identifier': 'value'}}],
                                              'name': {'identifier': 'updateNumericDocValue'},
                                              'scope': {'name': {'identifier': 'w'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'other'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'other'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ReaderUtil'},
                                                                                                                                                                                          {'IdentifierName': 'SubIndex'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'm_leafContexts'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AtomicReaderContext'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'm_leafContexts'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'n'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 'doc'},
                                                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'ctx'},
                                                                                                                                                                                        {'IdentifierName': 'DocBase'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'weight'},
                                                                                                        {'IdentifierName': 'Explain'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ctx'}]},
                                                                                        {'Argument': [{'IdentifierName': 'deBasedDoc'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                                           {'name': {'identifier': 'leafContexts'}}],
                                                                             'name': {'identifier': 'subIndex'},
                                                                             'scope': {'name': {'identifier': 'ReaderUtil'}}},
                                                             'name': {'identifier': 'n'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'n'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'leafContexts'}}},
                                                             'name': {'identifier': 'ctx'},
                                                             'type': {'name': {'identifier': 'LeafReaderContext'}}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'doc'}},
                                                                             'operator': 'MINUS',
                                                                             'right': {'name': {'identifier': 'docBase'},
                                                                                       'scope': {'name': {'identifier': 'ctx'}}}},
                                                             'name': {'identifier': 'deBasedDoc'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getLiveDocs'},
                                                                             'scope': {'name': {'identifier': 'reader'},
                                                                                       'scope': {'name': {'identifier': 'ctx'}}}},
                                                             'name': {'identifier': 'liveDocs'},
                                                             'type': {'name': {'identifier': 'Bits'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'liveDocs'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'arguments': [{'name': {'identifier': 'deBasedDoc'}}],
                                                                'name': {'identifier': 'get'},
                                                                'scope': {'name': {'identifier': 'liveDocs'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'value': 'false'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'value': 'Document '},
                                                                                                   'operator': 'PLUS',
                                                                                                   'right': {'name': {'identifier': 'doc'}}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'value': ' '
                                                                                                             'is '
                                                                                                             'deleted'}}],
                                                                           'name': {'identifier': 'noMatch'},
                                                                           'scope': {'name': {'identifier': 'Explanation'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ctx'}},
                                                            {'name': {'identifier': 'deBasedDoc'}}],
                                              'name': {'identifier': 'explain'},
                                              'scope': {'name': {'identifier': 'weight'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StopFilter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StopFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_luceneMatchVersion'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'stopWords'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stopFilter'},
                                                                                                            {'IdentifierName': 'SetEnablePositionIncrements'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'enablePositionIncrements'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'stopFilter'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'input'}},
                                                                                           {'name': {'identifier': 'stopWords'}}],
                                                                             'type': {'name': {'identifier': 'StopFilter'}}},
                                                             'name': {'identifier': 'stopFilter'},
                                                             'type': {'name': {'identifier': 'StopFilter'}}}]}},
                              {'expression': {'name': {'identifier': 'stopFilter'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'boost'},
                                                                                {'NumericLiteralExpression': '1.0f'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'boost'}},
                                              'value': {'value': '1.0f'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'm_maxEdits'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'bottomTerm'},
                                                                                                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                                                                                                       {'ParenthesizedExpression': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'lastTerm'},
                                                                                                                                                                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                                                                                                                                                              {'GreaterThanOrEqualExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termComparer'},
                                                                                                                                                                                                                                                                                                            {'IdentifierName': 'Compare'}]},
                                                                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'lastTerm'}]},
                                                                                                                                                                                                                                                                                            {'Argument': [{'IdentifierName': 'bottomTerm'}]}]}]},
                                                                                                                                                                                                                                                {'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
                       {'WhileStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'm_maxEdits'},
                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                     {'ParenthesizedExpression': [{'ConditionalExpression': [{'IdentifierName': 'termAfter'},
                                                                                                                             {'GreaterThanOrEqualExpression': [{'IdentifierName': 'bottom'},
                                                                                                                                                               {'InvocationExpression': [{'IdentifierName': 'CalculateMaxBoost'},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_maxEdits'}]}]}]}]},
                                                                                                                             {'GreaterThanExpression': [{'IdentifierName': 'bottom'},
                                                                                                                                                        {'InvocationExpression': [{'IdentifierName': 'CalculateMaxBoost'},
                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_maxEdits'}]}]}]}]}]}]}]},
                                           {'Block': [{'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'm_maxEdits'}]}]}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'NotEqualsExpression': [{'IdentifierName': 'oldMaxEdits'},
                                                                                          {'IdentifierName': 'm_maxEdits'}]},
                                                                 {'IdentifierName': 'init'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaxEditDistanceChanged'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'lastTerm'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'm_maxEdits'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'init'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'maxEdits'}},
                                                             'name': {'identifier': 'oldMaxEdits'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'left': {'name': {'identifier': 'bottomTerm'}},
                                                                                      'operator': 'EQUALS',
                                                                                      'right': {}},
                                                                             'operator': 'OR',
                                                                             'right': {'inner': {'left': {'left': {'name': {'identifier': 'lastTerm'}},
                                                                                                          'operator': 'NOT_EQUALS',
                                                                                                          'right': {}},
                                                                                                 'operator': 'AND',
                                                                                                 'right': {'left': {'arguments': [{'name': {'identifier': 'bottomTerm'}}],
                                                                                                                    'name': {'identifier': 'compareTo'},
                                                                                                                    'scope': {'name': {'identifier': 'lastTerm'}}},
                                                                                                           'operator': 'GREATER_EQUALS',
                                                                                                           'right': {'value': '0'}}}}},
                                                             'name': {'identifier': 'termAfter'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'value': '1.0f'},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'inner': {'left': {'expression': {'name': {'identifier': 'maxEdits'}},
                                                                                                                                   'type': {'type': 'FLOAT'}},
                                                                                                                          'operator': 'DIVIDE',
                                                                                                                          'right': {'expression': {'name': {'identifier': 'termLength'}},
                                                                                                                                    'type': {'type': 'FLOAT'}}}}},
                                                                                      'name': {'identifier': 'maxBoost'},
                                                                                      'type': {'type': 'FLOAT'}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'bottom'}},
                                                                               'operator': 'LESS',
                                                                               'right': {'name': {'identifier': 'maxBoost'}}},
                                                                      'operator': 'OR',
                                                                      'right': {'inner': {'left': {'left': {'name': {'identifier': 'bottom'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'name': {'identifier': 'maxBoost'}}},
                                                                                          'operator': 'AND',
                                                                                          'right': {'left': {'name': {'identifier': 'termAfter'}},
                                                                                                    'operator': 'EQUALS',
                                                                                                    'right': {'value': 'false'}}}}},
                                                        'thenStmt': {'statements': [{}]}},
                                                       {'expression': {'expression': {'name': {'identifier': 'maxEdits'}},
                                                                       'operator': 'POSTFIX_DECREMENT'}}]},
                               'condition': {'left': {'name': {'identifier': 'maxEdits'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'oldMaxEdits'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {'name': {'identifier': 'maxEdits'}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'lastTerm'}},
                                                       'operator': 'EQUALS',
                                                       'right': {}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'actualEnum'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'maxEdits'}},
                                                                                                   {'name': {'identifier': 'lastTerm'}}],
                                                                                     'name': {'identifier': 'getAutomatonEnum'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                        'operator': 'POSTFIX_INCREMENT'},
                                              'name': {'name': {'identifier': 'bytes'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'OuterInstance'},
                                                                                                   {'IdentifierName': 'NumThreads'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Threads'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper'},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                             {'Argument': [{'IdentifierName': 'numIter'}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'OuterInstance'},
                                                                                                   {'IdentifierName': 'NumThreads'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Threads'},
                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                         {'IdentifierName': 'Start'}]},
                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'threads'}}},
                                                                       'value': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                         'body': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                                                                                                                                                            'name': {'identifier': 'handle'}}}]},
                                                                                                                                                    'parameter': {'isVarArgs': 'false',
                                                                                                                                                                  'name': {'identifier': 't'},
                                                                                                                                                                  'type': {'name': {'identifier': 'Throwable'}}}}],
                                                                                                                                  'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'Directory'}},
                                                                                                                                                                                                             'levels': [{'dimension': {'name': {'identifier': 'numDirs'}}}]},
                                                                                                                                                                                             'name': {'identifier': 'dirs'},
                                                                                                                                                                                             'type': {'componentType': {'name': {'identifier': 'Directory'}},
                                                                                                                                                                                                      'origin': 'TYPE'}}]}},
                                                                                                                                                              {'body': {'expression': {'operator': 'ASSIGN',
                                                                                                                                                                                       'target': {'index': {'name': {'identifier': 'k'}},
                                                                                                                                                                                                  'name': {'name': {'identifier': 'dirs'}}},
                                                                                                                                                                                       'value': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                                                                                                                                               {'arguments': [{'name': {'identifier': 'addDir'}}],
                                                                                                                                                                                                                'name': {'identifier': 'ramCopyOf'},
                                                                                                                                                                                                                'scope': {'name': {'identifier': 'TestUtil'}}}],
                                                                                                                                                                                                 'type': {'name': {'identifier': 'MockDirectoryWrapper'}}}}},
                                                                                                                                                               'compare': {'left': {'name': {'identifier': 'k'}},
                                                                                                                                                                           'operator': 'LESS',
                                                                                                                                                                           'right': {'name': {'identifier': 'numDirs'}}},
                                                                                                                                                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                                                                                                                                  'name': {'identifier': 'k'},
                                                                                                                                                                                                  'type': {'type': 'INT'}}]}],
                                                                                                                                                               'update': [{'expression': {'name': {'identifier': 'k'}},
                                                                                                                                                                           'operator': 'POSTFIX_INCREMENT'}]},
                                                                                                                                                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'x'}},
                                                                                                                                                                                                                     {'name': {'identifier': 'dirs'}}],
                                                                                                                                                                                                       'name': {'identifier': 'doBody'}}}]},
                                                                                                                                                               'compare': {'left': {'name': {'identifier': 'x'}},
                                                                                                                                                                           'operator': 'LESS',
                                                                                                                                                                           'right': {'name': {'identifier': 'numIter'}}},
                                                                                                                                                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                                                                                                                                  'name': {'identifier': 'x'},
                                                                                                                                                                                                  'type': {'type': 'INT'}}]}],
                                                                                                                                                               'update': [{'expression': {'name': {'identifier': 'x'}},
                                                                                                                                                                           'operator': 'POSTFIX_INCREMENT'}]}]}}]},
                                                                                                         'name': {'identifier': 'run'},
                                                                                                         'type': {}}],
                                                                                 'type': {'name': {'identifier': 'Thread'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numThreads'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'body': {'expression': {'name': {'identifier': 'start'},
                                                       'scope': {'index': {'name': {'identifier': 'i'}},
                                                                 'name': {'name': {'identifier': 'threads'}}}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numThreads'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'SingleVal'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'floatVal'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': 'message'}]}]},
                       {'TryStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'message'},
                                                                                                             {'ElementAccessExpression': [{'IdentifierName': 'ZZ_ERROR_MSG'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'errorCode'}]}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'IndexOutOfRangeException'}]},
                                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'message'},
                                                                                                                              {'ElementAccessExpression': [{'IdentifierName': 'ZZ_ERROR_MSG'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'ZZ_UNKNOWN_ERROR'}]}]}]}]}]}]}]}]},
                       {'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'message'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'message'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'catchClauses': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                         'target': {'name': {'identifier': 'message'}},
                                                                                         'value': {'index': {'name': {'identifier': 'ZZ_UNKNOWN_ERROR'}},
                                                                                                   'name': {'name': {'identifier': 'ZZ_ERROR_MSG'}}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'ArrayIndexOutOfBoundsException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'message'}},
                                                                           'value': {'index': {'name': {'identifier': 'errorCode'}},
                                                                                     'name': {'name': {'identifier': 'ZZ_ERROR_MSG'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'message'}}],
                                              'type': {'name': {'identifier': 'Error'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'QueryDocValues'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'readerContext'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fcontext'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'readerContext'}},
                                                            {'name': {'identifier': 'fcontext'}}],
                                              'type': {'name': {'identifier': 'QueryDocValues'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'NUM_DOCS'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '10000'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'RUN_TIME_MSEC'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1000'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'NUM_DOCS'}},
                                              'value': {'arguments': [{'value': '10000'}],
                                                        'name': {'identifier': 'atLeast'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'RUN_TIME_MSEC'}},
                                              'value': {'arguments': [{'value': '1000'}],
                                                        'name': {'identifier': 'atLeast'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetQuery'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                        {'Argument': [{'CastExpression': [{'IdentifierName': 'Analyzer'},
                                                                                                                          {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                            {'expression': {},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}],
                                              'name': {'identifier': 'getQuery'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BasicStats'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CreateStats'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'DivideExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'NumericLiteralExpression': '0.0f'},
                                                                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                                                                      {'IdentifierName': 'NumberOfDocuments'}]}]}]},
                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                      {'IdentifierName': 'DocFreq'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                  {'IdentifierName': 'TotalTermFreq'}]},
                                                                                {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                    {'ParenthesizedExpression': [{'MultiplyExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                           {'IdentifierName': 'TotalTermFreq'}]},
                                                                                                                                                         {'IdentifierName': 'mult'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                  {'IdentifierName': 'DocFreq'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                  {'IdentifierName': 'NumberOfDocuments'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'UnitTestCore'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'stats'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FREQ'}]},
                                                                                            {'Argument': [{'IdentifierName': 'DOC_LEN'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'createStats'}},
                                                             'name': {'identifier': 'stats'},
                                                             'type': {'name': {'identifier': 'BasicStats'}}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'inner': {'left': {'value': '0.0f'},
                                                                                                'operator': 'PLUS',
                                                                                                'right': {'name': {'identifier': 'getNumberOfDocuments'},
                                                                                                          'scope': {'name': {'identifier': 'stats'}}}}},
                                                                             'operator': 'DIVIDE',
                                                                             'right': {'name': {'identifier': 'getDocFreq'},
                                                                                       'scope': {'name': {'identifier': 'stats'}}}},
                                                             'name': {'identifier': 'mult'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'expression': {'arguments': [{'expression': {'inner': {'left': {'name': {'identifier': 'getTotalTermFreq'},
                                                                                               'scope': {'name': {'identifier': 'stats'}}},
                                                                                      'operator': 'MULTIPLY',
                                                                                      'right': {'name': {'identifier': 'mult'}}}},
                                                             'type': {'type': 'INT'}}],
                                              'name': {'identifier': 'setTotalTermFreq'},
                                              'scope': {'name': {'identifier': 'stats'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getNumberOfDocuments'},
                                                             'scope': {'name': {'identifier': 'stats'}}}],
                                              'name': {'identifier': 'setDocFreq'},
                                              'scope': {'name': {'identifier': 'stats'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stats'}},
                                                            {'name': {'identifier': 'FREQ'}},
                                                            {'name': {'identifier': 'DOC_LEN'}}],
                                              'name': {'identifier': 'unitTestCore'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Directory'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewDirectory'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'UsingStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                    {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexWriter'},
                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                                                                   {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexWriterConfig'},
                                                                                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                                                                                                                                 {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]}]},
                                           {'Block': []}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SearcherManager'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'SearcherManager'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                                                                              {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sm'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sm'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'newDirectory'}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'Directory'}}}]}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                      {'arguments': [{}],
                                                                       'type': {'name': {'identifier': 'IndexWriterConfig'}}}],
                                                        'type': {'name': {'identifier': 'IndexWriter'}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                           {}],
                                                                             'type': {'name': {'identifier': 'SearcherManager'}}},
                                                             'name': {'identifier': 'sm'},
                                                             'type': {'name': {'identifier': 'SearcherManager'}}}]}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'sm'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'sm'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'stalled'},
                                        {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                                                      {'Block': [{'IfStatement': [{'IdentifierName': 'stalled'},
                                                                                                  {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                                                                                                                     {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'IncWaiters'},
                                                                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]},
                                                                                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                                                                  {'IdentifierName': 'Assert'}]},
                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                                                                                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Monitor'},
                                                                                                                                                                                                  {'IdentifierName': 'Wait'}]},
                                                                                                                                                                {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]},
                                                                                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                                                                                      {'InvocationExpression': [{'IdentifierName': 'DecrWaiters'},
                                                                                                                                                                                                {'ArgumentList': '()'}]}]}]},
                                                                                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                                                                  {'IdentifierName': 'Assert'}]},
                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'result'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'stalled'}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'condition': {'name': {'identifier': 'stalled'}},
                                                                                     'thenStmt': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                                                                                                            'type': {'name': {'identifier': 'ThreadInterruptedException'}}}}]},
                                                                                                                                    'parameter': {'isVarArgs': 'false',
                                                                                                                                                  'name': {'identifier': 'e'},
                                                                                                                                                  'type': {'name': {'identifier': 'InterruptedException'}}}}],
                                                                                                                  'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'incWaiters'}}},
                                                                                                                                              {'expression': {'arguments': [{'value': '1000'}],
                                                                                                                                                              'name': {'identifier': 'wait'}}},
                                                                                                                                              {'expression': {'name': {'identifier': 'decrWaiters'}}}]}}]}}]},
                                                            'expression': {}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'doTestExactScore'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'INT_VALUESOURCE'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'INT_VALUESOURCE'}}],
                                              'name': {'identifier': 'doTestExactScore'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'doTestReadRecreatedTaxonomy'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'doTestReadRecreatedTaxonomy'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'MultiplyExpression': [{'NumericLiteralExpression': '4'},
                                                                                                                                                                                                                          {'IdentifierName': 'Depth'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'c'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'c'},
                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                  {'CharacterLiteralExpression': "' "
                                                                                                                                 "'"}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'PredefinedType': 'string'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'CHAR'},
                                                                             'levels': [{'dimension': {'left': {'value': '4'},
                                                                                                       'operator': 'MULTIPLY',
                                                                                                       'right': {'name': {'identifier': 'getDepth'}}}}]},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'componentType': {'type': 'CHAR'},
                                                                      'origin': 'NAME'}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                  'name': {'name': {'identifier': 'c'}}},
                                                       'value': {'value': ' '}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'c'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'arguments': [{'name': {'identifier': 'c'}}],
                                              'type': {'name': {'identifier': 'String'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'CzechStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'CzechStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_p2'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_p2'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_p1'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_p1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_pV'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_pV'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'CopyFrom'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'other'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_p2'}},
                                              'value': {'name': {'identifier': 'I_p2'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_p1'}},
                                              'value': {'name': {'identifier': 'I_p1'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_pV'}},
                                              'value': {'name': {'identifier': 'I_pV'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'other'}}],
                                              'name': {'identifier': 'copy_from'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'didRefresh'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'afterRefreshCalled'},
                                                                                                                                        {'IdentifierName': 'Set'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'didRefresh'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'true'}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'afterRefreshCalled'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pluralStep'},
                                                                                                        {'IdentifierName': 'Apply'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                        {'Argument': [{'IdentifierName': 'len'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}},
                                                            {'name': {'identifier': 'len'}}],
                                              'name': {'identifier': 'apply'},
                                              'scope': {'name': {'identifier': 'pluralStep'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                        {'IdentifierName': 'ExplainScore'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                        {'Argument': [{'IdentifierName': 'freq'}]},
                                                                                        {'Argument': [{'IdentifierName': 'stats'}]},
                                                                                        {'Argument': [{'IdentifierName': 'norms'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'explainConstantFactors'}}],
                                                                             'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'subs'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Explanation'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'freq'}},
                                                                                           {'name': {'identifier': 'encodedNorm'}}],
                                                                             'name': {'identifier': 'explainTF'}},
                                                             'name': {'identifier': 'tfExpl'},
                                                             'type': {'name': {'identifier': 'Explanation'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tfExpl'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'subs'}}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'weight'}},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'floatValue'},
                                                                       'scope': {'name': {'identifier': 'getValue'},
                                                                                 'scope': {'name': {'identifier': 'tfExpl'}}}}},
                                                            {'left': {'left': {'value': 'score(freq='},
                                                                      'operator': 'PLUS',
                                                                      'right': {'name': {'identifier': 'getValue'},
                                                                                'scope': {'name': {'identifier': 'freq'}}}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '), '
                                                                                'product '
                                                                                'of:'}},
                                                            {'name': {'identifier': 'subs'}}],
                                              'name': {'identifier': 'match'},
                                              'scope': {'name': {'identifier': 'Explanation'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'IsLocked'}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'files'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DeleteFile'},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'file'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'name': {'identifier': 'locked'}}},
                              {'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'condition': {'arguments': [{'value': 'IFD'}],
                                             'name': {'identifier': 'isEnabled'},
                                             'scope': {'name': {'identifier': 'infoStream'}}},
                               'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'},
                                                                                   'scope': {'name': {'identifier': 'names'}}},
                                                                          'operator': 'GREATER',
                                                                          'right': {'value': '0'}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'IFD'},
                                                                                                                      {'left': {'left': {'value': 'delete '},
                                                                                                                                'operator': 'PLUS',
                                                                                                                                'right': {'name': {'identifier': 'names'}}},
                                                                                                                       'operator': 'PLUS',
                                                                                                                       'right': {'value': ''}}],
                                                                                                        'name': {'identifier': 'message'},
                                                                                                        'scope': {'name': {'identifier': 'infoStream'}}}}]}}]}},
                              {'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'SEGMENTS'},
                                                                                              'scope': {'name': {'identifier': 'IndexFileNames'}}}],
                                                                               'name': {'identifier': 'startsWith'},
                                                                               'scope': {'name': {'identifier': 'name'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'value': 'false'}},
                                                        'thenStmt': {'statements': [{}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                       'name': {'identifier': 'deleteFile'}}}]},
                               'iterable': {'name': {'identifier': 'names'}},
                               'variable': {'variables': [{'name': {'identifier': 'name'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'SEGMENTS'},
                                                                                              'scope': {'name': {'identifier': 'IndexFileNames'}}}],
                                                                               'name': {'identifier': 'startsWith'},
                                                                               'scope': {'name': {'identifier': 'name'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'value': 'true'}},
                                                        'thenStmt': {'statements': [{}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                       'name': {'identifier': 'deleteFile'}}}]},
                               'iterable': {'name': {'identifier': 'names'}},
                               'variable': {'variables': [{'name': {'identifier': 'name'},
                                                           'type': {'name': {'identifier': 'String'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'offset'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                   {'IdentifierName': 'l'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'DoStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'j'}]}]}]}]},
                                                                                                                                           {'IdentifierName': 'value'}]}]}]},
                                                                       {'GreaterThanExpression': [{'PreDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'j'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'}},
                                                             'name': {'identifier': 'j'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'packed'}}},
                                                             'name': {'identifier': 'l'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'value'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'body': {'expression': {'operator': 'ASSIGN',
                                                                                'target': {'index': {'expression': {'name': {'identifier': 'j'}},
                                                                                                     'operator': 'POSTFIX_INCREMENT'},
                                                                                           'name': {'name': {'identifier': 'result'}}},
                                                                                'value': {'name': {'identifier': 'value'}}}},
                                                        'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                                               'operator': 'PREFIX_DECREMENT'},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}}}]},
                               'condition': {'left': {'name': {'identifier': 'i'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'l'}}}},
                              {'expression': {'name': {'identifier': 'j'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'finalState'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RestoreState'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'finalState'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'finalState'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'finalState'}}],
                                                                           'name': {'identifier': 'restoreState'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Term'}]},
                                                                                {'IdentifierName': 'term'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'term'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'term'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                {'ParenthesizedExpression': [{'AddExpression': [{'NumericLiteralExpression': '0x30'},
                                                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                                                                            {'IdentifierName': 'Next'}]},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '10'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'inner': {'left': {'value': '0x30'},
                                                                       'operator': 'PLUS',
                                                                       'right': {'arguments': [{'value': '10'}],
                                                                                 'name': {'identifier': 'nextInt'},
                                                                                 'scope': {'name': {'identifier': 'random'}}}}},
                                              'type': {'type': 'CHAR'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'TokenFilterFactory'},
                                                                {'InvocationExpression': [{'IdentifierName': 'AnalysisFactory'},
                                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Lucene'},
                                                                                                                                                                                                                                                                                                                              {'IdentifierName': 'Net'}]},
                                                                                                                                                                                                                                                                                            {'IdentifierName': 'Analysis'}]},
                                                                                                                                                                                                                                                          {'IdentifierName': 'Util'}]},
                                                                                                                                                                                                                        {'IdentifierName': 'TokenFilterFactory'}]},
                                                                                                                                                                                      {'IdentifierName': 'LookupClass'}]},
                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]},
                                                                                                            {'Argument': [{'IdentifierName': 'matchVersion'}]},
                                                                                                            {'Argument': [{'IdentifierName': 'loader'}]},
                                                                                                            {'Argument': [{'IdentifierName': 'keysAndValues'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'name'}}],
                                                                            'name': {'identifier': 'lookupClass'},
                                                                            'scope': {'name': {'identifier': 'TokenFilterFactory'}}},
                                                                           {'name': {'identifier': 'matchVersion'}},
                                                                           {'name': {'identifier': 'loader'}},
                                                                           {'name': {'identifier': 'keysAndValues'}}],
                                                             'name': {'identifier': 'analysisFactory'}},
                                              'type': {'name': {'identifier': 'TokenFilterFactory'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                          {'IdentifierName': 'Next'}]},
                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '5'}]}]}]},
                                                              {'NumericLiteralExpression': '3'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                        {'IdentifierName': 'UpdateDocuments'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]},
                                                                                                                        {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'IterableAnonymousInnerClassHelper2'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                                        {'IdentifierName': 'UpdateDocument'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaybeCommit'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'r'}},
                                                            {'name': {'identifier': 'getConfig'},
                                                             'scope': {'name': {'identifier': 'w'}}}],
                                              'name': {'identifier': 'maybeChangeLiveIndexWriterConfig'},
                                              'scope': {'name': {'identifier': 'LuceneTestCase'}}}},
                              {'expression': {'variables': [{'name': {'identifier': 'seqNo'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'arguments': [{'value': '5'}],
                                                      'name': {'identifier': 'nextInt'},
                                                      'scope': {'name': {'identifier': 'r'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '3'}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'seqNo'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 't'}},
                                                                                                   {'name': {'identifier': 'doc'}}],
                                                                                     'name': {'identifier': 'updateDocument'},
                                                                                     'scope': {'name': {'identifier': 'w'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'seqNo'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 't'}},
                                                                                                   {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                            'body': {'statements': [{'expression': {'anonymousClassBody': [{'variables': [{'name': {'identifier': 'done'},
                                                                                                                                                                                                           'type': {'type': 'BOOLEAN'}}]},
                                                                                                                                                                                           {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                                                                            'body': {'statements': [{'expression': {'expression': {'name': {'identifier': 'done'}},
                                                                                                                                                                                                                                    'operator': 'LOGICAL_COMPLEMENT'}}]},
                                                                                                                                                                                            'name': {'identifier': 'hasNext'},
                                                                                                                                                                                            'type': {'type': 'BOOLEAN'}},
                                                                                                                                                                                           {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                                                                            'body': {'statements': [{'expression': {'type': {'name': {'identifier': 'UnsupportedOperationException'}}}}]},
                                                                                                                                                                                            'name': {'identifier': 'remove'},
                                                                                                                                                                                            'type': {}},
                                                                                                                                                                                           {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                                                                            'body': {'statements': [{'condition': {'name': {'identifier': 'done'}},
                                                                                                                                                                                                                     'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'IllegalStateException'}}}}]}},
                                                                                                                                                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                                                                                                                                                    'target': {'name': {'identifier': 'done'}},
                                                                                                                                                                                                                                    'value': {'value': 'true'}}},
                                                                                                                                                                                                                    {'expression': {'name': {'identifier': 'doc'}}}]},
                                                                                                                                                                                            'name': {'identifier': 'next'},
                                                                                                                                                                                            'type': {'name': {'identifier': 'Iterable'},
                                                                                                                                                                                                     'typeArguments': [{'name': {'identifier': 'T'}}]}}],
                                                                                                                                                                    'type': {'name': {'identifier': 'Iterator'},
                                                                                                                                                                             'typeArguments': [{'name': {'identifier': 'Iterable'},
                                                                                                                                                                                                'typeArguments': [{'name': {'identifier': 'T'}}]}]}}}]},
                                                                                                                            'name': {'identifier': 'iterator'},
                                                                                                                            'type': {'name': {'identifier': 'Iterator'},
                                                                                                                                     'typeArguments': [{'name': {'identifier': 'Iterable'},
                                                                                                                                                        'typeArguments': [{'name': {'identifier': 'T'}}]}]}}],
                                                                                                    'type': {'name': {'identifier': 'Iterable'},
                                                                                                             'typeArguments': [{'name': {'identifier': 'Iterable'},
                                                                                                                                'typeArguments': [{'name': {'identifier': 'T'}}]}]}}],
                                                                                     'name': {'identifier': 'updateDocuments'},
                                                                                     'scope': {'name': {'identifier': 'w'}}}}}]}},
                              {'expression': {'name': {'identifier': 'maybeFlushOrCommit'}}},
                              {'expression': {'name': {'identifier': 'seqNo'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'aborted'},
                                                                                                              {'TrueLiteralExpression': 'true'}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Monitor'},
                                                                                                                                          {'IdentifierName': 'PulseAll'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'aborted'}},
                                              'value': {'value': 'true'}}},
                              {'expression': {'name': {'identifier': 'wakeup'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frame'},
                                                                                                                                                    {'IdentifierName': 'fstArc'}]},
                                                                                                                  {'IdentifierName': 'Output'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'fstOutputs'},
                                                                                                                  {'IdentifierName': 'NoOutput'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frame'},
                                                                                                                                                    {'IdentifierName': 'fstArc'}]},
                                                                                                                  {'IdentifierName': 'NextFinalOutput'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'fstOutputs'},
                                                                                                                  {'IdentifierName': 'NoOutput'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frame'},
                                                                                                                  {'IdentifierName': 'fsaState'}]},
                                                                                {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'frame'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'output'},
                                                         'scope': {'name': {'identifier': 'fstArc'},
                                                                   'scope': {'name': {'identifier': 'frame'}}}},
                                              'value': {'name': {'identifier': 'getNoOutput'},
                                                        'scope': {'name': {'identifier': 'fstOutputs'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'nextFinalOutput'},
                                                         'scope': {'name': {'identifier': 'fstArc'},
                                                                   'scope': {'name': {'identifier': 'frame'}}}},
                                              'value': {'name': {'identifier': 'getNoOutput'},
                                                        'scope': {'name': {'identifier': 'fstOutputs'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'fsaState'},
                                                         'scope': {'name': {'identifier': 'frame'}}},
                                              'value': {'expression': {'value': '1'},
                                                        'operator': 'MINUS'}}},
                              {'expression': {'name': {'identifier': 'frame'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TriggerOn'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SorePoint'},
                                                                                                                                            {'IdentifierName': 'RULE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@base'},
                                                                                                            {'IdentifierName': 'evaluate'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'RULE'},
                                                             'scope': {'name': {'identifier': 'SorePoint'}}}],
                                              'name': {'identifier': 'triggerOn'}}},
                              {'expression': {'name': {'identifier': 'evaluate'},
                                              'scope': {'name': {'identifier': 'base'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'IdentifierName': '_lock'},
                                          {'Block': [{'IfStatement': [{'IdentifierName': 'AtMax'},
                                                                      {'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TooManyBasicQueries'},
                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'MaxBasicQueries'}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'queriesMade'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'atMax'}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'getMaxBasicQueries'}}],
                                                           'type': {'name': {'identifier': 'TooManyBasicQueries'}}}}},
                              {'expression': {'expression': {'name': {'identifier': 'queriesMade'}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'builders'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'nodeName'}]}]}]},
                                                                                {'IdentifierName': 'builder'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'nodeName'}},
                                                            {'name': {'identifier': 'builder'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'builders'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'fields'},
                                             {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'relevantField'},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'relevantFields'},
                                                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'relevantField'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'relevantFields'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashSet'}}},
                                                             'name': {'identifier': 'relevantFields'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'relevantField'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'relevantField'}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'relevantFields'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'fields'}},
                               'variable': {'variables': [{'name': {'identifier': 'relevantField'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'name': {'identifier': 'relevantFields'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Failures_Renamed'},
                                                                                                            {'IdentifierName': 'Set'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'set'},
                                              'scope': {'name': {'identifier': 'failures'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RegExp'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RegExp'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'kind'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Kind'},
                                                                                                                  {'IdentifierName': 'REGEXP_OPTIONAL'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'exp1'}]},
                                                                                {'IdentifierName': 'exp'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'r'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'RegExp'}}},
                                                             'name': {'identifier': 'r'},
                                                             'type': {'name': {'identifier': 'RegExp'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'kind'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'REGEXP_OPTIONAL'},
                                                        'scope': {'name': {'identifier': 'Kind'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'exp1'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'exp'}}}},
                              {'expression': {'name': {'identifier': 'r'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'qpAnalyzer'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'AfterClass'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'qpAnalyzer'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'first'},
                                                                                                                                {'IdentifierName': 'NO_OUTPUT'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'second'},
                                                                                                                                {'IdentifierName': 'NO_OUTPUT'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'NO_OUTPUT'}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'first'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'NO_OUTPUT'}}}},
                              {'check': {'left': {'name': {'identifier': 'second'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'NO_OUTPUT'}}}},
                              {'expression': {'name': {'identifier': 'NO_OUTPUT'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                        {'IdentifierName': 'Func'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                        {'Argument': [{'IdentifierName': 'vals'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}},
                                                            {'name': {'identifier': 'vals'}}],
                                              'name': {'identifier': 'func'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'MultiplyExpression': [{'NumericLiteralExpression': '2'},
                                                                                                                                                                         {'IdentifierName': 'n'}]},
                                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                                                              {'IdentifierName': 'Pow'}]},
                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                                                                                                                              {'Argument': [{'AddExpression': [{'IdentifierName': 'k'},
                                                                                                                                                                                                                               {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'limit'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Convert'},
                                                                                                                                                                                                                       {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]},
                                                                                                                                                                                                       {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertLev'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'encoded'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'n'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'left': {'value': '2'},
                                                                                      'operator': 'MULTIPLY',
                                                                                      'right': {'name': {'identifier': 'n'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'value': '1'}},
                                                             'name': {'identifier': 'k'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'value': '2'},
                                                                                                          {'left': {'name': {'identifier': 'k'}},
                                                                                                           'operator': 'PLUS',
                                                                                                           'right': {'value': '2'}}],
                                                                                            'name': {'identifier': 'pow'},
                                                                                            'scope': {'name': {'identifier': 'Math'}}},
                                                                             'type': {'type': 'INT'}},
                                                             'name': {'identifier': 'limit'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}},
                                                                                                                    {'value': '2'}],
                                                                                                      'name': {'identifier': 'toString'},
                                                                                                      'scope': {'name': {'identifier': 'Integer'}}},
                                                                                      'name': {'identifier': 'encoded'},
                                                                                      'type': {'name': {'identifier': 'String'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'encoded'}},
                                                                                     {'name': {'identifier': 'n'}}],
                                                                       'name': {'identifier': 'assertLev'}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'limit'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GreekStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'GreekStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAtt'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                        {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                    {'IdentifierName': 'Stem'}]},
                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAtt'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                                     {'name': {'identifier': 'length'},
                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                                       'name': {'identifier': 'stem'},
                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}}],
                                                                                        'name': {'identifier': 'setLength'},
                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaybeYield'},
                                                                                                        {'ArgumentList': '()'}]}]},
                                                     {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                      {'IdentifierName': 'FileLength'}]},
                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'maybeYield'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                              'name': {'identifier': 'fileLength'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldState'},
                                                                                                                                      {'IdentifierName': 'AttributeSource'}]},
                                                                                                    {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IPayloadAttribute'}]}]}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'payloadAttribute'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldState'},
                                                                                                                                                                                                          {'IdentifierName': 'AttributeSource'}]},
                                                                                                                                                                        {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IPayloadAttribute'}]}]}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'payloadAttribute'},
                                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'IfStatement': [{'IdentifierName': 'hasOffsets'},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'offsetAttribute'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldState'},
                                                                                                                                                                                                          {'IdentifierName': 'AttributeSource'}]},
                                                                                                                                                                        {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IOffsetAttribute'}]}]}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'offsetAttribute'},
                                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'f'}},
                                                            {'name': {'identifier': 'first'}}],
                                              'name': {'identifier': 'start'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'payloadAttribute'}},
                                              'value': {'name': {'identifier': 'payloadAttribute'},
                                                        'scope': {'name': {'identifier': 'fieldState'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'offsetAttribute'}},
                                              'value': {'name': {'identifier': 'offsetAttribute'},
                                                        'scope': {'name': {'identifier': 'fieldState'}}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'o'},
                                                                                                                 {'IdentifierName': 'TermQuery'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TermQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'TermQuery'},
                                                                                                                                                  {'IdentifierName': 'o'}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                           {'IdentifierName': 'Boost'}]},
                                                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                           {'IdentifierName': 'Boost'}]}]}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                    {'IdentifierName': 'term'}]},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                  {'IdentifierName': 'term'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'other'}}],
                                                       'name': {'identifier': 'sameClassAs'}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'name': {'identifier': 'term'},
                                                                       'scope': {'inner': {'expression': {'name': {'identifier': 'other'}},
                                                                                           'type': {'name': {'identifier': 'TermQuery'}}}}}],
                                                        'name': {'identifier': 'equals'},
                                                        'scope': {'name': {'identifier': 'term'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'baseQuery'}]}]}]}]},
                       {'WhileStatement': [{'TrueLiteralExpression': 'true'},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'newQuery'},
                                                                                                                                                                                                                         {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                                                      {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'rewrittenQuery'},
                                                                                             {'IdentifierName': 'newQuery'}]},
                                                                       {'Block': [{'BreakStatement': 'break;'}]}]},
                                                      {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'newQuery'},
                                                                                                               {'IdentifierName': 'rewrittenQuery'}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'newQuery'},
                                                              {'IdentifierName': 'baseQuery'}]},
                                        {'Block': [{'ReturnStatement': [{'ThisExpression': 'this'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DrillSidewaysQuery'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'newQuery'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'drillDownCollector'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'drillSidewaysCollectors'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'drillDownQueries'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'scoreSubDocsAtOnce'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'baseQuery'}},
                                                             'name': {'identifier': 'newQuery'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                                                      'name': {'identifier': 'rewrite'},
                                                                                                      'scope': {'name': {'identifier': 'newQuery'}}},
                                                                                      'name': {'identifier': 'rewrittenQuery'},
                                                                                      'type': {'name': {'identifier': 'Query'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'rewrittenQuery'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'newQuery'}}},
                                                        'thenStmt': {'statements': [{}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'newQuery'}},
                                                                       'value': {'name': {'identifier': 'rewrittenQuery'}}}}]},
                               'condition': {'value': 'true'}},
                              {'condition': {'left': {'name': {'identifier': 'newQuery'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'baseQuery'}}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'newQuery'}},
                                                                                         {'name': {'identifier': 'drillDownCollector'}},
                                                                                         {'name': {'identifier': 'drillSidewaysCollectors'}},
                                                                                         {'name': {'identifier': 'drillDownQueries'}},
                                                                                         {'name': {'identifier': 'scoreSubDocsAtOnce'}}],
                                                                           'type': {'name': {'identifier': 'DrillSidewaysQuery'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                           'name': {'identifier': 'rewrite'},
                                                                           'scope': {}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                              {'IdentifierName': 'factory'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'factory'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'target'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'term_Renamed'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                        {'IdentifierName': 'CopyFrom'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'otherState'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'term_Renamed'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                                        {'IdentifierName': 'DeepCopyOf'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'target'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'seekPending'},
                                                                                                            {'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'term'}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {'name': {'identifier': 'target'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'otherState'}}],
                                                                           'name': {'identifier': 'copyFrom'},
                                                                           'scope': {'name': {'identifier': 'state'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'term'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'target'}}],
                                                                                     'name': {'identifier': 'deepCopyOf'},
                                                                                     'scope': {'name': {'identifier': 'BytesRef'}}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'seekPending'}},
                                                                           'value': {'value': 'true'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                        {'IdentifierName': 'Substring'}]},
                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                        {'Argument': [{'SubtractExpression': [{'ParenthesizedExpression': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                                                                     {'IdentifierName': 'Length'}]},
                                                                                                                                                                                   {'NumericLiteralExpression': '1'}]}]},
                                                                                                                              {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '1'},
                                                            {'left': {'name': {'identifier': 'length'},
                                                                      'scope': {'name': {'identifier': 's'}}},
                                                             'operator': 'MINUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'substring'},
                                              'scope': {'name': {'identifier': 's'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReflectWith'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilderAttributeReflector'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'buffer'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'prependAttClass'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'buffer'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'expression': {'arguments': [{'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                                                                             'scope': {'name': {'identifier': 'buffer'}}},
                                                                                                    'operator': 'GREATER',
                                                                                                    'right': {'value': '0'}},
                                                                                      'thenStmt': {'statements': [{'expression': {'arguments': [{'value': ','}],
                                                                                                                                  'name': {'identifier': 'append'},
                                                                                                                                  'scope': {'name': {'identifier': 'buffer'}}}}]}},
                                                                                     {'condition': {'name': {'identifier': 'prependAttClass'}},
                                                                                      'thenStmt': {'statements': [{'expression': {'arguments': [{'value': '#'}],
                                                                                                                                  'name': {'identifier': 'append'},
                                                                                                                                  'scope': {'arguments': [{'name': {'identifier': 'getName'},
                                                                                                                                                           'scope': {'name': {'identifier': 'attClass'}}}],
                                                                                                                                            'name': {'identifier': 'append'},
                                                                                                                                            'scope': {'name': {'identifier': 'buffer'}}}}}]}},
                                                                                     {'expression': {'arguments': [{'condition': {'inner': {'left': {'name': {'identifier': 'value'}},
                                                                                                                                            'operator': 'EQUALS',
                                                                                                                                            'right': {}}},
                                                                                                                    'elseExpr': {'name': {'identifier': 'value'}},
                                                                                                                    'thenExpr': {'value': 'null'}}],
                                                                                                     'name': {'identifier': 'append'},
                                                                                                     'scope': {'arguments': [{'value': '='}],
                                                                                                               'name': {'identifier': 'append'},
                                                                                                               'scope': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                                                                         'name': {'identifier': 'append'},
                                                                                                                         'scope': {'name': {'identifier': 'buffer'}}}}}}]},
                                                             'isEnclosingParameters': 'true',
                                                             'parameters': [{'isVarArgs': 'false',
                                                                             'name': {'identifier': 'attClass'},
                                                                             'type': {}},
                                                                            {'isVarArgs': 'false',
                                                                             'name': {'identifier': 'key'},
                                                                             'type': {}},
                                                                            {'isVarArgs': 'false',
                                                                             'name': {'identifier': 'value'},
                                                                             'type': {}}]}],
                                              'name': {'identifier': 'reflectWith'}}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'buffer'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                  {'IdentifierName': 'bytes'}]},
                                                                                                {'IdentifierName': 'Length'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'FillBuffer'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'PreDecrementExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                {'IdentifierName': 'bytes'}]},
                                                                                                              {'IdentifierName': 'Length'}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'byte'},
                                                                {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                 {'IdentifierName': 'bytes'}]},
                                                                                                                               {'IdentifierName': 'Bytes'}]},
                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                                       {'IdentifierName': 'bytes'}]},
                                                                                                                                                                                                     {'IdentifierName': 'Offset'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'bytes'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'fillBuffer'}}}]}},
                              {'expression': {'expression': {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'bytes'}}},
                                              'operator': 'PREFIX_DECREMENT'}},
                              {'expression': {'index': {'expression': {'name': {'identifier': 'offset'},
                                                                       'scope': {'name': {'identifier': 'bytes'}}},
                                                        'operator': 'POSTFIX_INCREMENT'},
                                              'name': {'name': {'identifier': 'bytes'},
                                                       'scope': {'name': {'identifier': 'bytes'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Current'},
                                                                                                                             {'IdentifierName': 'Payloads'}]},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'NotEqualsExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Current'},
                                                                                                                                                          {'IdentifierName': 'Payloads'}]},
                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'PosUpto'},
                                                                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                      {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Current'},
                                                                                                                                                                                                     {'IdentifierName': 'Payloads'}]},
                                                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'PosUpto'},
                                                                                                                                                                                                                                    {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'payloads'},
                                                               'scope': {'name': {'identifier': 'current'}}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'index': {'left': {'name': {'identifier': 'posUpto'}},
                                                                          'operator': 'MINUS',
                                                                          'right': {'value': '1'}},
                                                                'name': {'name': {'identifier': 'payloads'},
                                                                         'scope': {'name': {'identifier': 'current'}}}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}}},
                               'elseStmt': {'statements': [{'expression': {}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'index': {'left': {'name': {'identifier': 'posUpto'}},
                                                                                                    'operator': 'MINUS',
                                                                                                    'right': {'value': '1'}},
                                                                                          'name': {'name': {'identifier': 'payloads'},
                                                                                                   'scope': {'name': {'identifier': 'current'}}}}],
                                                                           'type': {'name': {'identifier': 'BytesRef'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'bytes'}]},
                                                                                {'IdentifierName': 'bytes'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'pos'},
                                                                                {'IdentifierName': 'offset'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'limit'},
                                                                                {'AddExpression': [{'IdentifierName': 'offset'},
                                                                                                   {'IdentifierName': 'len'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bytes'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'bytes'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'pos'}},
                                              'value': {'name': {'identifier': 'offset'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'limit'}},
                                              'value': {'left': {'name': {'identifier': 'offset'}},
                                                        'operator': 'PLUS',
                                                        'right': {'name': {'identifier': 'len'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_2'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'JjStopStringLiteralDfa_2'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'active0'}]}]}]}]},
                                                                                        {'Argument': [{'AddExpression': [{'IdentifierName': 'pos'},
                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pos'}},
                                                                           {'name': {'identifier': 'active0'}}],
                                                             'name': {'identifier': 'jjStopStringLiteralDfa_2'}},
                                                            {'left': {'name': {'identifier': 'pos'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'jjMoveNfa_2'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjMoveNfa_1'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'JjStopStringLiteralDfa_1'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'active0'}]}]}]}]},
                                                                                        {'Argument': [{'AddExpression': [{'IdentifierName': 'pos'},
                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pos'}},
                                                                           {'name': {'identifier': 'active0'}}],
                                                             'name': {'identifier': 'jjStopStringLiteralDfa_1'}},
                                                            {'left': {'name': {'identifier': 'pos'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'jjMoveNfa_1'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastConcatCount'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'concatenation'},
                                                                                                                  {'IdentifierName': 'subwordCount'}]}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'concatenation'},
                                                                                                                            {'IdentifierName': 'subwordCount'}]},
                                                                                          {'NumericLiteralExpression': '1'}]},
                                                                 {'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'ShouldGenerateParts'},
                                                                                                                     {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'concatenation'},
                                                                                                                                                                                       {'IdentifierName': 'type'}]}]}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'concatenation'},
                                                                                                                                        {'IdentifierName': 'WriteAndClear'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'concatenation'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastConcatCount'}},
                                              'value': {'name': {'identifier': 'subwordCount'},
                                                        'scope': {'name': {'identifier': 'concatenation'}}}}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'subwordCount'},
                                                               'scope': {'name': {'identifier': 'concatenation'}}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {'value': '1'}},
                                             'operator': 'OR',
                                             'right': {'expression': {'arguments': [{'name': {'identifier': 'type'},
                                                                                     'scope': {'name': {'identifier': 'concatenation'}}}],
                                                                      'name': {'identifier': 'shouldGenerateParts'}},
                                                       'operator': 'LOGICAL_COMPLEMENT'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'writeAndClear'},
                                                                           'scope': {'name': {'identifier': 'concatenation'}}}},
                                                           {'expression': {'value': 'true'}}]}},
                              {'expression': {'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'concatenation'}}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BooleanQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'disableCoord'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'type': {'name': {'identifier': 'Builder'},
                                                       'scope': {'name': {'identifier': 'BooleanQuery'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzer'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'random'}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'wildcardPattern'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'SwitchStatement': [{'ElementAccessExpression': [{'IdentifierName': 'wildcardPattern'},
                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                         {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'N'"}]},
                                                                                            {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                                                                                                 {'IdentifierName': 'Append'}]},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'N'},
                                                                                                                                                                                                         {'ArgumentList': '()'}]}]}]}]}]},
                                                                                            {'BreakStatement': 'break;'}]},
                                                                         {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                                                            {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                                                                                                 {'IdentifierName': 'Append'}]},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'wildcardPattern'},
                                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                                                            {'BreakStatement': 'break;'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'sb'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'statements': [{'entries': [{'label': {'value': 'N'},
                                                                     'statements': [{'expression': {'arguments': [{'name': {'identifier': 'N'}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'sb'}}}},
                                                                                    {}]},
                                                                    {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                   'name': {'identifier': 'charAt'},
                                                                                                                   'scope': {'name': {'identifier': 'wildcardPattern'}}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'sb'}}}}]}],
                                                        'selector': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                     'name': {'identifier': 'charAt'},
                                                                     'scope': {'name': {'identifier': 'wildcardPattern'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'wildcardPattern'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'sb'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'MultiplyExpression': [{'IdentifierName': 'mbits'},
                                                                    {'NumericLiteralExpression': '125000'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'mbits'}},
                                              'operator': 'MULTIPLY',
                                              'right': {'value': '125000000'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'node'},
                                                          {'IdentifierName': 'SlopQueryNode'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SlopQueryNode'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'SlopQueryNode'},
                                                                                                                                                                              {'IdentifierName': 'node'}]}]}]}]}]},
                                                   {'IfStatement': [{'LogicalAndExpression': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'phraseSlopNode'},
                                                                                                                                                                                                                                   {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                                       {'IdentifierName': 'TokenizedPhraseQueryNode'}]}]}]},
                                                                                              {'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'phraseSlopNode'},
                                                                                                                                                                                                                                   {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                                       {'IdentifierName': 'MultiPhraseQueryNode'}]}]}]}]},
                                                                    {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'phraseSlopNode'},
                                                                                                                                                                {'IdentifierName': 'GetChild'}]},
                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'node'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'node'}},
                                             'type': {'name': {'identifier': 'SlopQueryNode'}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'node'}},
                                                                                                          'type': {'name': {'identifier': 'SlopQueryNode'}}},
                                                                                          'name': {'identifier': 'phraseSlopNode'},
                                                                                          'type': {'name': {'identifier': 'SlopQueryNode'}}}]}},
                                                           {'condition': {'left': {'expression': {'inner': {'expression': {'name': {'identifier': 'getChild'},
                                                                                                                           'scope': {'name': {'identifier': 'phraseSlopNode'}}},
                                                                                                            'type': {'name': {'identifier': 'TokenizedPhraseQueryNode'}}}},
                                                                                   'operator': 'LOGICAL_COMPLEMENT'},
                                                                          'operator': 'AND',
                                                                          'right': {'expression': {'inner': {'expression': {'name': {'identifier': 'getChild'},
                                                                                                                            'scope': {'name': {'identifier': 'phraseSlopNode'}}},
                                                                                                             'type': {'name': {'identifier': 'MultiPhraseQueryNode'}}}},
                                                                                    'operator': 'LOGICAL_COMPLEMENT'}},
                                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'getChild'},
                                                                                                        'scope': {'name': {'identifier': 'phraseSlopNode'}}}}]}}]}},
                              {'expression': {'name': {'identifier': 'node'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'count'},
                                                                                                        {'IdentifierName': 'Get'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'count'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'list'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'j'}]}]}]},
                                                                                {'ElementAccessExpression': [{'IdentifierName': 'tmp'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'j'}},
                                                            {'index': {'name': {'identifier': 'i'}},
                                                             'name': {'name': {'identifier': 'tmp'}}}],
                                              'name': {'identifier': 'set'},
                                              'scope': {'name': {'identifier': 'list'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                          {'IdentifierName': 'ReadVInt64'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'v'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'NO_OUTPUT'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'IdentifierName': 'v'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'readVLong'},
                                                                             'scope': {'name': {'identifier': 'in'}}},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'v'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'v'}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'NO_OUTPUT'}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'purgeLock'},
                                                                                                    {'IdentifierName': 'TryLock'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'TryStatement': [{'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'InnerPurge'},
                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'writer'}]}]}]}]}]},
                                                                     {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'purgeLock'},
                                                                                                                                                                                        {'IdentifierName': 'Unlock'}]},
                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]},
  'java_ast': {'statements': [{'check': {'expression': {'arguments': [{}],
                                                        'name': {'identifier': 'holdsLock'},
                                                        'scope': {'name': {'identifier': 'Thread'}}},
                                         'operator': 'LOGICAL_COMPLEMENT'}},
                              {'check': {'expression': {'arguments': [{'name': {'identifier': 'writer'}}],
                                                        'name': {'identifier': 'holdsLock'},
                                                        'scope': {'name': {'identifier': 'Thread'}}},
                                         'operator': 'LOGICAL_COMPLEMENT'}},
                              {'condition': {'name': {'identifier': 'tryLock'},
                                             'scope': {'name': {'identifier': 'purgeLock'}}},
                               'thenStmt': {'statements': [{'finallyBlock': {'statements': [{'expression': {'name': {'identifier': 'unlock'},
                                                                                                            'scope': {'name': {'identifier': 'purgeLock'}}}}]},
                                                            'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'writer'}}],
                                                                                                        'name': {'identifier': 'innerPurge'}}}]}}]}},
                              {'expression': {'value': '0'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                    {'IdentifierName': 'NextBoolean'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mergePolicy'},
                                                                                                                                              {'IdentifierName': 'NoCFSRatio'}]},
                                                                                                            {'AddExpression': [{'NumericLiteralExpression': '0.1'},
                                                                                                                               {'MultiplyExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                   {'IdentifierName': 'NextDouble'}]},
                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                       {'NumericLiteralExpression': '0.8'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mergePolicy'},
                                                                                                                                                              {'IdentifierName': 'NoCFSRatio'}]},
                                                                                                                            {'ConditionalExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                   {'IdentifierName': 'NextBoolean'}]},
                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                       {'NumericLiteralExpression': '1.0'},
                                                                                                                                                       {'NumericLiteralExpression': '0.0'}]}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'Rarely'},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mergePolicy'},
                                                                                                                                              {'IdentifierName': 'MaxCFSSegmentSizeMB'}]},
                                                                                                            {'AddExpression': [{'NumericLiteralExpression': '0.2'},
                                                                                                                               {'MultiplyExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                   {'IdentifierName': 'NextDouble'}]},
                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                       {'NumericLiteralExpression': '2.0'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mergePolicy'},
                                                                                                                                                              {'IdentifierName': 'MaxCFSSegmentSizeMB'}]},
                                                                                                                            {'SimpleMemberAccessExpression': [{'PredefinedType': 'double'},
                                                                                                                                                              {'IdentifierName': 'PositiveInfinity'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'nextBoolean'},
                                             'scope': {'name': {'identifier': 'r'}}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'condition': {'name': {'identifier': 'nextBoolean'},
                                                                                                        'scope': {'name': {'identifier': 'r'}}},
                                                                                          'elseExpr': {'value': '0.0'},
                                                                                          'thenExpr': {'value': '1.0'}}],
                                                                           'name': {'identifier': 'setNoCFSRatio'},
                                                                           'scope': {'name': {'identifier': 'mergePolicy'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': '0.1'},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'left': {'name': {'identifier': 'nextDouble'},
                                                                                                             'scope': {'name': {'identifier': 'r'}}},
                                                                                                    'operator': 'MULTIPLY',
                                                                                                    'right': {'value': '0.8'}}}],
                                                                           'name': {'identifier': 'setNoCFSRatio'},
                                                                           'scope': {'name': {'identifier': 'mergePolicy'}}}}]}},
                              {'condition': {'arguments': [{'name': {'identifier': 'r'}}],
                                             'name': {'identifier': 'rarely'}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'POSITIVE_INFINITY'},
                                                                                          'scope': {'name': {'identifier': 'Double'}}}],
                                                                           'name': {'identifier': 'setMaxCFSSegmentSizeMB'},
                                                                           'scope': {'name': {'identifier': 'mergePolicy'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': '0.2'},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'left': {'name': {'identifier': 'nextDouble'},
                                                                                                             'scope': {'name': {'identifier': 'r'}}},
                                                                                                    'operator': 'MULTIPLY',
                                                                                                    'right': {'value': '2.0'}}}],
                                                                           'name': {'identifier': 'setMaxCFSSegmentSizeMB'},
                                                                           'scope': {'name': {'identifier': 'mergePolicy'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalAndExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'startIndex'},
                                                                                                                                                                      {'NumericLiteralExpression': '0'}]},
                                                                                                                                    {'LessThanExpression': [{'IdentifierName': 'startIndex'},
                                                                                                                                                            {'IdentifierName': 'numBits'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalAndExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'endIndex'},
                                                                                                                                                                      {'NumericLiteralExpression': '0'}]},
                                                                                                                                    {'LessThanOrEqualExpression': [{'IdentifierName': 'endIndex'},
                                                                                                                                                                   {'IdentifierName': 'numBits'}]}]}]}]}]}]},
                       {'IfStatement': [{'LessThanOrEqualExpression': [{'IdentifierName': 'endIndex'},
                                                                       {'IdentifierName': 'startIndex'}]},
                                        {'Block': [{'ReturnStatement': 'return;'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'RightShiftExpression': [{'IdentifierName': 'startIndex'},
                                                                                                                                                        {'NumericLiteralExpression': '6'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'RightShiftExpression': [{'ParenthesizedExpression': [{'SubtractExpression': [{'IdentifierName': 'endIndex'},
                                                                                                                                                                                                             {'NumericLiteralExpression': '1'}]}]},
                                                                                                                                                        {'NumericLiteralExpression': '6'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'LeftShiftExpression': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1L'}]},
                                                                                                                                                       {'IdentifierName': 'startIndex'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                  {'ParenthesizedExpression': [{'RightShiftExpression': [{'UncheckedExpression': [{'CastExpression': [{'PredefinedType': 'ulong'},
                                                                                                                                                                                                                                                      {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                                                                                                                                                                                                         {'UnaryMinusExpression': [{'IdentifierName': 'endIndex'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'startWord'},
                                                              {'IdentifierName': 'endWord'}]},
                                        {'Block': [{'ExpressionStatement': [{'ExclusiveOrAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'startWord'}]}]}]},
                                                                                                                 {'ParenthesizedExpression': [{'BitwiseAndExpression': [{'IdentifierName': 'startmask'},
                                                                                                                                                                        {'IdentifierName': 'endmask'}]}]}]}]},
                                                   {'ReturnStatement': 'return;'}]}]},
                       {'ExpressionStatement': [{'ExclusiveOrAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'startWord'}]}]}]},
                                                                                     {'IdentifierName': 'startmask'}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'IdentifierName': 'startWord'},
                                                                                                                                    {'NumericLiteralExpression': '1'}]}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'endWord'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'BitwiseNotExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'ExclusiveOrAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'endWord'}]}]}]},
                                                                                     {'IdentifierName': 'endmask'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'numBits'}}}},
                               'message': {'left': {'left': {'left': {'value': 'index='},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'index'}}},
                                                    'operator': 'PLUS',
                                                    'right': {'value': ' '
                                                                       'numBits='}},
                                           'operator': 'PLUS',
                                           'right': {'name': {'identifier': 'numBits'}}}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'index'}},
                                                                             'operator': 'SIGNED_RIGHT_SHIFT',
                                                                             'right': {'value': '6'}},
                                                             'name': {'identifier': 'wordNum'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'value': '1L'},
                                                                             'operator': 'LEFT_SHIFT',
                                                                             'right': {'name': {'identifier': 'index'}}},
                                                             'name': {'identifier': 'bitmask'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'operator': 'XOR',
                                              'target': {'index': {'name': {'identifier': 'wordNum'}},
                                                         'name': {'name': {'identifier': 'bits'}}},
                                              'value': {'name': {'identifier': 'bitmask'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Enum'},
                                                                                                                                                                                                                            {'IdentifierName': 'GetNames'}]},
                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'TypeOfExpression': [{'IdentifierName': 'ScoreMode'}]}]}]}]},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Test300spartans'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                      {'IdentifierName': 'NextBoolean'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'CastExpression': [{'IdentifierName': 'ScoreMode'},
                                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                    {'ArgumentList': '()'}]},
                                                                                                                                                                                          {'IdentifierName': 'Next'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'scoreModeLength'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'nextBoolean'},
                                                             'scope': {'name': {'identifier': 'random'}}},
                                                            {'index': {'arguments': [{'name': {'identifier': 'length'},
                                                                                      'scope': {'name': {'identifier': 'values'},
                                                                                                'scope': {'name': {'identifier': 'ScoreMode'}}}}],
                                                                       'name': {'identifier': 'nextInt'},
                                                                       'scope': {'name': {'identifier': 'random'}}},
                                                             'name': {'name': {'identifier': 'values'},
                                                                      'scope': {'name': {'identifier': 'ScoreMode'}}}}],
                                              'name': {'identifier': 'test300spartans'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MutableValueBool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MutableValueBool'},
                                                                                                                                                  {'IdentifierName': 'other'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'Value'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                   {'IdentifierName': 'Value'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'Value'},
                                                                                                   {'NumericLiteralExpression': '1'},
                                                                                                   {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'Exists'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                {'IdentifierName': 'Exists'}]}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'Exists'},
                                                                       {'NumericLiteralExpression': '1'},
                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'exists'}},
                                         'operator': 'OR',
                                         'right': {'inner': {'left': {'value': 'false'},
                                                             'operator': 'EQUALS',
                                                             'right': {'name': {'identifier': 'value'}}}}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'other'}},
                                                                             'type': {'name': {'identifier': 'MutableValueBool'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'MutableValueBool'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'value'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'value'},
                                                       'scope': {'name': {'identifier': 'b'}}}},
                               'thenStmt': {'expression': {'condition': {'name': {'identifier': 'value'}},
                                                           'elseExpr': {'expression': {'value': '1'},
                                                                        'operator': 'MINUS'},
                                                           'thenExpr': {'value': '1'}}}},
                              {'condition': {'left': {'name': {'identifier': 'exists'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'exists'},
                                                       'scope': {'name': {'identifier': 'b'}}}},
                               'thenStmt': {'expression': {'value': '0'}}},
                              {'expression': {'condition': {'name': {'identifier': 'exists'}},
                                              'elseExpr': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'},
                                              'thenExpr': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                        {'IdentifierName': 'AlignObjectSize'}]},
                                                                      {'ArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                           {'IdentifierName': 'NUM_BYTES_OBJECT_HEADER'}]},
                                                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                           {'IdentifierName': 'NUM_BYTES_INT32'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'NUM_BYTES_OBJECT_HEADER'},
                                                                      'scope': {'name': {'identifier': 'RamUsageEstimator'}}},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'BYTES'},
                                                                       'scope': {'name': {'identifier': 'Integer'}}}}],
                                              'name': {'identifier': 'alignObjectSize'},
                                              'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'ch'},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'charTypeTable'},
                                                                                                  {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'charTypeTable'},
                                                                                                     {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'ch'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetType'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ch'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ch'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'charTypeTable'}}}},
                               'thenStmt': {'statements': [{'expression': {'index': {'name': {'identifier': 'ch'}},
                                                                           'name': {'name': {'identifier': 'charTypeTable'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ch'}}],
                                              'name': {'identifier': 'getType'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'forwardPos'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                            {'IdentifierName': 'Grow'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'forwardPos'}]},
                                                                                                                            {'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                                             {'IdentifierName': 'forwardCount'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'forwardID'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                            {'IdentifierName': 'Grow'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'forwardID'}]},
                                                                                                                            {'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                                             {'IdentifierName': 'forwardCount'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'forwardIndex'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                            {'IdentifierName': 'Grow'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'forwardIndex'}]},
                                                                                                                            {'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                                             {'IdentifierName': 'forwardCount'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'IdentifierName': 'JapaneseTokenizerType'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'IdentifierName': 'JapaneseTokenizerType'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'forwardPos'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'System'},
                                                                                                                                              {'IdentifierName': 'Array'}]},
                                                                                                            {'IdentifierName': 'Copy'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'forwardType'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'newForwardType'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'forwardType'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'forwardType'},
                                                                                {'IdentifierName': 'newForwardType'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'forwardPos'}},
                                              'value': {'arguments': [{'name': {'identifier': 'forwardPos'}},
                                                                      {'left': {'value': '1'},
                                                                       'operator': 'PLUS',
                                                                       'right': {'name': {'identifier': 'forwardCount'}}}],
                                                        'name': {'identifier': 'grow'},
                                                        'scope': {'name': {'identifier': 'ArrayUtil'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'forwardID'}},
                                              'value': {'arguments': [{'name': {'identifier': 'forwardID'}},
                                                                      {'left': {'value': '1'},
                                                                       'operator': 'PLUS',
                                                                       'right': {'name': {'identifier': 'forwardCount'}}}],
                                                        'name': {'identifier': 'grow'},
                                                        'scope': {'name': {'identifier': 'ArrayUtil'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'forwardIndex'}},
                                              'value': {'arguments': [{'name': {'identifier': 'forwardIndex'}},
                                                                      {'left': {'value': '1'},
                                                                       'operator': 'PLUS',
                                                                       'right': {'name': {'identifier': 'forwardCount'}}}],
                                                        'name': {'identifier': 'grow'},
                                                        'scope': {'name': {'identifier': 'ArrayUtil'}}}}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'Type'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'},
                                                                                                       'scope': {'name': {'identifier': 'forwardPos'}}}}]},
                                                             'name': {'identifier': 'newForwardType'},
                                                             'type': {'componentType': {'name': {'identifier': 'Type'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'forwardType'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'newForwardType'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'forwardType'}}}],
                                              'name': {'identifier': 'arraycopy'},
                                              'scope': {'name': {'identifier': 'System'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'forwardType'}},
                                              'value': {'name': {'identifier': 'newForwardType'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Token'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Token'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'startOffset'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'endOffset'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                  {'IdentifierName': 'PositionIncrement'}]},
                                                                                {'ParenthesizedExpression': [{'IdentifierName': 'positionIncrement'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'token'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'text'}},
                                                                                           {'name': {'identifier': 'startOffset'}},
                                                                                           {'name': {'identifier': 'endOffset'}}],
                                                                             'type': {'name': {'identifier': 'Token'}}},
                                                             'name': {'identifier': 'token'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'positionIncrement'}}],
                                              'name': {'identifier': 'setPositionIncrement'},
                                              'scope': {'name': {'identifier': 'token'}}}},
                              {'expression': {'name': {'identifier': 'token'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'sval'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'sval'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'FinnishLightStemFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'FinnishLightStemFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ThreadClass'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper3'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'Start'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'Join'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'arguments': [{'value': 'foobar3'}],
                                                                                                                                             'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                                                                     'name': {'identifier': 'run'},
                                                                                                     'type': {}}],
                                                                             'type': {'name': {'identifier': 'Thread'}}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Thread'}}}]}},
                              {'expression': {'name': {'identifier': 'start'},
                                              'scope': {'name': {'identifier': 't'}}}},
                              {'expression': {'name': {'identifier': 'join'},
                                              'scope': {'name': {'identifier': 't'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ThreadClass'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper2'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'Start'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'Join'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'arguments': [{'value': 'foobar2'}],
                                                                                                                                             'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                                                                     'name': {'identifier': 'run'},
                                                                                                     'type': {}}],
                                                                             'type': {'name': {'identifier': 'Thread'}}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Thread'}}}]}},
                              {'expression': {'name': {'identifier': 'start'},
                                              'scope': {'name': {'identifier': 't'}}}},
                              {'expression': {'name': {'identifier': 'join'},
                                              'scope': {'name': {'identifier': 't'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                            {'IdentifierName': 'SCORING_BOOLEAN_QUERY_REWRITE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                            {'IdentifierName': 'CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNoMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                            {'IdentifierName': 'CONSTANT_SCORE_FILTER_REWRITE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNoMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                            {'IdentifierName': 'CONSTANT_SCORE_AUTO_REWRITE_DEFAULT'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNoMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                                           {'IdentifierName': 'TopTermsScoringBooleanQueryRewrite'}]},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1024'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNoMaxClauseLimitation'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'MultiTermQuery'},
                                                                                                                                                           {'IdentifierName': 'TopTermsBoostOnlyBooleanQueryRewrite'}]},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1024'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'SCORING_BOOLEAN_REWRITE'},
                                                             'scope': {'name': {'identifier': 'MultiTermQuery'}}}],
                                              'name': {'identifier': 'checkMaxClauseLimitation'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'CONSTANT_SCORE_BOOLEAN_REWRITE'},
                                                             'scope': {'name': {'identifier': 'MultiTermQuery'}}}],
                                              'name': {'identifier': 'checkMaxClauseLimitation'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'CONSTANT_SCORE_REWRITE'},
                                                             'scope': {'name': {'identifier': 'MultiTermQuery'}}}],
                                              'name': {'identifier': 'checkNoMaxClauseLimitation'}}},
                              {'expression': {'arguments': [{'arguments': [{'value': '1024'}],
                                                             'type': {'name': {'identifier': 'TopTermsScoringBooleanQueryRewrite'},
                                                                      'scope': {'name': {'identifier': 'MultiTermQuery'}}}}],
                                              'name': {'identifier': 'checkNoMaxClauseLimitation'}}},
                              {'expression': {'arguments': [{'arguments': [{'value': '1024'}],
                                                             'type': {'name': {'identifier': 'TopTermsBoostOnlyBooleanQueryRewrite'},
                                                                      'scope': {'name': {'identifier': 'MultiTermQuery'}}}}],
                                              'name': {'identifier': 'checkNoMaxClauseLimitation'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collectionStats'},
                                                                                                                                                                {'IdentifierName': 'SumTotalTermFreq'}]}]}]}]}]},
                       {'IfStatement': [{'LessThanOrEqualExpression': [{'IdentifierName': 'sumTotalTermFreq'},
                                                                       {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '1f'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'float'},
                                                                                                            {'ParenthesizedExpression': [{'DivideExpression': [{'IdentifierName': 'sumTotalTermFreq'},
                                                                                                                                                               {'CastExpression': [{'PredefinedType': 'double'},
                                                                                                                                                                                   {'SimpleMemberAccessExpression': [{'IdentifierName': 'collectionStats'},
                                                                                                                                                                                                                     {'IdentifierName': 'MaxDoc'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'inner': {'left': {'name': {'identifier': 'sumTotalTermFreq'},
                                                                                'scope': {'name': {'identifier': 'collectionStats'}}},
                                                                       'operator': 'DIVIDE',
                                                                       'right': {'expression': {'name': {'identifier': 'docCount'},
                                                                                                'scope': {'name': {'identifier': 'collectionStats'}}},
                                                                                 'type': {'type': 'DOUBLE'}}}},
                                              'type': {'type': 'FLOAT'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]},
  'java_ast': {'statements': [{'expression': {'value': '0'}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'WeightedPhraseInfo'},
                                             {'IdentifierName': 'PhraseList'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'existWpi'},
                                                                                                                                     {'IdentifierName': 'IsOffsetOverlap'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'wpi'}]}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'existWpi'},
                                                                                                                                                                                                           {'IdentifierName': 'TermsInfos'}]},
                                                                                                                                                                         {'IdentifierName': 'AddAll'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'wpi'},
                                                                                                                                                                                                         {'IdentifierName': 'TermsInfos'}]}]}]}]}]},
                                                                                    {'ReturnStatement': 'return;'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PhraseList'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'wpi'}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'wpi'}}],
                                                                      'name': {'identifier': 'isOffsetOverlap'},
                                                                      'scope': {'name': {'identifier': 'existWpi'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getTermsInfos'},
                                                                                                                   'scope': {'name': {'identifier': 'wpi'}}}],
                                                                                                    'name': {'identifier': 'addAll'},
                                                                                                    'scope': {'name': {'identifier': 'getTermsInfos'},
                                                                                                              'scope': {'name': {'identifier': 'existWpi'}}}}},
                                                                                    {}]}}]},
                               'iterable': {'name': {'identifier': 'getPhraseList'}},
                               'variable': {'variables': [{'name': {'identifier': 'existWpi'},
                                                           'type': {'name': {'identifier': 'WeightedPhraseInfo'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'wpi'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'getPhraseList'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Cell'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'At'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'way'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'IdentifierName': 'c'},
                                                                                                                          {'NullLiteralExpression': 'null'}]}]},
                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'c'},
                                                                                                         {'IdentifierName': '@ref'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'way'}}],
                                                                             'name': {'identifier': 'at'}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'name': {'identifier': 'Cell'}}}]}},
                              {'expression': {'condition': {'inner': {'left': {'name': {'identifier': 'c'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}}},
                                              'elseExpr': {'name': {'identifier': 'ref'},
                                                           'scope': {'name': {'identifier': 'c'}}},
                                              'thenExpr': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenFilter'},
                                                                                                                                                                                                                              {'IdentifierName': 'ENGLISH_STOPSET'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'stream'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'MockTokenFilter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'stream'}]},
                                                                                                                                {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'CharacterRunAutomaton'},
                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'SecondSet'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'IdentifierName': 'stream'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                                           {'name': {'identifier': 'ENGLISH_STOPSET'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenFilter'}}}],
                                                                             'type': {'name': {'identifier': 'MockTokenFilter'}}},
                                                             'name': {'identifier': 'stream'},
                                                             'type': {'name': {'identifier': 'TokenStream'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'stream'}},
                                              'value': {'arguments': [{'name': {'identifier': 'stream'}},
                                                                      {'arguments': [{'name': {'identifier': 'secondSet'}}],
                                                                       'type': {'name': {'identifier': 'CharacterRunAutomaton'}}}],
                                                        'type': {'name': {'identifier': 'MockTokenFilter'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'name': {'identifier': 'stream'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rawFlags'},
                                                                                                        {'IdentifierName': 'ToCharArray'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'rawFlags'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'elementType': {'type': 'CHAR'},
                                                                           'levels': [{'dimension': {'value': '0'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'builder'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'length'},
                                                               'scope': {'name': {'identifier': 'rawFlags'}}},
                                                      'operator': 'REMAINDER',
                                                      'right': {'value': '2'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '1'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': 'Invalid '
                                                                                                            'flags '
                                                                                                            '(should '
                                                                                                            'be '
                                                                                                            'even '
                                                                                                            'number '
                                                                                                            'of '
                                                                                                            'characters): '},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'rawFlags'}}}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'rawFlags'}}},
                                                                                      'name': {'identifier': 'f1'},
                                                                                      'type': {'type': 'CHAR'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'PLUS',
                                                                                                                     'right': {'value': '1'}}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'rawFlags'}}},
                                                                                      'name': {'identifier': 'f2'},
                                                                                      'type': {'type': 'CHAR'}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'f1'}},
                                                                               'operator': 'GREATER_EQUALS',
                                                                               'right': {'value': '256'}},
                                                                      'operator': 'OR',
                                                                      'right': {'left': {'name': {'identifier': 'f2'}},
                                                                                'operator': 'GREATER_EQUALS',
                                                                                'right': {'value': '256'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'value': 'Invalid '
                                                                                                                                     'flags '
                                                                                                                                     '(LONG '
                                                                                                                                     'flags '
                                                                                                                                     'must '
                                                                                                                                     'be '
                                                                                                                                     'double '
                                                                                                                                     'ASCII): '},
                                                                                                                   'operator': 'PLUS',
                                                                                                                   'right': {'name': {'identifier': 'rawFlags'}}}],
                                                                                                    'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'expression': {'inner': {'left': {'left': {'name': {'identifier': 'f1'}},
                                                                                                                                        'operator': 'LEFT_SHIFT',
                                                                                                                                        'right': {'value': '8'}},
                                                                                                                               'operator': 'BINARY_OR',
                                                                                                                               'right': {'name': {'identifier': 'f2'}}}},
                                                                                                      'type': {'type': 'CHAR'}},
                                                                                      'name': {'identifier': 'combined'},
                                                                                      'type': {'type': 'CHAR'}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'combined'}}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'builder'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'rawFlags'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'operator': 'PLUS',
                                           'target': {'name': {'identifier': 'i'}},
                                           'value': {'value': '2'}}]},
                              {'expression': {'variables': [{'initializer': {'elementType': {'type': 'CHAR'},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'},
                                                                                                       'scope': {'name': {'identifier': 'builder'}}}}]},
                                                             'name': {'identifier': 'flags'},
                                                             'type': {'componentType': {'type': 'CHAR'},
                                                                      'origin': 'NAME'}}]}},
                              {'expression': {'arguments': [{'value': '0'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'builder'}}},
                                                            {'name': {'identifier': 'flags'}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'getChars'},
                                              'scope': {'name': {'identifier': 'builder'}}}},
                              {'expression': {'name': {'identifier': 'flags'}}}]}},
 {'cs_ast': {'Block': [{'UsingStatement': [{'VariableDeclaration': [{'IdentifierName': 'ZipArchive'},
                                                                    {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ZipArchive'},
                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'zipFile'}]},
                                                                                                                                                                   {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ZipArchiveMode'},
                                                                                                                                                                                                                   {'IdentifierName': 'Read'}]}]},
                                                                                                                                                                   {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                                                                                                   {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                                                                                                   {'IdentifierName': 'UTF8'}]}]}]}]}]}]}]},
                                           {'Block': [{'UsingStatement': [{'VariableDeclaration': [{'IdentifierName': 'Stream'},
                                                                                                   {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'zip'},
                                                                                                                                                                                                                                                                          {'IdentifierName': 'GetEntry'}]},
                                                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'vocOut'}]}]}]},
                                                                                                                                                                                                              {'IdentifierName': 'Open'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]},
                                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertVocabulary'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'vo'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'createTempDir'},
                                                                             'scope': {'name': {'identifier': 'LuceneTestCase'}}},
                                                             'name': {'identifier': 'tmp'},
                                                             'type': {'name': {'identifier': 'Path'}}}]}},
                              {'resources': [{'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'zipFile'}}],
                                                                             'name': {'identifier': 'newInputStream'},
                                                                             'scope': {'name': {'identifier': 'Files'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'InputStream'}}}]}],
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'in'}},
                                                                                         {'name': {'identifier': 'tmp'}}],
                                                                           'name': {'identifier': 'unzip'},
                                                                           'scope': {'name': {'identifier': 'TestUtil'}}}}]}},
                              {'resources': [{'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'vocOut'}}],
                                                                                            'name': {'identifier': 'resolve'},
                                                                                            'scope': {'name': {'identifier': 'tmp'}}}],
                                                                             'name': {'identifier': 'newInputStream'},
                                                                             'scope': {'name': {'identifier': 'Files'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'InputStream'}}}]}],
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'a'}},
                                                                                         {'name': {'identifier': 'in'}}],
                                                                           'name': {'identifier': 'assertVocabulary'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'stackSize'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Array'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'runEnds'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'runEnds'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'runEnds'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                {'IdentifierName': 'from'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'to'}]},
                                                                                {'IdentifierName': 'to'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 'to'},
                                                                                                                                                      {'IdentifierName': 'from'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'minRun'}]},
                                                                                {'ConditionalExpression': [{'LessThanOrEqualExpression': [{'IdentifierName': 'length'},
                                                                                                                                          {'IdentifierName': 'THRESHOLD'}]},
                                                                                                           {'IdentifierName': 'length'},
                                                                                                           {'InvocationExpression': [{'IdentifierName': 'MinRun'},
                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'length'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'stackSize'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'runEnds'}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'fill'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'runEnds'}}},
                                              'value': {'name': {'identifier': 'from'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'to'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'to'}}}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'to'}},
                                                                             'operator': 'MINUS',
                                                                             'right': {'name': {'identifier': 'from'}}},
                                                             'name': {'identifier': 'length'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'minRun'},
                                                         'scope': {}},
                                              'value': {'condition': {'left': {'name': {'identifier': 'length'}},
                                                                      'operator': 'LESS_EQUALS',
                                                                      'right': {'name': {'identifier': 'THRESHOLD'}}},
                                                        'elseExpr': {'arguments': [{'name': {'identifier': 'length'}}],
                                                                     'name': {'identifier': 'minRun'}},
                                                        'thenExpr': {'name': {'identifier': 'length'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'cache'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Key'},
                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                                                                                                  {'Argument': [{'IdentifierName': 'prefixLen'}]}]}]}]}]}]},
                                                                                {'IdentifierName': 'val'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'IsCacheFull'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'name'}},
                                                                           {'name': {'identifier': 'prefixLen'}}],
                                                             'name': {'identifier': 'key'}},
                                                            {'name': {'identifier': 'val'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'cache'}}}},
                              {'expression': {'name': {'identifier': 'isCacheFull'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAtt'},
                                                                                                                                                          {'IdentifierName': 'IsKeyword'}]}]},
                                                                                              {'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                           {'IdentifierName': 'Length'}]},
                                                                                                                         {'IdentifierName': 'minLength'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Stem'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                                            {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                                                                               {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'sb'},
                                                                                                                         {'NullLiteralExpression': 'null'}]},
                                                                                                {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                 {'IdentifierName': 'SetEmpty'}]},
                                                                                                                                                                                                               {'ArgumentList': '()'}]},
                                                                                                                                                                                     {'IdentifierName': 'Append'}]},
                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'sb'}]}]}]}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                                  'scope': {'name': {'identifier': 'keywordAtt'}}},
                                                                                   'operator': 'LOGICAL_COMPLEMENT'},
                                                                          'operator': 'AND',
                                                                          'right': {'left': {'name': {'identifier': 'length'},
                                                                                             'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                    'operator': 'GREATER',
                                                                                    'right': {'name': {'identifier': 'minLength'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'termAtt'}}],
                                                                                                                                       'name': {'identifier': 'stem'},
                                                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}},
                                                                                                                       'name': {'identifier': 'sb'},
                                                                                                                       'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                                                                                        {'condition': {'left': {'name': {'identifier': 'sb'}},
                                                                                                       'operator': 'NOT_EQUALS',
                                                                                                       'right': {}},
                                                                                         'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'sb'}}],
                                                                                                                     'name': {'identifier': 'append'},
                                                                                                                     'scope': {'name': {'identifier': 'setEmpty'},
                                                                                                                               'scope': {'name': {'identifier': 'termAtt'}}}}}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                          {'IdentifierName': 'Assert'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'Info'},
                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'sr'},
                                                                                                                                                                                                {'IdentifierName': 'SegmentInfo'}]}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sr'},
                                                                                                                                          {'IdentifierName': 'DecRef'}]},
                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'info'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'getSegmentInfo'},
                                                   'scope': {'name': {'identifier': 'sr'}}}}},
                              {'expression': {'name': {'identifier': 'decRef'},
                                              'scope': {'name': {'identifier': 'sr'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'dest'}]}]}]},
                                                                                {'ElementAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'src'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'dest'}},
                                                         'name': {'name': {'identifier': 'arr'}}},
                                              'value': {'index': {'name': {'identifier': 'src'}},
                                                        'name': {'name': {'identifier': 'arr'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'node'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'node'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'numRead'},
                                                                          {'IdentifierName': 'IO_SLEEP_THRESHOLD'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                        {'IdentifierName': 'doSleep'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'rand'}]},
                                                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numRead'},
                                                                                                            {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ExpressionStatement': [{'PreIncrementExpression': [{'IdentifierName': 'numRead'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ii'},
                                                                                                        {'IdentifierName': 'ReadByte'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'numRead'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'IO_SLEEP_THRESHOLD'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'rand'}},
                                                                                         {'value': '0'}],
                                                                           'name': {'identifier': 'doSleep'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'numRead'}},
                                                                           'value': {'value': '0'}}}]}},
                              {'expression': {'expression': {'name': {'identifier': 'numRead'}},
                                              'operator': 'PREFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'readByte'},
                                              'scope': {'name': {'identifier': 'ii'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ArabicNormalizationFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'ArabicNormalizationFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'retainAtt'},
                                                                                                                                              {'IdentifierName': 'Retain'}]},
                                                                                                            {'TrueLiteralExpression': 'true'}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'true'}],
                                                                           'name': {'identifier': 'setRetain'},
                                                                           'scope': {'name': {'identifier': 'retainAtt'}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'taxoArrays'},
                                                                                            {'NullLiteralExpression': 'null'}]},
                                                                      {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TaxonomyIndexArrays'},
                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TaxonomyIndexArrays'},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'indexReader'}]}]}]}]}]}]}]},
                                                                                 {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'taxoArrays'},
                                                                                                                                          {'IdentifierName': 'tmpArrays'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'taxoArrays'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'indexReader'}}],
                                                                                                          'type': {'name': {'identifier': 'TaxonomyIndexArrays'}}},
                                                                                          'name': {'identifier': 'tmpArrays'},
                                                                                          'type': {'name': {'identifier': 'TaxonomyIndexArrays'}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'taxoArrays'}},
                                                                           'value': {'name': {'identifier': 'tmpArrays'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'term'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'Shrink'},
                                                                                                          {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'stack'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'PostDecrementExpression': [{'IdentifierName': 'level'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'term'}},
                                              'value': {'name': {'identifier': 'shrink'}}}},
                              {'expression': {'index': {'expression': {'name': {'identifier': 'level'}},
                                                        'operator': 'POSTFIX_DECREMENT'},
                                              'name': {'name': {'identifier': 'stack'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Integer'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Integer'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Integer'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '5'}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '5'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'set'},
                                                                                                                                                                                                        {'IdentifierName': 'Get'}]},
                                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                                            {'IdentifierName': 'value'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'AlreadySetException'}]}]}]},
                                                                          {'ArgumentList': [{'Argument': [{'ParenthesizedLambdaExpression': [{'ParameterList': '()'},
                                                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'set'},
                                                                                                                                                                                                         {'IdentifierName': 'Set'}]},
                                                                                                                                                                       {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Integer'},
                                                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '7'}]}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'value': '5'}],
                                                                                            'type': {'name': {'identifier': 'Integer'}}}],
                                                                             'type': {'name': {'identifier': 'SetOnce'}}},
                                                             'name': {'identifier': 'set'},
                                                             'type': {'name': {'identifier': 'SetOnce'},
                                                                      'typeArguments': [{'name': {'identifier': 'Integer'}}]}}]}},
                              {'expression': {'arguments': [{'value': '5'},
                                                            {'name': {'identifier': 'intValue'},
                                                             'scope': {'name': {'identifier': 'get'},
                                                                       'scope': {'name': {'identifier': 'set'}}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'arguments': [{'arguments': [{'value': '7'}],
                                                             'type': {'name': {'identifier': 'Integer'}}}],
                                              'name': {'identifier': 'set'},
                                              'scope': {'name': {'identifier': 'set'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'TryIncRef'},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'tryIncRef'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'events'},
                                                                                                            {'IdentifierName': 'Enqueue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@event'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'event'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'events'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'AddDocuments'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'docs'}}],
                                              'name': {'identifier': 'addDocuments'},
                                              'scope': {'name': {'identifier': 'writer'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_luceneMatchVersion'},
                                                                                                    {'IdentifierName': 'OnOrAfter'}]},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'LuceneVersion'},
                                                                                                                                    {'IdentifierName': 'LUCENE_48'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'WordDelimiterFilter'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_luceneMatchVersion'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                        {'Argument': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'typeTable'},
                                                                                                                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'WordDelimiterIterator'},
                                                                                                                                                                                                   {'IdentifierName': 'DEFAULT_WORD_DELIM_TABLE'}]},
                                                                                                                                                                 {'IdentifierName': 'typeTable'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'flags'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'protectedWords'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Lucene47WordDelimiterFilter'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                                        {'Argument': [{'CoalesceExpression': [{'IdentifierName': 'typeTable'},
                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'WordDelimiterIterator'},
                                                                                                                                                                                                                {'IdentifierName': 'DEFAULT_WORD_DELIM_TABLE'}]}]}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'flags'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'protectedWords'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'condition': {'left': {'name': {'identifier': 'typeTable'}},
                                                                           'operator': 'EQUALS',
                                                                           'right': {}},
                                                             'elseExpr': {'name': {'identifier': 'typeTable'}},
                                                             'thenExpr': {'name': {'identifier': 'DEFAULT_WORD_DELIM_TABLE'},
                                                                          'scope': {'name': {'identifier': 'WordDelimiterIterator'}}}},
                                                            {'name': {'identifier': 'flags'}},
                                                            {'name': {'identifier': 'protectedWords'}}],
                                              'type': {'name': {'identifier': 'WordDelimiterFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                {'ParenthesizedExpression': [{'RightShiftExpression': [{'CastExpression': [{'PredefinedType': 'uint'},
                                                                                                                                                                                           {'ParenthesizedExpression': [{'SubtractExpression': [{'SubtractExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                                                                                                        {'NumericLiteralExpression': '1'}]},
                                                                                                                                                                                                                                                {'IdentifierName': 'from'}]}]}]},
                                                                                                                                                                       {'NumericLiteralExpression': '1'}]}]}]}]},
                                                               {'IdentifierName': 'from'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'inner': {'left': {'left': {'name': {'identifier': 'i'}},
                                                                                             'operator': 'MINUS',
                                                                                             'right': {'value': '1'}},
                                                                                    'operator': 'MINUS',
                                                                                    'right': {'name': {'identifier': 'from'}}}},
                                                                 'operator': 'UNSIGNED_RIGHT_SHIFT',
                                                                 'right': {'value': '1'}}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'from'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': 'numTerms'}]}]},
                       {'IfStatement': [{'IdentifierName': 'discountOverlaps'},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numTerms'},
                                                                                                            {'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                      {'IdentifierName': 'Length'}]},
                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                      {'IdentifierName': 'NumOverlap'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numTerms'},
                                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                              {'IdentifierName': 'Length'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'EncodeNormValue'},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                        {'IdentifierName': 'Boost'}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'numTerms'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'numTerms'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'name': {'identifier': 'discountOverlaps'}},
                               'elseStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'numTerms'}},
                                                           'value': {'name': {'identifier': 'getLength'},
                                                                     'scope': {'name': {'identifier': 'state'}}}}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'numTerms'}},
                                                           'value': {'left': {'name': {'identifier': 'getLength'},
                                                                              'scope': {'name': {'identifier': 'state'}}},
                                                                     'operator': 'MINUS',
                                                                     'right': {'name': {'identifier': 'getNumOverlap'},
                                                                               'scope': {'name': {'identifier': 'state'}}}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'numTerms'}}],
                                              'name': {'identifier': 'intToByte4'},
                                              'scope': {'name': {'identifier': 'SmallFloat'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                          {'IdentifierName': 'processChildren'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                        {'IdentifierName': 'ProcessChildren'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'queryTree'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                              {'IdentifierName': 'processChildren'}]},
                                                                                                                            {'TrueLiteralExpression': 'true'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'processChildren'},
                                             'scope': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'processChildren'},
                                                                                      'scope': {}},
                                                                           'value': {'value': 'true'}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'queryTree'}}],
                                                                           'name': {'identifier': 'processChildren'},
                                                                           'scope': {}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'payload'},
                                                                                                                                    {'IdentifierName': 'Length'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]},
                                                                       {'IdentifierName': 'payload'},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'name': {'identifier': 'length'},
                                                                     'scope': {'name': {'identifier': 'payload'}}},
                                                            'operator': 'GREATER',
                                                            'right': {'value': '0'}},
                                              'elseExpr': {},
                                              'thenExpr': {'name': {'identifier': 'payload'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'upto'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'upto'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'name': {'identifier': 'reset'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'CodepointCountFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '5'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                           {'value': '0'},
                                                                           {'value': '5'}],
                                                             'type': {'name': {'identifier': 'CodepointCountFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SpanishAnalyzer'},
                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'type': {'name': {'identifier': 'SpanishAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'nextStartOffset'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'nextStartOffset'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'IsTrue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'Dir'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'dir'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'name': {'identifier': 'assertTrue'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ParenthesizedExpression': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'IdentifierName': '_delegateFieldsProducer'},
                                                                                                                                                                                                                                            {'NullLiteralExpression': 'null'}]}]},
                                                                                                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_delegateFieldsProducer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                                      {'NumericLiteralExpression': '0'}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'var'},
                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_bloomsByFieldName'},
                                                                                                         {'IdentifierName': 'EntrySet'}]},
                                                                       {'ArgumentList': '()'}]},
                                             {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                                              {'MultiplyExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                          {'IdentifierName': 'Key'}]},
                                                                                                                                                                        {'IdentifierName': 'Length'}]},
                                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                        {'IdentifierName': 'NUM_BYTES_CHAR'}]}]}]}]},
                                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                            {'IdentifierName': 'Value'}]},
                                                                                                                                                                          {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'sizeInBytes'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'inner': {'condition': {'inner': {'left': {'name': {'identifier': 'delegateFieldsProducer'}},
                                                                                                               'operator': 'NOT_EQUALS',
                                                                                                               'right': {}}},
                                                                                       'elseExpr': {'value': '0'},
                                                                                       'thenExpr': {'name': {'identifier': 'ramBytesUsed'},
                                                                                                    'scope': {'name': {'identifier': 'delegateFieldsProducer'}}}}},
                                                             'name': {'identifier': 'sizeInBytes'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'sizeInBytes'}},
                                                                       'value': {'left': {'name': {'identifier': 'length'},
                                                                                          'scope': {'name': {'identifier': 'getKey'},
                                                                                                    'scope': {'name': {'identifier': 'entry'}}}},
                                                                                 'operator': 'MULTIPLY',
                                                                                 'right': {'name': {'identifier': 'BYTES'},
                                                                                           'scope': {'name': {'identifier': 'Character'}}}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'sizeInBytes'}},
                                                                       'value': {'name': {'identifier': 'ramBytesUsed'},
                                                                                 'scope': {'name': {'identifier': 'getValue'},
                                                                                           'scope': {'name': {'identifier': 'entry'}}}}}}]},
                               'iterable': {'name': {'identifier': 'entrySet'},
                                            'scope': {'name': {'identifier': 'bloomsByFieldName'}}},
                               'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                           'type': {'name': {'identifier': 'Entry'},
                                                                    'scope': {'name': {'identifier': 'Map'}},
                                                                    'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                      {'name': {'identifier': 'FuzzySet'}}]}}]}},
                              {'expression': {'name': {'identifier': 'sizeInBytes'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'PathToString'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'path'}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'path'},
                                                                                                                                        {'IdentifierName': 'Length'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'path'}},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'path'}}}],
                                              'name': {'identifier': 'pathToString'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'DanishStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'DanishStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'among_var'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'v_1'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'v_2'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v_1'},
                                                                                {'SubtractExpression': [{'IdentifierName': 'm_limit'},
                                                                                                        {'IdentifierName': 'm_cursor'}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'm_cursor'},
                                                                {'IdentifierName': 'I_p1'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_cursor'},
                                                                                {'IdentifierName': 'I_p1'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v_2'},
                                                                                {'IdentifierName': 'm_limit_backward'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_cursor'},
                                                                                {'SubtractExpression': [{'IdentifierName': 'm_limit'},
                                                                                                        {'IdentifierName': 'v_1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_ket'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'among_var'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_2'}]},
                                                                                                                            {'Argument': [{'NumericLiteralExpression': '11'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'among_var'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                                            {'IdentifierName': 'v_2'}]}]},
                                                   {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_bra'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                {'IdentifierName': 'v_2'}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'among_var'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '1'}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SliceDel'},
                                                                                                                  {'ArgumentList': '()'}]}]},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'among_var'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'v_1'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'v_2'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'v_1'}},
                                              'value': {'left': {'name': {'identifier': 'limit'}},
                                                        'operator': 'MINUS',
                                                        'right': {'name': {'identifier': 'cursor'}}}}},
                              {'condition': {'left': {'name': {'identifier': 'cursor'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'I_p1'}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'cursor'}},
                                              'value': {'name': {'identifier': 'I_p1'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'v_2'}},
                                              'value': {'name': {'identifier': 'limit_backward'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'limit_backward'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'cursor'}},
                                              'value': {'left': {'name': {'identifier': 'limit'}},
                                                        'operator': 'MINUS',
                                                        'right': {'name': {'identifier': 'v_1'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ket'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'among_var'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a_2'}},
                                                                      {'value': '11'}],
                                                        'name': {'identifier': 'find_among_b'}}}},
                              {'condition': {'left': {'name': {'identifier': 'among_var'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'limit_backward'}},
                                                                           'value': {'name': {'identifier': 'v_2'}}}},
                                                           {'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bra'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'limit_backward'}},
                                              'value': {'name': {'identifier': 'v_2'}}}},
                              {'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'value': '1'},
                                            'statements': [{'expression': {'name': {'identifier': 'slice_del'}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'among_var'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'WhileStatement': [{'TrueLiteralExpression': 'true'},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                                                                                                                                         {'IdentifierName': 'ReadByte'}]},
                                                                                                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
                                                      {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                                 {'IdentifierName': 'Bytes'}]},
                                                                                                                               {'IdentifierName': 'Length'}]},
                                                                                             {'IdentifierName': 'upto'}]},
                                                                       {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                                       {'IdentifierName': 'Grow'}]},
                                                                                                                                     {'ArgumentList': [{'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                                                                        {'IdentifierName': 'upto'}]}]}]}]}]}]}]},
                                                      {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'b'},
                                                                                             {'IdentifierName': 'ESCAPE'}]},
                                                                       {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                                                                          {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'upto'}]}]}]}]},
                                                                                                                                           {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                                                                                                                       {'IdentifierName': 'ReadByte'}]},
                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]},
                                                                       {'ElseClause': [{'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'b'},
                                                                                                                                         {'IdentifierName': 'NEWLINE'}]},
                                                                                                                   {'Block': [{'BreakStatement': 'break;'}]}]},
                                                                                                  {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                                                                                                                          {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'upto'}]}]}]}]},
                                                                                                                                                           {'IdentifierName': 'b'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                  {'IdentifierName': 'Offset'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scratch'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'IdentifierName': 'upto'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'upto'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'readByte'},
                                                                                                      'scope': {'name': {'identifier': 'in'}}},
                                                                                      'name': {'identifier': 'b'},
                                                                                      'type': {'type': 'BYTE'}}]}},
                                                       {'expression': {'arguments': [{'left': {'value': '1'},
                                                                                      'operator': 'PLUS',
                                                                                      'right': {'name': {'identifier': 'upto'}}}],
                                                                       'name': {'identifier': 'grow'},
                                                                       'scope': {'name': {'identifier': 'scratch'}}}},
                                                       {'condition': {'left': {'name': {'identifier': 'b'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'ESCAPE'}}},
                                                        'elseStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'b'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'name': {'identifier': 'NEWLINE'}}},
                                                                                     'elseStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 'upto'}},
                                                                                                                                                'operator': 'POSTFIX_INCREMENT'},
                                                                                                                                               {'name': {'identifier': 'b'}}],
                                                                                                                                 'name': {'identifier': 'setByteAt'},
                                                                                                                                 'scope': {'name': {'identifier': 'scratch'}}}}]},
                                                                                     'thenStmt': {'statements': [{}]}}]},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 'upto'}},
                                                                                                                   'operator': 'POSTFIX_INCREMENT'},
                                                                                                                  {'name': {'identifier': 'readByte'},
                                                                                                                   'scope': {'name': {'identifier': 'in'}}}],
                                                                                                    'name': {'identifier': 'setByteAt'},
                                                                                                    'scope': {'name': {'identifier': 'scratch'}}}}]}}]},
                               'condition': {'value': 'true'}},
                              {'expression': {'arguments': [{'name': {'identifier': 'upto'}}],
                                              'name': {'identifier': 'setLength'},
                                              'scope': {'name': {'identifier': 'scratch'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'IdentifierName': 'More'},
                                                                                                {'ArgumentList': '()'}]},
                                                                      {'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                           {'IdentifierName': 'IndexOf'}]},
                                                                                                                         {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                     {'IdentifierName': 'CodePointAt'}]},
                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]}]}]}]},
                                                                                               {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'more'}},
                                              'operator': 'AND',
                                              'right': {'left': {'arguments': [{'arguments': [{'name': {'identifier': 'pos'}}],
                                                                                'name': {'identifier': 'codePointAt'},
                                                                                'scope': {'name': {'identifier': 'originalString'}}}],
                                                                 'name': {'identifier': 'indexOf'},
                                                                 'scope': {'name': {'identifier': 's'}}},
                                                        'operator': 'NOT_EQUALS',
                                                        'right': {'expression': {'value': '1'},
                                                                  'operator': 'MINUS'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'FSDirectory'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Activator'},
                                                                                                                            {'IdentifierName': 'CreateInstance'}]},
                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'clazz'}]},
                                                                                                            {'Argument': [{'IdentifierName': 'dir'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'Path'}}},
                                                                                           {'type': {'name': {'identifier': 'LockFactory'}}}],
                                                                             'name': {'identifier': 'getConstructor'},
                                                                             'scope': {'name': {'identifier': 'clazz'}}},
                                                             'name': {'identifier': 'ctor'},
                                                             'type': {'name': {'identifier': 'Constructor'},
                                                                      'typeArguments': [{'extendedType': {'name': {'identifier': 'FSDirectory'}}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'path'}},
                                                            {'name': {'identifier': 'lf'}}],
                                              'name': {'identifier': 'newInstance'},
                                              'scope': {'name': {'identifier': 'ctor'}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_curChar'},
                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input_stream'},
                                                                                                                                                                         {'IdentifierName': 'ReadChar'}]},
                                                                                                                                       {'ArgumentList': '()'}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                      {'IdentifierName': 'IO'}]},
                                                                                                   {'IdentifierName': 'IOException'}]}]},
                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStopStringLiteralDfa_1'},
                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                          {'Argument': [{'IdentifierName': 'active0'}]}]}]}]},
                                                                     {'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'm_curChar'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                        {'ParenthesizedExpression': [{'NumericLiteralExpression': '79'}]}]}]},
                                                               {'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'IdentifierName': 'active0'},
                                                                                                                                                                {'NumericLiteralExpression': '0x10000000L'}]}]},
                                                                                                         {'NumericLiteralExpression': '0L'}]},
                                                                                {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStartNfaWithStates_1'},
                                                                                                                               {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                                                                                 {'Argument': [{'NumericLiteralExpression': '28'}]},
                                                                                                                                                 {'Argument': [{'NumericLiteralExpression': '6'}]}]}]}]}]},
                                                               {'BreakStatement': 'break;'}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'JjStartNfa_1'},
                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                        {'Argument': [{'IdentifierName': 'active0'}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                                       {'name': {'identifier': 'active0'}}],
                                                                                         'name': {'identifier': 'jjStopStringLiteralDfa_1'}}},
                                                                         {'expression': {'value': '1'}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'IOException'},
                                                                        'scope': {'name': {'identifier': 'io'},
                                                                                  'scope': {'name': {'identifier': 'java'}}}}}}],
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'curChar'}},
                                                                           'value': {'name': {'identifier': 'readChar'},
                                                                                     'scope': {'name': {'identifier': 'input_stream'}}}}}]}},
                              {'entries': [{'label': {'value': '79'},
                                            'statements': [{'condition': {'left': {'inner': {'left': {'name': {'identifier': 'active0'}},
                                                                                             'operator': 'BINARY_AND',
                                                                                             'right': {'value': '0x10000000L'}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {'value': '0L'}},
                                                            'thenStmt': {'expression': {'arguments': [{'value': '1'},
                                                                                                      {'value': '28'},
                                                                                                      {'value': '6'}],
                                                                                        'name': {'identifier': 'jjStartNfaWithStates_1'}}}},
                                                           {}]},
                                           {'statements': [{}]}],
                               'selector': {'name': {'identifier': 'curChar'}}},
                              {'expression': {'arguments': [{'value': '0'},
                                                            {'name': {'identifier': 'active0'}}],
                                              'name': {'identifier': 'jjStartNfa_1'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'GetMatchingDocs'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getMatchingDocs'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'm'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'IdentifierName': 'HIRAGANA_ITERATION_MARK'}]},
                                                               {'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'IdentifierName': 'IsHiraganaDakuten'},
                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]},
                                                                                                               {'CastExpression': [{'PredefinedType': 'char'},
                                                                                                                                   {'ParenthesizedExpression': [{'SubtractExpression': [{'IdentifierName': 'c'},
                                                                                                                                                                                        {'NumericLiteralExpression': '1'}]}]}]},
                                                                                                               {'IdentifierName': 'c'}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'IdentifierName': 'HIRAGANA_VOICED_ITERATION_MARK'}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'LookupHiraganaDakuten'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'IdentifierName': 'c'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'name': {'identifier': 'HIRAGANA_ITERATION_MARK'}},
                                            'statements': [{'expression': {'condition': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                                         'name': {'identifier': 'isHiraganaDakuten'}},
                                                                           'elseExpr': {'name': {'identifier': 'c'}},
                                                                           'thenExpr': {'expression': {'inner': {'left': {'name': {'identifier': 'c'}},
                                                                                                                 'operator': 'MINUS',
                                                                                                                 'right': {'value': '1'}}},
                                                                                        'type': {'type': 'CHAR'}}}}]},
                                           {'label': {'name': {'identifier': 'HIRAGANA_VOICED_ITERATION_MARK'}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                           'name': {'identifier': 'lookupHiraganaDakuten'}}}]},
                                           {'statements': [{'expression': {'name': {'identifier': 'c'}}}]}],
                               'selector': {'name': {'identifier': 'm'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Automaton'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NaiveLev1'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'a'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BasicOperations'},
                                                                                                                                            {'IdentifierName': 'Union'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]},
                                                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'TranspositionsOf'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MinimizationOperations'},
                                                                                                            {'IdentifierName': 'Minimize'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'a'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 's'}}],
                                                                             'name': {'identifier': 'naiveLev1'}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Automaton'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'a'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a'}},
                                                                      {'arguments': [{'name': {'identifier': 's'}}],
                                                                       'name': {'identifier': 'transpositionsOf'}}],
                                                        'name': {'identifier': 'union'},
                                                        'scope': {'name': {'identifier': 'Operations'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'a'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a'}},
                                                                      {'name': {'identifier': 'DEFAULT_MAX_DETERMINIZED_STATES'}}],
                                                        'name': {'identifier': 'minimize'},
                                                        'scope': {'name': {'identifier': 'MinimizationOperations'}}}}},
                              {'expression': {'name': {'identifier': 'a'}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OuterInstance'},
                                                                                                                                               {'IdentifierName': 'Description'}]},
                                                                                                             {'IdentifierName': 'd'}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                         {'IdentifierName': 'evaluate'}]},
                                                                                                       {'ArgumentList': '()'}]}]}]},
                                         {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OuterInstance'},
                                                                                                                                                                  {'IdentifierName': 'Description'}]},
                                                                                                                                {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'finallyBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                               'target': {'name': {'identifier': 'description'}},
                                                                               'value': {}}}]},
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'description'}},
                                                                           'value': {'name': {'identifier': 'd'}}}},
                                                           {'expression': {'name': {'identifier': 'evaluate'},
                                                                           'scope': {'name': {'identifier': 's'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordAnalyzer'},
                                                                                                                                        {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordAnalyzer'}}},
                                                             'name': {'identifier': 'analyzer'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'analyzer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ModuloExpression': [{'IdentifierName': 'index'},
                                                                  {'IdentifierName': 'blockSize'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'index'}},
                                              'operator': 'REMAINDER',
                                              'right': {'name': {'identifier': 'blockSize'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                        {'IdentifierName': 'Sum'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'sum'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'sum'}},
                                                                       'value': {'name': {'identifier': 'el'}}}}]},
                               'iterable': {'name': {'identifier': 'arr'}},
                               'variable': {'variables': [{'name': {'identifier': 'el'},
                                                           'type': {'type': 'INT'}}]}},
                              {'expression': {'name': {'identifier': 'sum'}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'TrueLiteralExpression': 'true'},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TestUtil'},
                                                                                                                                                                                                                                                                                     {'IdentifierName': 'RandomUnicodeString'}]},
                                                                                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                                                                                                             {'ArgumentList': '()'}]}]}]}]},
                                                                                                                                                                                                                         {'IdentifierName': 'Trim'}]},
                                                                                                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
                                                      {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                            {'IdentifierName': 'Length'}]},
                                                                                                                          {'NumericLiteralExpression': '0'}]},
                                                                                                 {'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                                   {'IdentifierName': 'IndexOf'}]},
                                                                                                                                                 {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\x00'"}]}]}]},
                                                                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                                                                       {'Block': [{'ReturnStatement': [{'IdentifierName': 's'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'trim'},
                                                                                                      'scope': {'arguments': [{'name': {'identifier': 'random'}}],
                                                                                                                'name': {'identifier': 'randomUnicodeString'},
                                                                                                                'scope': {'name': {'identifier': 'TestUtil'}}}},
                                                                                      'name': {'identifier': 's'},
                                                                                      'type': {'name': {'identifier': 'String'}}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'length'},
                                                                                        'scope': {'name': {'identifier': 's'}}},
                                                                               'operator': 'NOT_EQUALS',
                                                                               'right': {'value': '0'}},
                                                                      'operator': 'AND',
                                                                      'right': {'left': {'arguments': [{'value': '\x00'}],
                                                                                         'name': {'identifier': 'indexOf'},
                                                                                         'scope': {'name': {'identifier': 's'}}},
                                                                                'operator': 'EQUALS',
                                                                                'right': {'expression': {'value': '1'},
                                                                                          'operator': 'MINUS'}}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 's'}}}]}}]},
                               'condition': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                                             {'NumericLiteralExpression': '3'}]},
                                                                  {'EqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                        {'CharacterLiteralExpression': "'k'"}]}]},
                                        {'Block': [{'SwitchStatement': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                     {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                      {'NumericLiteralExpression': '2'}]}]}]}]},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'a'"}]},
                                                                                           {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'o'"}]},
                                                                                           {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'e'"}]},
                                                                                           {'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                                                                                       {'NumericLiteralExpression': '4'}]},
                                                                                                            {'Block': [{'ReturnStatement': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                    {'NumericLiteralExpression': '2'}]}]}]}]},
                                                                                           {'ReturnStatement': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                        {'NumericLiteralExpression': '1'}]}]}]},
                                                                        {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                                                           {'ReturnStatement': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                        {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'len'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'len'}},
                                                      'operator': 'GREATER',
                                                      'right': {'value': '3'}},
                                             'operator': 'AND',
                                             'right': {'left': {'index': {'left': {'name': {'identifier': 'len'}},
                                                                          'operator': 'MINUS',
                                                                          'right': {'value': '1'}},
                                                                'name': {'name': {'identifier': 's'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'value': 'k'}}},
                               'thenStmt': {'entries': [{'label': {'value': 'a'}},
                                                        {'label': {'value': 'o'}},
                                                        {'label': {'value': 'e'},
                                                         'statements': [{'condition': {'left': {'name': {'identifier': 'len'}},
                                                                                       'operator': 'GREATER',
                                                                                       'right': {'value': '4'}},
                                                                         'thenStmt': {'expression': {'left': {'name': {'identifier': 'len'}},
                                                                                                     'operator': 'MINUS',
                                                                                                     'right': {'value': '2'}}}}]},
                                                        {'statements': [{'expression': {'left': {'name': {'identifier': 'len'}},
                                                                                        'operator': 'MINUS',
                                                                                        'right': {'value': '1'}}}]}],
                                            'selector': {'index': {'left': {'name': {'identifier': 'len'}},
                                                                   'operator': 'MINUS',
                                                                   'right': {'value': '2'}},
                                                         'name': {'name': {'identifier': 's'}}}}},
                              {'expression': {'name': {'identifier': 'len'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'doc'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doc'}},
                                              'value': {}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Extensions'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'delimiter'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'delimiter'}}],
                                              'type': {'name': {'identifier': 'Extensions'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TestFull'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IndexOptions'},
                                                                                                                                            {'IdentifierName': 'DOCS_AND_FREQS_AND_POSITIONS'}]}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getCodec'}},
                                                            {'arguments': [{'value': 'testPostingsFormat.testExact'}],
                                                             'name': {'identifier': 'createTempDir'}},
                                                            {'name': {'identifier': 'DOCS_AND_FREQS_AND_POSITIONS'},
                                                             'scope': {'name': {'identifier': 'IndexOptions'}}},
                                                            {'value': 'false'}],
                                              'name': {'identifier': 'testFull'},
                                              'scope': {'name': {'identifier': 'postingsTester'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'R'},
                                             {'IdentifierName': 'subReaders'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                                                                                                           {'IdentifierName': 'GetSumTotalTermFreq'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]}]}]},
                                                        {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'sub'},
                                                                                               {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]},
                                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'total'},
                                                                                                              {'IdentifierName': 'sub'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'total'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'total'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                      'name': {'identifier': 'getSumTotalTermFreq'},
                                                                                                      'scope': {'name': {'identifier': 'reader'}}},
                                                                                      'name': {'identifier': 'sub'},
                                                                                      'type': {'type': 'LONG'}}]}},
                                                       {'check': {'left': {'name': {'identifier': 'sub'}},
                                                                  'operator': 'GREATER_EQUALS',
                                                                  'right': {'value': '0'}}},
                                                       {'check': {'left': {'name': {'identifier': 'sub'}},
                                                                  'operator': 'GREATER_EQUALS',
                                                                  'right': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                            'name': {'identifier': 'getSumDocFreq'},
                                                                            'scope': {'name': {'identifier': 'reader'}}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'total'}},
                                                                       'value': {'name': {'identifier': 'sub'}}}}]},
                               'iterable': {'name': {'identifier': 'subReaders'}},
                               'variable': {'variables': [{'name': {'identifier': 'reader'},
                                                           'type': {'name': {'identifier': 'R'}}}]}},
                              {'expression': {'name': {'identifier': 'total'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TOKENS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_POSITION_INCREMENTS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TYPES'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '2'},
                                                            {'value': '2'},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'BI_GRAM_TOKENS'}},
                                                            {'name': {'identifier': 'BI_GRAM_POSITION_INCREMENTS'}},
                                                            {'name': {'identifier': 'BI_GRAM_TYPES'}},
                                                            {'value': 'true'},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetReaderNoHeader'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'format'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'version'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'valueCount'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'bitsPerValue'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}}],
                                              'name': {'identifier': 'checkVersion'}}},
                              {'entries': [{'label': {'name': {'identifier': 'PACKED_SINGLE_BLOCK'}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'in'}},
                                                                                         {'name': {'identifier': 'valueCount'}},
                                                                                         {'name': {'identifier': 'bitsPerValue'}}],
                                                                           'name': {'identifier': 'create'},
                                                                           'scope': {'name': {'identifier': 'Packed64SingleBlock'}}}}]},
                                           {'label': {'name': {'identifier': 'PACKED'}},
                                            'statements': [{'entries': [{'label': {'value': '8'},
                                                                         'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                      {'name': {'identifier': 'in'}},
                                                                                                                      {'name': {'identifier': 'valueCount'}}],
                                                                                                        'type': {'name': {'identifier': 'Direct8'}}}}]},
                                                                        {'label': {'value': '16'},
                                                                         'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                      {'name': {'identifier': 'in'}},
                                                                                                                      {'name': {'identifier': 'valueCount'}}],
                                                                                                        'type': {'name': {'identifier': 'Direct16'}}}}]},
                                                                        {'label': {'value': '32'},
                                                                         'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                      {'name': {'identifier': 'in'}},
                                                                                                                      {'name': {'identifier': 'valueCount'}}],
                                                                                                        'type': {'name': {'identifier': 'Direct32'}}}}]},
                                                                        {'label': {'value': '64'},
                                                                         'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                      {'name': {'identifier': 'in'}},
                                                                                                                      {'name': {'identifier': 'valueCount'}}],
                                                                                                        'type': {'name': {'identifier': 'Direct64'}}}}]},
                                                                        {'label': {'value': '24'},
                                                                         'statements': [{'condition': {'left': {'name': {'identifier': 'valueCount'}},
                                                                                                       'operator': 'LESS_EQUALS',
                                                                                                       'right': {'name': {'identifier': 'MAX_SIZE'},
                                                                                                                 'scope': {'name': {'identifier': 'Packed8ThreeBlocks'}}}},
                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                                                   {'name': {'identifier': 'in'}},
                                                                                                                                                   {'name': {'identifier': 'valueCount'}}],
                                                                                                                                     'type': {'name': {'identifier': 'Packed8ThreeBlocks'}}}}]}},
                                                                                        {}]},
                                                                        {'label': {'value': '48'},
                                                                         'statements': [{'condition': {'left': {'name': {'identifier': 'valueCount'}},
                                                                                                       'operator': 'LESS_EQUALS',
                                                                                                       'right': {'name': {'identifier': 'MAX_SIZE'},
                                                                                                                 'scope': {'name': {'identifier': 'Packed16ThreeBlocks'}}}},
                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                                                                                   {'name': {'identifier': 'in'}},
                                                                                                                                                   {'name': {'identifier': 'valueCount'}}],
                                                                                                                                     'type': {'name': {'identifier': 'Packed16ThreeBlocks'}}}}]}},
                                                                                        {}]}],
                                                            'selector': {'name': {'identifier': 'bitsPerValue'}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'version'}},
                                                                                         {'name': {'identifier': 'in'}},
                                                                                         {'name': {'identifier': 'valueCount'}},
                                                                                         {'name': {'identifier': 'bitsPerValue'}}],
                                                                           'type': {'name': {'identifier': 'Packed64'}}}}]},
                                           {'statements': [{'expression': {'arguments': [{'left': {'value': 'Unknown '
                                                                                                            'Writer '
                                                                                                            'format: '},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'format'}}}],
                                                                           'type': {'name': {'identifier': 'AssertionError'}}}}]}],
                               'selector': {'name': {'identifier': 'format'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MutableValueStr'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MutableValueStr'},
                                                                                                                                                  {'IdentifierName': 'other'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Value'},
                                                                                                                                                                                          {'IdentifierName': 'CompareTo'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                          {'IdentifierName': 'Value'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'c'},
                                                                 {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'c'}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'Exists'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                {'IdentifierName': 'Exists'}]}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'Exists'},
                                                                       {'NumericLiteralExpression': '1'},
                                                                       {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'exists'}},
                                         'operator': 'OR',
                                         'right': {'left': {'value': '0'},
                                                   'operator': 'EQUALS',
                                                   'right': {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'value'}}}}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'other'}},
                                                                             'type': {'name': {'identifier': 'MutableValueStr'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'MutableValueStr'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'get'},
                                                                                            'scope': {'name': {'identifier': 'value'},
                                                                                                      'scope': {'name': {'identifier': 'b'}}}}],
                                                                             'name': {'identifier': 'compareTo'},
                                                                             'scope': {'name': {'identifier': 'get'},
                                                                                       'scope': {'name': {'identifier': 'value'}}}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'c'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'expression': {'name': {'identifier': 'c'}}}},
                              {'condition': {'left': {'name': {'identifier': 'exists'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'exists'},
                                                       'scope': {'name': {'identifier': 'b'}}}},
                               'thenStmt': {'expression': {'value': '0'}}},
                              {'expression': {'condition': {'name': {'identifier': 'exists'}},
                                              'elseExpr': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'},
                                              'thenExpr': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MutableValueStr'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MutableValueStr'},
                                                                                                                                                  {'IdentifierName': 'other'}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Value'},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                  {'IdentifierName': 'Value'}]}]}]}]},
                                                                      {'EqualsExpression': [{'IdentifierName': 'Exists'},
                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                              {'IdentifierName': 'Exists'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'exists'}},
                                         'operator': 'OR',
                                         'right': {'left': {'value': '0'},
                                                   'operator': 'EQUALS',
                                                   'right': {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'value'}}}}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'other'}},
                                                                             'type': {'name': {'identifier': 'MutableValueStr'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'MutableValueStr'}}}]}},
                              {'expression': {'left': {'arguments': [{'name': {'identifier': 'get'},
                                                                      'scope': {'name': {'identifier': 'value'},
                                                                                'scope': {'name': {'identifier': 'b'}}}}],
                                                       'name': {'identifier': 'equals'},
                                                       'scope': {'name': {'identifier': 'get'},
                                                                 'scope': {'name': {'identifier': 'value'}}}},
                                              'operator': 'AND',
                                              'right': {'left': {'name': {'identifier': 'exists'}},
                                                        'operator': 'EQUALS',
                                                        'right': {'name': {'identifier': 'exists'},
                                                                  'scope': {'name': {'identifier': 'b'}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'charFilter'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'charFilter'},
                                                                                                                                    {'IdentifierName': 'Create'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'IdentifierName': 'reader'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'charFilter'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'reader'}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                           'name': {'identifier': 'create'},
                                                                           'scope': {'name': {'identifier': 'charFilter'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'output'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'Failures'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                   {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'Failures'},
                                                                                                                                                             {'IdentifierName': 'Count'}]}]},
                                                                                                   {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                                                                                   {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Failures'},
                                                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                   {'IdentifierName': 'Eval'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'failures'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'catchClauses': [{'body': {'statements': [{'condition': {'name': {'identifier': 'VERBOSE'},
                                                                                                                                              'scope': {'name': {'identifier': 'LuceneTestCase'}}},
                                                                                                                                'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'MockDirectoryWrapper: '
                                                                                                                                                                                                    'throw '
                                                                                                                                                                                                    'exc'}],
                                                                                                                                                                            'name': {'identifier': 'println'},
                                                                                                                                                                            'scope': {'name': {'identifier': 'out'},
                                                                                                                                                                                      'scope': {'name': {'identifier': 'System'}}}}},
                                                                                                                                                            {'expression': {'arguments': [{'name': {'identifier': 'out'},
                                                                                                                                                                                           'scope': {'name': {'identifier': 'System'}}}],
                                                                                                                                                                            'name': {'identifier': 'printStackTrace'},
                                                                                                                                                                            'scope': {'name': {'identifier': 't'}}}}]}},
                                                                                                                               {'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                                                                                                               'name': {'identifier': 'rethrowAlways'},
                                                                                                                                               'scope': {'name': {'identifier': 'IOUtils'}}}}]},
                                                                                                       'parameter': {'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 't'},
                                                                                                                     'type': {'name': {'identifier': 'Throwable'}}}}],
                                                                                     'tryBlock': {'statements': [{'expression': {'arguments': [{}],
                                                                                                                                 'name': {'identifier': 'eval'},
                                                                                                                                 'scope': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                                           'name': {'identifier': 'get'},
                                                                                                                                           'scope': {'name': {'identifier': 'failures'}}}}}]}}]},
                                                            'compare': {'left': {'name': {'identifier': 'i'}},
                                                                        'operator': 'LESS',
                                                                        'right': {'name': {'identifier': 'size'},
                                                                                  'scope': {'name': {'identifier': 'failures'}}}},
                                                            'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                               'name': {'identifier': 'i'},
                                                                                               'type': {'type': 'INT'}}]}],
                                                            'update': [{'expression': {'name': {'identifier': 'i'}},
                                                                        'operator': 'POSTFIX_INCREMENT'}]}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'm_prefix'}]},
                                                                                {'IdentifierName': 'prefix'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'prefix'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'prefix'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IRectangle'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ctx'},
                                                                                                                                                                {'IdentifierName': 'WorldBounds'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ctx'},
                                                                                                        {'IdentifierName': 'MakePoint'}]},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'randomIntBetween'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'WB'},
                                                                                                                                                                                                                      {'IdentifierName': 'MinX'}]}]}]},
                                                                                                                                                  {'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'WB'},
                                                                                                                                                                                                                      {'IdentifierName': 'MaxX'}]}]}]}]}]}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'IdentifierName': 'randomIntBetween'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'WB'},
                                                                                                                                                                                                                      {'IdentifierName': 'MinY'}]}]}]},
                                                                                                                                                  {'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'WB'},
                                                                                                                                                                                                                      {'IdentifierName': 'MaxY'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getWorldBounds'},
                                                                             'scope': {'name': {'identifier': 'ctx'}}},
                                                             'name': {'identifier': 'WB'},
                                                             'type': {'name': {'identifier': 'Rectangle'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'expression': {'name': {'identifier': 'getMinX'},
                                                                                           'scope': {'name': {'identifier': 'WB'}}},
                                                                            'type': {'type': 'INT'}},
                                                                           {'expression': {'name': {'identifier': 'getMaxX'},
                                                                                           'scope': {'name': {'identifier': 'WB'}}},
                                                                            'type': {'type': 'INT'}}],
                                                             'name': {'identifier': 'randomIntBetween'}},
                                                            {'arguments': [{'expression': {'name': {'identifier': 'getMinY'},
                                                                                           'scope': {'name': {'identifier': 'WB'}}},
                                                                            'type': {'type': 'INT'}},
                                                                           {'expression': {'name': {'identifier': 'getMaxY'},
                                                                                           'scope': {'name': {'identifier': 'WB'}}},
                                                                            'type': {'type': 'INT'}}],
                                                             'name': {'identifier': 'randomIntBetween'}}],
                                              'name': {'identifier': 'makePoint'},
                                              'scope': {'name': {'identifier': 'ctx'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Index'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'DrillDown'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'index'}}},
                              {'expression': {'name': {'identifier': 'drillDown'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Util'},
                                                                                                                                                                                {'IdentifierName': 'Fst'}]},
                                                                                                                                              {'IdentifierName': 'Util'}]},
                                                                                                            {'IdentifierName': 'ToBytesRef'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'scratchBytes'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'finalLastToken'},
                                                                                                            {'IdentifierName': 'Grow'}]},
                                                                          {'ArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'finalLastToken'},
                                                                                                                                                               {'IdentifierName': 'Length'}]},
                                                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'scratchBytes'},
                                                                                                                                                               {'IdentifierName': 'Length'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'finalLastToken'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'finalLastToken'},
                                                                                                            {'IdentifierName': 'Append'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'scratchBytes'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'seen'},
                                                                                                                                                                                                                {'IdentifierName': 'Contains'}]},
                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'finalLastToken'}]}]}]},
                                                                                                                                                    {'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'finalLastToken'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'IdentifierName': 'lenSav'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ret'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'scratchBytes'}}],
                                              'name': {'identifier': 'toBytesRef'},
                                              'scope': {'name': {'identifier': 'Util'}}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'length'},
                                                                      'scope': {'name': {'identifier': 'finalLastToken'}}},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'length'},
                                                                       'scope': {'name': {'identifier': 'scratchBytes'}}}}],
                                              'name': {'identifier': 'grow'},
                                              'scope': {'name': {'identifier': 'finalLastToken'}}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'finalLastToken'}}},
                                                             'name': {'identifier': 'lenSav'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'scratchBytes'}}],
                                              'name': {'identifier': 'append'},
                                              'scope': {'name': {'identifier': 'finalLastToken'}}}},
                              {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'get'},
                                                                                                     'scope': {'name': {'identifier': 'finalLastToken'}}}],
                                                                                      'name': {'identifier': 'contains'},
                                                                                      'scope': {'name': {'identifier': 'seen'}}},
                                                                             'operator': 'EQUALS',
                                                                             'right': {'value': 'false'}},
                                                             'name': {'identifier': 'ret'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'lenSav'}}],
                                              'name': {'identifier': 'setLength'},
                                              'scope': {'name': {'identifier': 'finalLastToken'}}}},
                              {'expression': {'name': {'identifier': 'ret'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                                          {'IdentifierName': 'Min'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'numWords'}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                                          {'IdentifierName': 'numWords'}]}]}]}]}]}]}]}]},
                       {'WhileStatement': [{'GreaterThanOrEqualExpression': [{'PreDecrementExpression': [{'IdentifierName': 'pos'}]},
                                                                             {'NumericLiteralExpression': '0'}]},
                                           {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]},
                                                                                                                                                       {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                                      {'IdentifierName': 'bits'}]},
                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]}]}]},
                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                       {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'numWords'}},
                                                                                           {'name': {'identifier': 'numWords'},
                                                                                            'scope': {'name': {'identifier': 'other'}}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'pos'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'pos'}},
                                                                                                  'name': {'name': {'identifier': 'bits'}}},
                                                                                         'operator': 'BINARY_AND',
                                                                                         'right': {'index': {'name': {'identifier': 'pos'}},
                                                                                                   'name': {'name': {'identifier': 'bits'},
                                                                                                            'scope': {'name': {'identifier': 'other'}}}}}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'expression': {'value': 'true'}}}]},
                               'condition': {'left': {'expression': {'name': {'identifier': 'pos'}},
                                                      'operator': 'PREFIX_DECREMENT'},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'value': '0'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'directory'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'NewDirectory'},
                                                                                                          {'ArgumentList': '()'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexWriter'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'RandomIndexWriter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                                                                {'Argument': [{'IdentifierName': 'directory'}]},
                                                                                                                                {'Argument': [{'InvocationExpression': [{'IdentifierName': 'newIndexWriterConfig'},
                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexReader'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'indexWriter'},
                                                                                                                  {'IdentifierName': 'Reader'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexSearcher'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'NewSearcher'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'indexReader'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'directory'}},
                                              'value': {'name': {'identifier': 'newDirectory'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'analyzer'}},
                                              'value': {'arguments': [{'name': {'identifier': 'random'}}],
                                                        'type': {'name': {'identifier': 'MockAnalyzer'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'indexWriter'}},
                                              'value': {'arguments': [{'name': {'identifier': 'random'}},
                                                                      {'name': {'identifier': 'directory'}},
                                                                      {'arguments': [{'name': {'identifier': 'random'}},
                                                                                     {'name': {'identifier': 'analyzer'}}],
                                                                       'name': {'identifier': 'newIndexWriterConfig'},
                                                                       'scope': {'name': {'identifier': 'LuceneTestCase'}}}],
                                                        'type': {'name': {'identifier': 'RandomIndexWriter'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'indexReader'}},
                                              'value': {'name': {'identifier': 'getReader'},
                                                        'scope': {'name': {'identifier': 'indexWriter'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'indexSearcher'}},
                                              'value': {'arguments': [{'name': {'identifier': 'indexReader'}}],
                                                        'name': {'identifier': 'newSearcher'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'FieldCount'},
                                                                                                                                {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'DocStatus'},
                                                                                                                                   {'SimpleMemberAccessExpression': [{'IdentifierName': 'Status'},
                                                                                                                                                                     {'IdentifierName': 'STARTED'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'StartDocument'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'numVectorFields'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'DocStatus'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Status'},
                                                                                                                  {'IdentifierName': 'STARTED'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'FieldCount'},
                                                                                {'IdentifierName': 'numVectorFields'}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'DocCount'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'fieldCount'}},
                                         'operator': 'EQUALS',
                                         'right': {'value': '0'}}},
                              {'check': {'left': {'name': {'identifier': 'docStatus'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {'name': {'identifier': 'STARTED'},
                                                   'scope': {'name': {'identifier': 'Status'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'numVectorFields'}}],
                                              'name': {'identifier': 'startDocument'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'docStatus'}},
                                              'value': {'name': {'identifier': 'STARTED'},
                                                        'scope': {'name': {'identifier': 'Status'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'fieldCount'}},
                                              'value': {'name': {'identifier': 'numVectorFields'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'docCount'}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenPair'},
                                                                                                                                                                {'IdentifierName': 'To'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'IsToExist'},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'to'}]}]}]}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SegTokenPair'}]}]},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SegTokenPair'}]}]},
                                                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'newlist'},
                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenPair'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tokenPairListTable'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'to'}]}]}]},
                                                                                                            {'IdentifierName': 'newlist'}]}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SegTokenPair'}]}]},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'tokenPairListTable'},
                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'to'}]}]}]}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenPairList'},
                                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenPair'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'to'},
                                                                             'scope': {'name': {'identifier': 'tokenPair'}}},
                                                             'name': {'identifier': 'to'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'to'}}],
                                                            'name': {'identifier': 'isToExist'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'to'}}],
                                                                                                          'name': {'identifier': 'get'},
                                                                                                          'scope': {'name': {'identifier': 'tokenPairListTable'}}},
                                                                                          'name': {'identifier': 'tokenPairList'},
                                                                                          'type': {'name': {'identifier': 'List'},
                                                                                                   'typeArguments': [{'name': {'identifier': 'SegTokenPair'}}]}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'tokenPair'}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'tokenPairList'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                                                          'name': {'identifier': 'newlist'},
                                                                                          'type': {'name': {'identifier': 'ArrayList'},
                                                                                                   'typeArguments': [{'name': {'identifier': 'SegTokenPair'}}]}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'tokenPair'}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'newlist'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'to'}},
                                                                                         {'name': {'identifier': 'newlist'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'tokenPairListTable'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FileInfo'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FileInfo'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'filename'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'f'},
                                                                                                                                      {'IdentifierName': 'Directory'}]},
                                                                                                    {'IdentifierName': 'Exists'}]}]},
                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'f'},
                                                                                                                                                               {'IdentifierName': 'Directory'}]},
                                                                                                                             {'IdentifierName': 'Create'}]},
                                                                                           {'ArgumentList': '()'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fst'},
                                                                                                            {'IdentifierName': 'Save'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'filename'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'Paths'}}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'name': {'identifier': 'Path'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getParent'},
                                                             'scope': {'name': {'identifier': 'p'}}}],
                                              'name': {'identifier': 'createDirectories'},
                                              'scope': {'name': {'identifier': 'Files'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'p'}}],
                                              'name': {'identifier': 'save'},
                                              'scope': {'name': {'identifier': 'fst'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAttr'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Stem'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                                               {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                        {'IdentifierName': 'newlen'}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAttr'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                                                                     {'name': {'identifier': 'length'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                                                                       'name': {'identifier': 'stem'},
                                                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}},
                                                                                                                       'name': {'identifier': 'newlen'},
                                                                                                                       'type': {'type': 'INT'}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'newlen'}}],
                                                                                                        'name': {'identifier': 'setLength'},
                                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MultiPhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MultiPhraseQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'ArrayType': [{'IdentifierName': 'Token'},
                                                            {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                             {'IdentifierName': 'INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'IdentifierName': 'Term'},
                                                                                                                               {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'TapTerms'},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'tap'}]}]}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tap'},
                                                                                                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                                                                                                                                         {'IdentifierName': 'PositionIncrement'}]},
                                                                                                                                                                                       {'NumericLiteralExpression': '1'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mpq'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'terms'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'pos'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestZeroPosIncrSloppy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'mpq'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mpq'},
                                                                                                                  {'IdentifierName': 'Slop'}]},
                                                                                {'NumericLiteralExpression': '2'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestZeroPosIncrSloppy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'mpq'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Builder'},
                                                                                      'scope': {'name': {'identifier': 'MultiPhraseQuery'}}}},
                                                             'name': {'identifier': 'mpqb'},
                                                             'type': {'name': {'identifier': 'Builder'},
                                                                      'scope': {'name': {'identifier': 'MultiPhraseQuery'}}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'tap'}}],
                                                                                                      'name': {'identifier': 'tapTerms'}},
                                                                                      'name': {'identifier': 'terms'},
                                                                                      'type': {'componentType': {'name': {'identifier': 'Term'}},
                                                                                               'origin': 'TYPE'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'getPositionIncrement'},
                                                                                                               'scope': {'index': {'value': '0'},
                                                                                                                         'name': {'name': {'identifier': 'tap'}}}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'value': '1'}},
                                                                                      'name': {'identifier': 'pos'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'terms'}},
                                                                                     {'name': {'identifier': 'pos'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'mpqb'}}}}]},
                               'iterable': {'name': {'identifier': 'INCR_0_QUERY_TOKENS_AND_OR_NO_MATCHN'}},
                               'variable': {'variables': [{'name': {'identifier': 'tap'},
                                                           'type': {'componentType': {'name': {'identifier': 'Token'}},
                                                                    'origin': 'NAME'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'build'},
                                                             'scope': {'name': {'identifier': 'mpqb'}}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'doTestZeroPosIncrSloppy'}}},
                              {'expression': {'arguments': [{'value': '2'}],
                                              'name': {'identifier': 'setSlop'},
                                              'scope': {'name': {'identifier': 'mpqb'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'build'},
                                                             'scope': {'name': {'identifier': 'mpqb'}}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'doTestZeroPosIncrSloppy'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'o'},
                                                                                                                 {'IdentifierName': 'MatchAllDocsQuery'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MatchAllDocsQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MatchAllDocsQuery'},
                                                                                                                                                  {'IdentifierName': 'o'}]}]}]}]}]},
                       {'ReturnStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                    {'IdentifierName': 'Boost'}]},
                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                    {'IdentifierName': 'Boost'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'o'}}],
                                              'name': {'identifier': 'sameClassAs'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'current'}]},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'Block'},
                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                {'IdentifierName': 'blockSize'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                              {'IdentifierName': 'blocks'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                            {'IdentifierName': 'current'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'blockSize'}},
                                                      'operator': 'MULTIPLY',
                                                      'right': {'expression': {'inner': {'left': {'name': {'identifier': 'size'},
                                                                                                  'scope': {'name': {'identifier': 'blocks'}}},
                                                                                         'operator': 'PLUS',
                                                                                         'right': {'value': '1'}}},
                                                                'type': {'type': 'LONG'}}},
                                             'operator': 'GREATER',
                                             'right': {'name': {'identifier': 'MAX_VALUE'},
                                                       'scope': {'name': {'identifier': 'Integer'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'cannot '
                                                                                                   'store '
                                                                                                   'more '
                                                                                                   'than '
                                                                                                   '2 '
                                                                                                   'GB '
                                                                                                   'in '
                                                                                                   'CharBlockArray'}],
                                                                           'type': {'name': {'identifier': 'IllegalStateException'}}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'current'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'blockSize'},
                                                                       'scope': {}}],
                                                        'type': {'name': {'identifier': 'Block'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'current'},
                                                             'scope': {}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'blocks'},
                                                        'scope': {}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Purge'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'forcePurge'}]}]}]}]}]},
                                         {'FinallyClause': [{'Block': [{'IfStatement': [{'IdentifierName': 'triggerMerge'},
                                                                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaybeMerge'},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MergeTrigger'},
                                                                                                                                                                                                                        {'IdentifierName': 'SEGMENT_FLUSH'}]}]},
                                                                                                                                                                        {'Argument': [{'IdentifierName': 'UNBOUNDED_MAX_MERGE_SEGMENTS'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'finallyBlock': {'statements': [{'condition': {'name': {'identifier': 'triggerMerge'}},
                                                                'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getMergePolicy'},
                                                                                                                           'scope': {'name': {'identifier': 'config'}}},
                                                                                                                          {'name': {'identifier': 'SEGMENT_FLUSH'},
                                                                                                                           'scope': {'name': {'identifier': 'MergeTrigger'}}},
                                                                                                                          {'name': {'identifier': 'UNBOUNDED_MAX_MERGE_SEGMENTS'}}],
                                                                                                            'name': {'identifier': 'maybeMerge'}}}]}}]},
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'forcePurge'}}],
                                                                           'name': {'identifier': 'purge'}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'TokenPending'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'positions'},
                                                                                                                                                                                                    {'IdentifierName': 'Get'}]},
                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'InputPos'}]}]}]},
                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CaptureState'},
                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'TokenPending'},
                                                                                                            {'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalNotExpression': [{'IdentifierName': 'InsertPending'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'InsertPending'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'tokenPending'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'captureState'}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'arguments': [{'name': {'identifier': 'inputPos'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'positions'}}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'tokenPending'}},
                                                                           'value': {'value': 'false'}}}]}},
                              {'check': {'expression': {'name': {'identifier': 'insertPending'}},
                                         'operator': 'LOGICAL_COMPLEMENT'}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'insertPending'}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAttr'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Stem'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                                               {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                        {'IdentifierName': 'newlen'}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAttr'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                                                                     {'name': {'identifier': 'length'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                                                                       'name': {'identifier': 'stem'},
                                                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}},
                                                                                                                       'name': {'identifier': 'newlen'},
                                                                                                                       'type': {'type': 'INT'}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'newlen'}}],
                                                                                                        'name': {'identifier': 'setLength'},
                                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                              {'IdentifierName': 'Input'}]},
                                                                                                            {'IdentifierName': 'ReadBytes'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]},
                                                                                            {'Argument': [{'IdentifierName': 'offset'}]},
                                                                                            {'Argument': [{'IdentifierName': 'len'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'b'}},
                                                            {'name': {'identifier': 'offset'}},
                                                            {'name': {'identifier': 'len'}}],
                                              'name': {'identifier': 'readBytes'},
                                              'scope': {'name': {'identifier': 'input'},
                                                        'scope': {}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'End'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LessThanOrEqualExpression': [{'IdentifierName': 'bufferStart'},
                                                                                                                                         {'IdentifierName': 'bufferEnd'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'offset'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'bufferStart'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'bufferEnd'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'endOffset'},
                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Character'},
                                                                                                                                                                      {'IdentifierName': 'CharCount'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'endOffset'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'CorrectOffset'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'endOffset'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'offsetAtt'},
                                                                                                            {'IdentifierName': 'SetOffset'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'endOffset'}]},
                                                                                            {'Argument': [{'IdentifierName': 'endOffset'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'end'},
                                              'scope': {}}},
                              {'check': {'left': {'name': {'identifier': 'bufferStart'}},
                                         'operator': 'LESS_EQUALS',
                                         'right': {'name': {'identifier': 'bufferEnd'}}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'}},
                                                             'name': {'identifier': 'endOffset'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'endOffset'}},
                                                                       'value': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                                                                'name': {'name': {'identifier': 'buffer'}}}],
                                                                                 'name': {'identifier': 'charCount'},
                                                                                 'scope': {'name': {'identifier': 'Character'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'bufferEnd'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'bufferStart'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'endOffset'}},
                                              'value': {'arguments': [{'name': {'identifier': 'endOffset'}}],
                                                        'name': {'identifier': 'correctOffset'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'endOffset'}},
                                                            {'name': {'identifier': 'endOffset'}}],
                                              'name': {'identifier': 'setOffset'},
                                              'scope': {'name': {'identifier': 'offsetAtt'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'XmlElement'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetChildByTagName'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'e'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'tagName'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'NotEqualsExpression': [{'IdentifierName': 'child'},
                                                                                                {'NullLiteralExpression': 'null'}]},
                                                                       {'InvocationExpression': [{'IdentifierName': 'GetText'},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'child'}]}]}]},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'e'}},
                                                                                           {'name': {'identifier': 'tagName'}}],
                                                                             'name': {'identifier': 'getChildByTagName'}},
                                                             'name': {'identifier': 'child'},
                                                             'type': {'name': {'identifier': 'Element'}}}]}},
                              {'expression': {'condition': {'left': {'name': {'identifier': 'child'}},
                                                            'operator': 'NOT_EQUALS',
                                                            'right': {}},
                                              'elseExpr': {},
                                              'thenExpr': {'arguments': [{'name': {'identifier': 'child'}}],
                                                           'name': {'identifier': 'getText'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                {'IdentifierName': 'NumberOfDocuments'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                {'IdentifierName': 'TotalTermFreq'}]}]}]}]}]},
                       {'ReturnStatement': [{'MultiplyExpression': [{'IdentifierName': 'tfn'},
                                                                    {'CastExpression': [{'PredefinedType': 'float'},
                                                                                        {'ParenthesizedExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimilarityBase'},
                                                                                                                                                                                 {'IdentifierName': 'Log2'}]},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                                                                                  {'DivideExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'IdentifierName': 'N'},
                                                                                                                                                                                                                                                                        {'NumericLiteralExpression': '1'}]}]},
                                                                                                                                                                                                                        {'ParenthesizedExpression': [{'AddExpression': [{'IdentifierName': 'F'},
                                                                                                                                                                                                                                                                        {'NumericLiteralExpression': '0.5'}]}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getNumberOfDocuments'},
                                                                             'scope': {'name': {'identifier': 'stats'}}},
                                                             'name': {'identifier': 'N'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getTotalTermFreq'},
                                                                             'scope': {'name': {'identifier': 'stats'}}},
                                                             'name': {'identifier': 'F'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'value': '1'},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'left': {'inner': {'left': {'name': {'identifier': 'N'}},
                                                                                                                         'operator': 'PLUS',
                                                                                                                         'right': {'value': '1'}}},
                                                                                                      'operator': 'DIVIDE',
                                                                                                      'right': {'inner': {'left': {'name': {'identifier': 'F'}},
                                                                                                                          'operator': 'PLUS',
                                                                                                                          'right': {'value': '0.5'}}}}}],
                                                                             'name': {'identifier': 'log2'}},
                                                             'name': {'identifier': 'A'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'A'}},
                                                       'operator': 'MULTIPLY',
                                                       'right': {'name': {'identifier': 'aeTimes1pTfn'}}},
                                              'operator': 'MULTIPLY',
                                              'right': {'inner': {'left': {'value': '1'},
                                                                  'operator': 'MINUS',
                                                                  'right': {'left': {'value': '1'},
                                                                            'operator': 'DIVIDE',
                                                                            'right': {'inner': {'left': {'value': '1'},
                                                                                                'operator': 'PLUS',
                                                                                                'right': {'name': {'identifier': 'tfn'}}}}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'LEFT_ID'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'LEFT_ID'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckVersion'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'version'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BulkOperation'},
                                                                                                        {'IdentifierName': 'Of'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'format'}]},
                                                                                        {'Argument': [{'IdentifierName': 'bitsPerValue'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}}],
                                              'name': {'identifier': 'checkVersion'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'format'}},
                                                            {'name': {'identifier': 'bitsPerValue'}}],
                                              'name': {'identifier': 'of'},
                                              'scope': {'name': {'identifier': 'BulkOperation'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Analyzer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AnalyzerAnonymousInnerClassHelper2'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                            {'Argument': [{'IdentifierName': 'a'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '100'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '8192'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'random'}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                                                                                                                           'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                                                                                                                          {'value': 'false'}],
                                                                                                                                                                            'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                                                                                            'name': {'identifier': 'tokenizer'},
                                                                                                                                                            'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                                                                                                                             {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                                                                                                           {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                                                                                                                            'type': {'name': {'identifier': 'ShingleFilter'}}}],
                                                                                                                                             'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]},
                                                                                                     'name': {'identifier': 'createComponents'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'fieldName'},
                                                                                                                     'type': {'name': {'identifier': 'String'}}}],
                                                                                                     'type': {'name': {'identifier': 'TokenStreamComponents'}}}],
                                                                             'type': {'name': {'identifier': 'Analyzer'}}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'left': {'value': '100'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}},
                                                            {'value': '8192'}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'NumericLiteralExpression': '100'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                         {'IdentifierName': 'AddDocument'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DocHelper'},
                                                                                                                                                                                                   {'IdentifierName': 'CreateDocument'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]},
                                                                                                                                                                                   {'Argument': [{'IdentifierName': 'indexName'}]},
                                                                                                                                                                                   {'Argument': [{'NumericLiteralExpression': '4'}]}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'multiSegment'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                        {'IdentifierName': 'ForceMerge'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}},
                                                                                                    {'name': {'identifier': 'indexName'}},
                                                                                                    {'value': '4'}],
                                                                                      'name': {'identifier': 'createDocument'},
                                                                                      'scope': {'name': {'identifier': 'DocHelper'}}}],
                                                                       'name': {'identifier': 'addDocument'},
                                                                       'scope': {'name': {'identifier': 'w'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'value': '100'}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'condition': {'expression': {'name': {'identifier': 'multiSegment'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': '1'}],
                                                                           'name': {'identifier': 'forceMerge'},
                                                                           'scope': {'name': {'identifier': 'w'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'chars'},
                                                                                                                                                                {'IdentifierName': 'Offset'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'chars'},
                                                                                                                                                                                   {'IdentifierName': 'Offset'}]},
                                                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'chars'},
                                                                                                                                                                                   {'IdentifierName': 'Length'}]}]}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'upto'},
                                                                   {'IdentifierName': 'limit'}]},
                                           {'Block': [{'IfStatement': [{'EqualsExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'chars'},
                                                                                                                                                            {'IdentifierName': 'Chars'}]},
                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'upto'}]}]}]}]},
                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'SynonymMap'},
                                                                                                                               {'IdentifierName': 'WORD_SEPARATOR'}]}]},
                                                                       {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'wordCount'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'wordCount'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '1'},
                                                             'name': {'identifier': 'wordCount'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'},
                                                                             'scope': {'name': {'identifier': 'chars'}}},
                                                             'name': {'identifier': 'upto'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'offset'},
                                                                                      'scope': {'name': {'identifier': 'chars'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'length'},
                                                                                       'scope': {'name': {'identifier': 'chars'}}}},
                                                             'name': {'identifier': 'limit'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'index': {'expression': {'name': {'identifier': 'upto'}},
                                                                                         'operator': 'POSTFIX_INCREMENT'},
                                                                               'name': {'name': {'identifier': 'chars'},
                                                                                        'scope': {'name': {'identifier': 'chars'}}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'WORD_SEPARATOR'},
                                                                                'scope': {'name': {'identifier': 'SynonymMap'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'wordCount'}},
                                                                                                    'operator': 'POSTFIX_INCREMENT'}}]}}]},
                               'condition': {'left': {'name': {'identifier': 'upto'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'limit'}}}},
                              {'expression': {'name': {'identifier': 'wordCount'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RegExp'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RegExp'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'kind'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Kind'},
                                                                                                                  {'IdentifierName': 'REGEXP_INTERSECTION'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'exp1'}]},
                                                                                {'IdentifierName': 'exp1'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'exp2'}]},
                                                                                {'IdentifierName': 'exp2'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'r'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'RegExp'}}},
                                                             'name': {'identifier': 'r'},
                                                             'type': {'name': {'identifier': 'RegExp'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'kind'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'REGEXP_INTERSECTION'},
                                                        'scope': {'name': {'identifier': 'Kind'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'exp1'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'exp1'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'exp2'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'exp2'}}}},
                              {'expression': {'name': {'identifier': 'r'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'typeAtt'},
                                                                                                                                              {'IdentifierName': 'Type'}]},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                                                                                                                                    {'IdentifierName': 'ToUpper'}]},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                                 {'IdentifierName': 'Buffer'}]},
                                                                                                                                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]},
                                                                                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'arguments': [{'index': {'value': '0'},
                                                                                                                        'name': {'name': {'identifier': 'buffer'},
                                                                                                                                 'scope': {'name': {'identifier': 'termAtt'}}}}],
                                                                                                         'name': {'identifier': 'toUpperCase'},
                                                                                                         'scope': {'name': {'identifier': 'Character'}}}],
                                                                                          'name': {'identifier': 'valueOf'},
                                                                                          'scope': {'name': {'identifier': 'String'}}}],
                                                                           'name': {'identifier': 'setType'},
                                                                           'scope': {'name': {'identifier': 'typeAtt'}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'HungarianStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'HungarianStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MaybeYield'},
                                                                                                        {'ArgumentList': '()'}]}]},
                                                     {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                      {'IdentifierName': 'ListAll'}]},
                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'maybeYield'}}},
                              {'expression': {'name': {'identifier': 'listAll'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                    {'ArgumentList': '()'}]},
                                                                                                                                                                                          {'IdentifierName': 'Next'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '5'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'len'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'len'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'NextBytes'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'payload'},
                                                                                                                                            {'IdentifierName': 'Bytes'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'payload'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'IdentifierName': 'len'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'payload'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '5'}],
                                                                             'name': {'identifier': 'nextInt'},
                                                                             'scope': {'name': {'identifier': 'random'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'len'}}],
                                                                             'type': {'name': {'identifier': 'BytesRef'}}},
                                                             'name': {'identifier': 'payload'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bytes'},
                                                             'scope': {'name': {'identifier': 'payload'}}}],
                                              'name': {'identifier': 'nextBytes'},
                                              'scope': {'name': {'identifier': 'random'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'length'},
                                                         'scope': {'name': {'identifier': 'payload'}}},
                                              'value': {'name': {'identifier': 'len'}}}},
                              {'expression': {'name': {'identifier': 'payload'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'Upto'},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Tokens'},
                                                                                                  {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Token'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'Tokens'},
                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'Upto'}]}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ClearAttributes'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                        {'IdentifierName': 'SetEmpty'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                        {'IdentifierName': 'Append'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                                                                                  {'IdentifierName': 'ToString'}]},
                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PosIncrAtt'},
                                                                                                                                              {'IdentifierName': 'PositionIncrement'}]},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                              {'IdentifierName': 'PositionIncrement'}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PosLengthAtt'},
                                                                                                                                              {'IdentifierName': 'PositionLength'}]},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                              {'IdentifierName': 'PositionLength'}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OffsetAtt'},
                                                                                                                                        {'IdentifierName': 'SetOffset'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                                                        {'IdentifierName': 'StartOffset'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                                                        {'IdentifierName': 'EndOffset'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PayloadAtt'},
                                                                                                                                              {'IdentifierName': 'Payload'}]},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'token'},
                                                                                                                                              {'IdentifierName': 'Payload'}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'upto'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'tokens'}}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'clearAttributes'}}},
                                                           {'expression': {'arguments': [{'expression': {'name': {'identifier': 'offsetAtt'}},
                                                                                          'type': {'name': {'identifier': 'Token'}}}],
                                                                           'name': {'identifier': 'copyTo'},
                                                                           'scope': {'index': {'expression': {'name': {'identifier': 'upto'}},
                                                                                               'operator': 'POSTFIX_INCREMENT'},
                                                                                     'name': {'name': {'identifier': 'tokens'}}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OrderedSlopTest1Equal'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '4'},
                                                                                                                                                                       {'NumericLiteralExpression': '5'},
                                                                                                                                                                       {'NumericLiteralExpression': '6'},
                                                                                                                                                                       {'NumericLiteralExpression': '7'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '2'},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '4'},
                                                                                        {'value': '5'},
                                                                                        {'value': '6'},
                                                                                        {'value': '7'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'orderedSlopTest1Equal'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OrderedSlopTest1Equal'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '3'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '4'},
                                                                                                                                                                       {'NumericLiteralExpression': '5'},
                                                                                                                                                                       {'NumericLiteralExpression': '6'},
                                                                                                                                                                       {'NumericLiteralExpression': '7'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '3'},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '4'},
                                                                                        {'value': '5'},
                                                                                        {'value': '6'},
                                                                                        {'value': '7'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'orderedSlopTest1Equal'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OrderedSlopTest1Equal'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '4'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '4'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'orderedSlopTest1Equal'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OrderedSlopTest1Equal'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '4'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '4'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'orderedSlopTest1Equal'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OrderedSlopTest1Equal'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '4'},
                                                                                                                                                                       {'NumericLiteralExpression': '5'},
                                                                                                                                                                       {'NumericLiteralExpression': '6'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '1'},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '4'},
                                                                                        {'value': '5'},
                                                                                        {'value': '6'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'orderedSlopTest1Equal'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'payload'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'positionIncrement'},
                                                                                {'NumericLiteralExpression': '1'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'flags'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'startOffset'},
                                                                                {'SimpleAssignmentExpression': [{'IdentifierName': 'endOffset'},
                                                                                                                {'NumericLiteralExpression': '0'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'type'},
                                                                                {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TokenAttributes'},
                                                                                                                                                    {'IdentifierName': 'TypeAttribute'}]},
                                                                                                                  {'IdentifierName': 'DEFAULT_TYPE'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'flags'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'payload'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'TermInfo'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'TermInfo'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'infos'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TermInfo'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TestUtil'},
                                                                                                                                                                                                                                    {'IdentifierName': 'RandomUnicodeString'}]},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'startOffset'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'endOffset'}]},
                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'WeightedPhraseInfo'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'infos'}]},
                                                                                            {'Argument': [{'IdentifierName': 'boost'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'LinkedList'}}},
                                                             'name': {'identifier': 'infos'},
                                                             'type': {'name': {'identifier': 'LinkedList'},
                                                                      'typeArguments': [{'name': {'identifier': 'TermInfo'}}]}}]}},
                              {'expression': {'arguments': [{'arguments': [{'arguments': [{'name': {'identifier': 'random'}}],
                                                                            'name': {'identifier': 'randomUnicodeString'},
                                                                            'scope': {'name': {'identifier': 'TestUtil'}}},
                                                                           {'name': {'identifier': 'startOffset'}},
                                                                           {'name': {'identifier': 'endOffset'}},
                                                                           {'value': '0'},
                                                                           {'value': '0'}],
                                                             'type': {'name': {'identifier': 'TermInfo'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'infos'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'infos'}},
                                                            {'name': {'identifier': 'boost'}}],
                                              'type': {'name': {'identifier': 'WeightedPhraseInfo'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Analyzer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AnalyzerAnonymousInnerClassHelper'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'a'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'newAttributeFactory'}},
                                                                                                                                                                                          {'name': {'identifier': 'DEFAULT_DELIMITER'}},
                                                                                                                                                                                          {'name': {'identifier': 'DEFAULT_DELIMITER'}},
                                                                                                                                                                                          {'name': {'identifier': 'DEFAULT_SKIP'}}],
                                                                                                                                                                            'type': {'name': {'identifier': 'ReversePathHierarchyTokenizer'}}},
                                                                                                                                                            'name': {'identifier': 'tokenizer'},
                                                                                                                                                            'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                                                                                                                             {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                                                                                                           {'name': {'identifier': 'tokenizer'}}],
                                                                                                                                             'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]},
                                                                                                     'name': {'identifier': 'createComponents'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'fieldName'},
                                                                                                                     'type': {'name': {'identifier': 'String'}}}],
                                                                                                     'type': {'name': {'identifier': 'TokenStreamComponents'}}}],
                                                                             'type': {'name': {'identifier': 'Analyzer'}}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}},
                                                            {'value': '20'},
                                                            {'value': 'false'},
                                                            {'value': 'false'}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'RepeatingTokenizer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'Val'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'Random'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'PercentDocs'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'MaxTF'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'val'}},
                                                                           {'name': {'identifier': 'random'}},
                                                                           {'name': {'identifier': 'percentDocs'}},
                                                                           {'name': {'identifier': 'maxTF'}}],
                                                             'type': {'name': {'identifier': 'RepeatingTokenizer'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'other'}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'other'},
                                                                                                                 {'IdentifierName': 'LevenshteinAutomataAttribute'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'automata'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'LevenshteinAutomataAttribute'},
                                                                                                                                                                                         {'IdentifierName': 'other'}]}]},
                                                                                                                                        {'IdentifierName': 'automata'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'other'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'other'}},
                                                                      'type': {'name': {'identifier': 'LevenshteinAutomataAttributeImpl'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'automata'}},
                                                            {'name': {'identifier': 'automata'},
                                                             'scope': {'inner': {'expression': {'name': {'identifier': 'other'}},
                                                                                 'type': {'name': {'identifier': 'LevenshteinAutomataAttributeImpl'}}}}}],
                                              'name': {'identifier': 'equals'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'SizeDocs'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'info'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'info'}},
                                                            {'name': {'identifier': 'writer'}}],
                                              'name': {'identifier': 'sizeDocs'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'savedState'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RestoreState'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'savedState'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'savedState'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SaveTermBuffer'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                                                                               {'IdentifierName': 'IncrementToken'}]},
                                                                                                                             {'ArgumentList': '()'}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'IdentifierName': 'lastWasCommon'},
                                                                 {'ParenthesizedExpression': [{'LogicalAndExpression': [{'IdentifierName': 'IsCommon'},
                                                                                                                        {'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                                                     {'IdentifierName': 'Length'}]},
                                                                                                                                                   {'NumericLiteralExpression': '0'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'savedState'},
                                                                                                            {'InvocationExpression': [{'IdentifierName': 'CaptureState'},
                                                                                                                                      {'ArgumentList': '()'}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'GramToken'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SaveTermBuffer'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'savedState'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'elseStmt': {'condition': {'expression': {'name': {'identifier': 'incrementToken'},
                                                                         'scope': {'name': {'identifier': 'input'}}},
                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                            'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'savedState'}}],
                                                                           'name': {'identifier': 'restoreState'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'savedState'}},
                                                                           'value': {}}},
                                                           {'expression': {'name': {'identifier': 'saveTermBuffer'}}},
                                                           {'expression': {'value': 'true'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'lastWasCommon'}},
                                             'operator': 'OR',
                                             'right': {'inner': {'left': {'name': {'identifier': 'isCommon'}},
                                                                 'operator': 'AND',
                                                                 'right': {'left': {'name': {'identifier': 'length'},
                                                                                    'scope': {'name': {'identifier': 'buffer'}}},
                                                                           'operator': 'GREATER',
                                                                           'right': {'value': '0'}}}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'savedState'}},
                                                                           'value': {'name': {'identifier': 'captureState'}}}},
                                                           {'expression': {'name': {'identifier': 'gramToken'}}},
                                                           {'expression': {'value': 'true'}}]}},
                              {'expression': {'name': {'identifier': 'saveTermBuffer'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'wordOffset'}]}]},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'IdentifierName': 'wordOffset'},
                                                                                                                                    {'IdentifierName': 'numWords'}]}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'end'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'popCount'},
                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Number'},
                                                                                                                                                                      {'IdentifierName': 'BitCount'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'popCount'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'popCount'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'popCount'}},
                                                                       'value': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                                                                'name': {'name': {'identifier': 'arr'}}}],
                                                                                 'name': {'identifier': 'bitCount'},
                                                                                 'scope': {'name': {'identifier': 'Long'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'wordOffset'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'left': {'name': {'identifier': 'wordOffset'}},
                                                                                  'operator': 'PLUS',
                                                                                  'right': {'name': {'identifier': 'numWords'}}},
                                                                  'name': {'identifier': 'end'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'popCount'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'char'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cells'},
                                                                                                                                                                                                                            {'IdentifierName': 'Keys'}]},
                                                                                                                                                                                          {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'i'},
                                                                                                     {'IdentifierName': 'MoveNext'}]},
                                                                   {'ArgumentList': '()'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'char'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                             {'IdentifierName': 'Current'}]}]}]}]}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Cell'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'At'},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'LogicalOrExpression': [{'GreaterThanOrEqualExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                  {'IdentifierName': 'cmd'}]},
                                                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                                              {'GreaterThanOrEqualExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                  {'IdentifierName': '@ref'}]},
                                                                                                                                {'NumericLiteralExpression': '0'}]}]},
                                                                     {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'size'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'size'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                             'scope': {'name': {'identifier': 'keySet'},
                                                                                       'scope': {'name': {'identifier': 'cells'}}}},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{'name': {'identifier': 'Character'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'size'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'next'},
                                                                                                      'scope': {'name': {'identifier': 'i'}}},
                                                                                      'name': {'identifier': 'c'},
                                                                                      'type': {'name': {'identifier': 'Character'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                                                      'name': {'identifier': 'at'}},
                                                                                      'name': {'identifier': 'e'},
                                                                                      'type': {'name': {'identifier': 'Cell'}}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'cmd'},
                                                                                        'scope': {'name': {'identifier': 'e'}}},
                                                                               'operator': 'GREATER_EQUALS',
                                                                               'right': {'value': '0'}},
                                                                      'operator': 'OR',
                                                                      'right': {'left': {'name': {'identifier': 'ref'},
                                                                                         'scope': {'name': {'identifier': 'e'}}},
                                                                                'operator': 'GREATER_EQUALS',
                                                                                'right': {'value': '0'}}},
                                                        'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'size'}},
                                                                                                    'operator': 'POSTFIX_INCREMENT'}}]}}]},
                               'compare': {'name': {'identifier': 'hasNext'},
                                           'scope': {'name': {'identifier': 'i'}}}},
                              {'expression': {'name': {'identifier': 'size'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertSplit'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '_originalIndex'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0.1'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0.1'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'originalIndex'}},
                                                            {'value': '0.1'},
                                                            {'value': '0.1'}],
                                              'name': {'identifier': 'assertSplit'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'slot1'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'slot2'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'val1'},
                                                                                                {'IdentifierName': 'Bytes'}]},
                                                              {'IdentifierName': 'MISSING_BYTES'}]},
                                        {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'val2'},
                                                                                                                            {'IdentifierName': 'Bytes'}]},
                                                                                          {'IdentifierName': 'MISSING_BYTES'}]},
                                                                    {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]}]},
                                                   {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'val2'},
                                                                                                                                 {'IdentifierName': 'Bytes'}]},
                                                                                               {'IdentifierName': 'MISSING_BYTES'}]},
                                                                         {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'val1'},
                                                                                                        {'IdentifierName': 'CompareTo'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'val2'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'name': {'identifier': 'slot1'}},
                                                                             'name': {'name': {'identifier': 'values'}}},
                                                             'name': {'identifier': 'val1'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'expression': {'variables': [{'initializer': {'index': {'name': {'identifier': 'slot2'}},
                                                                             'name': {'name': {'identifier': 'values'}}},
                                                             'name': {'identifier': 'val2'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'val1'}},
                                                            {'name': {'identifier': 'val2'}}],
                                              'name': {'identifier': 'compareValues'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                  {'IdentifierName': 'Value'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'source'},
                                                                                                                                            {'IdentifierName': 'GetNextDocData'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                                                                            {'IdentifierName': 'Value'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'get'},
                                                                            'scope': {'name': {'identifier': 'dd'}}}],
                                                             'name': {'identifier': 'getNextDocData'},
                                                             'scope': {'name': {'identifier': 'source'}}}],
                                              'name': {'identifier': 'set'},
                                              'scope': {'name': {'identifier': 'dd'}}}},
                              {'expression': {'value': '1'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'offset'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                   {'IdentifierName': 'l'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'value'}]}]},
                                                      {'DoStatement': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'j'}]}]}]}]},
                                                                                                                                {'IdentifierName': 'value'}]}]},
                                                                       {'GreaterThanExpression': [{'PreDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'j'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'offset'}},
                                                             'name': {'identifier': 'j'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'packed'}}},
                                                             'name': {'identifier': 'l'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'value'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'expression': {'name': {'identifier': 'value'}},
                                                                       'operator': 'POSTFIX_DECREMENT'}},
                                                       {'body': {'expression': {'operator': 'ASSIGN',
                                                                                'target': {'index': {'expression': {'name': {'identifier': 'j'}},
                                                                                                     'operator': 'POSTFIX_INCREMENT'},
                                                                                           'name': {'name': {'identifier': 'result'}}},
                                                                                'value': {'name': {'identifier': 'value'}}}},
                                                        'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                                               'operator': 'PREFIX_DECREMENT'},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}}}]},
                               'condition': {'left': {'name': {'identifier': 'i'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'l'}}}},
                              {'expression': {'name': {'identifier': 'j'}}}]}},
 {'cs_ast': {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                            {'IdentifierName': 'NotSupportedException'}]},
                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'UNSUPPORTED_MSG'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'UNSUPPORTED_MSG'}}],
                                              'type': {'name': {'identifier': 'UnsupportedOperationException'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'CloneTree'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'cloneTree'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TestUtil'},
                                                                                                        {'IdentifierName': 'FieldSupportsHugeBinaryDocValues'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'field'}}],
                                              'name': {'identifier': 'fieldSupportsHugeBinaryDocValues'},
                                              'scope': {'name': {'identifier': 'TestUtil'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OuterInstance'},
                                                                                                                                      {'IdentifierName': 'ByteTestField'}]},
                                                                                                    {'IdentifierName': 'Equals'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ByteEncodingBoostSimilarity'},
                                                                                                      {'ArgumentList': '()'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'IdentifierName': '@delegate'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'field'}}],
                                             'name': {'identifier': 'equals'},
                                             'scope': {'name': {'identifier': 'BYTE_TEST_FIELD'}}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'delegate'}}}]},
                               'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'ByteEncodingBoostSimilarity'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'remainingBits'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'remainingBits'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'IsExpression': [{'IdentifierName': 'node'},
                                                                                   {'IdentifierName': 'TokenizedPhraseQueryNode'}]},
                                                                 {'IsExpression': [{'IdentifierName': 'node'},
                                                                                   {'IdentifierName': 'MultiPhraseQueryNode'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SlopQueryNode'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                        {'IdentifierName': 'defaultPhraseSlop'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'node'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'node'}},
                                                      'type': {'name': {'identifier': 'TokenizedPhraseQueryNode'}}},
                                             'operator': 'OR',
                                             'right': {'expression': {'name': {'identifier': 'node'}},
                                                       'type': {'name': {'identifier': 'MultiPhraseQueryNode'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'node'}},
                                                                                         {'name': {'identifier': 'defaultPhraseSlop'},
                                                                                          'scope': {}}],
                                                                           'type': {'name': {'identifier': 'SlopQueryNode'}}}}]}},
                              {'expression': {'name': {'identifier': 'node'}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'numTop'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                               {'IdentifierName': 'Current'}]},
                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                           {'IdentifierName': 'Terms'}]},
                                                                                                                                                                         {'IdentifierName': 'Next'}]},
                                                                                                                                       {'ArgumentList': '()'}]}]}]},
                                                    {'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                {'IdentifierName': 'Current'}]},
                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queue'},
                                                                                                                                                                     {'IdentifierName': 'Add'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                                     {'ElseClause': [{'Block': []}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numTop'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'top'},
                                                                                                      'scope': {'name': {'identifier': 'queue'}}},
                                                                                      'name': {'identifier': 'top'},
                                                                                      'type': {'name': {'identifier': 'TermsEnumWithSlice'}}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'current'},
                                                                                  'scope': {'name': {'identifier': 'top'}}},
                                                                       'value': {'name': {'identifier': 'next'},
                                                                                 'scope': {'name': {'identifier': 'terms'},
                                                                                           'scope': {'name': {'identifier': 'top'}}}}}},
                                                       {'condition': {'left': {'name': {'identifier': 'current'},
                                                                               'scope': {'name': {'identifier': 'top'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'updateTop'},
                                                                                                    'scope': {'name': {'identifier': 'queue'}}}}]},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'pop'},
                                                                                                    'scope': {'name': {'identifier': 'queue'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numTop'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'numTop'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'endState'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                        {'IdentifierName': 'End'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RestoreState'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'endState'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'endState'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'endState'}}],
                                                                           'name': {'identifier': 'restoreState'}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'end'},
                                                                           'scope': {}}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                                                          {'IdentifierName': 'WriteVInt64'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'WriteRecursively'},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'output'}]},
                                                                                                                          {'Argument': [{'IdentifierName': 'root'}]}]}]}]},
                                                     {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'count'}}],
                                              'name': {'identifier': 'writeVLong'},
                                              'scope': {'name': {'identifier': 'output'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'output'}},
                                                            {'name': {'identifier': 'root'}}],
                                              'name': {'identifier': 'writeRecursively'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'main'},
                                                                                                        {'IdentifierName': 'GetFilePointer'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getFilePointer'},
                                              'scope': {'name': {'identifier': 'main'}}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_queue'},
                                                                                                                                {'IdentifierName': 'Top'}]},
                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                     {'GreaterThanExpression': [{'IdentifierName': 'target'},
                                                                                                {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_queue'},
                                                                                                                                                                    {'IdentifierName': 'Top'}]},
                                                                                                                                  {'IdentifierName': 'DocID'}]}]}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DocsAndPositionsEnum'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_queue'},
                                                                                                                                                                                                                         {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
                                                      {'IfStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'postings'},
                                                                                                                                                            {'IdentifierName': 'Advance'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'target'}]}]}]},
                                                                                                {'IdentifierName': 'NO_MORE_DOCS'}]},
                                                                       {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_queue'},
                                                                                                                                                                       {'IdentifierName': 'Add'}]},
                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'postings'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'NextDoc'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'top'},
                                                                             'scope': {'name': {'identifier': 'docsQueue'}}},
                                                             'name': {'identifier': 'top'},
                                                             'type': {'name': {'identifier': 'PostingsEnum'}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'target'}}],
                                                                       'name': {'identifier': 'advance'},
                                                                       'scope': {'name': {'identifier': 'top'}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'top'}},
                                                                       'value': {'name': {'identifier': 'updateTop'},
                                                                                 'scope': {'name': {'identifier': 'docsQueue'}}}}}]},
                               'condition': {'left': {'name': {'identifier': 'docID'},
                                                      'scope': {'name': {'identifier': 'top'}}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'target'}}}},
                              {'expression': {'name': {'identifier': 'docID'},
                                              'scope': {'name': {'identifier': 'top'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'among_var'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_ket'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'among_var'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_7'}]},
                                                                                                                            {'Argument': [{'NumericLiteralExpression': '7'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'among_var'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_bra'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'among_var'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '1'}]},
                                                               {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'r_RV'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SliceDel'},
                                                                                                                  {'ArgumentList': '()'}]}]},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'among_var'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ket'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'among_var'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a_7'}},
                                                                      {'value': '7'}],
                                                        'name': {'identifier': 'find_among_b'}}}},
                              {'condition': {'left': {'name': {'identifier': 'among_var'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bra'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'value': '1'},
                                            'statements': [{'condition': {'expression': {'name': {'identifier': 'r_RV'}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                                                           {'expression': {'name': {'identifier': 'slice_del'}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'among_var'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'HungarianLightStemFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'HungarianLightStemFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'among_var'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'v_1'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'v_2'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v_1'},
                                                                                {'SubtractExpression': [{'IdentifierName': 'm_limit'},
                                                                                                        {'IdentifierName': 'm_cursor'}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'm_cursor'},
                                                                {'IdentifierName': 'I_pV'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_cursor'},
                                                                                {'IdentifierName': 'I_pV'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'v_2'},
                                                                                {'IdentifierName': 'm_limit_backward'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_cursor'},
                                                                                {'SubtractExpression': [{'IdentifierName': 'm_limit'},
                                                                                                        {'IdentifierName': 'v_1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_ket'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'among_var'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_6'}]},
                                                                                                                            {'Argument': [{'NumericLiteralExpression': '120'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'among_var'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                                            {'IdentifierName': 'v_2'}]}]},
                                                   {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_bra'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'among_var'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                                                        {'IdentifierName': 'v_2'}]}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '1'}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SliceDel'},
                                                                                                                  {'ArgumentList': '()'}]}]},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_limit_backward'},
                                                                                {'IdentifierName': 'v_2'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'among_var'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'v_1'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'v_2'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'v_1'}},
                                              'value': {'left': {'name': {'identifier': 'limit'}},
                                                        'operator': 'MINUS',
                                                        'right': {'name': {'identifier': 'cursor'}}}}},
                              {'condition': {'left': {'name': {'identifier': 'cursor'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'I_pV'}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'cursor'}},
                                              'value': {'name': {'identifier': 'I_pV'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'v_2'}},
                                              'value': {'name': {'identifier': 'limit_backward'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'limit_backward'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'cursor'}},
                                              'value': {'left': {'name': {'identifier': 'limit'}},
                                                        'operator': 'MINUS',
                                                        'right': {'name': {'identifier': 'v_1'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ket'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'among_var'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a_6'}},
                                                                      {'value': '120'}],
                                                        'name': {'identifier': 'find_among_b'}}}},
                              {'condition': {'left': {'name': {'identifier': 'among_var'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'limit_backward'}},
                                                                           'value': {'name': {'identifier': 'v_2'}}}},
                                                           {'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bra'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'limit_backward'}},
                                                                           'value': {'name': {'identifier': 'v_2'}}}},
                                                           {'expression': {'value': 'false'}}]},
                                           {'label': {'value': '1'},
                                            'statements': [{'expression': {'name': {'identifier': 'slice_del'}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'among_var'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'limit_backward'}},
                                              'value': {'name': {'identifier': 'v_2'}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'InsertUpto'},
                                                                {'IdentifierName': 'OutputPos'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'InsertToken'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ClearAttributes'},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                        {'IdentifierName': 'SetEmpty'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'PosIncAtt'},
                                                                                                                                              {'IdentifierName': 'PositionIncrement'}]},
                                                                                                            {'NumericLiteralExpression': '0'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermAtt'},
                                                                                                                                        {'IdentifierName': 'Append'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'TestPosition'},
                                                                                                                                                                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'positions'},
                                                                                                                                                                                                                                                                                     {'IdentifierName': 'Get'}]},
                                                                                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'OutputPos'}]}]}]}]}]},
                                                                                                                                                                        {'IdentifierName': 'Fact'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OffsetAtt'},
                                                                                                                                        {'IdentifierName': 'SetOffset'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'positions'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Get'}]},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'OutputPos'}]}]}]},
                                                                                                                                                                        {'IdentifierName': 'StartOffset'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'positions'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Get'}]},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'OutputPos'},
                                                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                                                                                        {'IdentifierName': 'EndOffset'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'InsertUpto'},
                                                                                                            {'IdentifierName': 'OutputPos'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'insertUpto'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'outputPos'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'insertToken'}}},
                                                           {'expression': {'name': {'identifier': 'clearAttributes'}}},
                                                           {'expression': {'name': {'identifier': 'setEmpty'},
                                                                           'scope': {'name': {'identifier': 'termAtt'}}}},
                                                           {'expression': {'arguments': [{'value': '0'}],
                                                                           'name': {'identifier': 'setPositionIncrement'},
                                                                           'scope': {'name': {'identifier': 'posIncAtt'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'getFact'},
                                                                                          'scope': {'arguments': [{'name': {'identifier': 'outputPos'}}],
                                                                                                    'name': {'identifier': 'get'},
                                                                                                    'scope': {'name': {'identifier': 'positions'}}}}],
                                                                           'name': {'identifier': 'append'},
                                                                           'scope': {'name': {'identifier': 'termAtt'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'startOffset'},
                                                                                          'scope': {'arguments': [{'name': {'identifier': 'outputPos'}}],
                                                                                                    'name': {'identifier': 'get'},
                                                                                                    'scope': {'name': {'identifier': 'positions'}}}},
                                                                                         {'name': {'identifier': 'endOffset'},
                                                                                          'scope': {'arguments': [{'left': {'name': {'identifier': 'outputPos'}},
                                                                                                                   'operator': 'PLUS',
                                                                                                                   'right': {'value': '1'}}],
                                                                                                    'name': {'identifier': 'get'},
                                                                                                    'scope': {'name': {'identifier': 'positions'}}}}],
                                                                           'name': {'identifier': 'setOffset'},
                                                                           'scope': {'name': {'identifier': 'offsetAtt'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'insertUpto'}},
                                                                           'value': {'name': {'identifier': 'outputPos'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'otherState'},
                                                                                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                                                                                    {'IsExpression': [{'IdentifierName': 'otherState'},
                                                                                                                                                      {'IdentifierName': 'BlockTermState'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalOrExpression': [{'LogicalNotExpression': [{'IdentifierName': 'doOrd'}]},
                                                                                                                                   {'LessThanExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'BlockTermState'},
                                                                                                                                                                                                                                              {'IdentifierName': 'otherState'}]}]},
                                                                                                                                                                                             {'IdentifierName': 'Ord'}]},
                                                                                                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                             {'IdentifierName': 'numTerms'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                            {'IdentifierName': 'CopyFrom'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'otherState'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'seekPending'},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexIsCurrent'},
                                                                                {'FalseLiteralExpression': 'false'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                            {'IdentifierName': 'CopyBytes'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'target'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'indexEnum'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'terms '
                                                                                                   'index '
                                                                                                   'was '
                                                                                                   'not '
                                                                                                   'loaded'}],
                                                                           'type': {'name': {'identifier': 'IllegalStateException'}}}}]}},
                              {'check': {'left': {'name': {'identifier': 'ord'}},
                                         'operator': 'LESS',
                                         'right': {'name': {'identifier': 'numTerms'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'ord'}}],
                                                             'name': {'identifier': 'seek'},
                                                             'scope': {'name': {'identifier': 'indexEnum'}}}],
                                              'name': {'identifier': 'seek'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'nextBlock'}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'check': {'name': {'identifier': 'result'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'indexIsCurrent'}},
                                              'value': {'value': 'true'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'didIndexNext'}},
                                              'value': {'value': 'false'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'seekPending'}},
                                              'value': {'value': 'false'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ord'},
                                                         'scope': {'name': {'identifier': 'state'}}},
                                              'value': {'left': {'name': {'identifier': 'ord'},
                                                                 'scope': {'name': {'identifier': 'indexEnum'}}},
                                                        'operator': 'MINUS',
                                                        'right': {'value': '1'}}}},
                              {'check': {'left': {'name': {'identifier': 'ord'},
                                                  'scope': {'name': {'identifier': 'state'}}},
                                         'operator': 'GREATER_EQUALS',
                                         'right': {'expression': {'value': '1'},
                                                   'operator': 'MINUS'}},
                               'message': {'left': {'value': 'ord='},
                                           'operator': 'PLUS',
                                           'right': {'name': {'identifier': 'ord'},
                                                     'scope': {'name': {'identifier': 'state'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'term'},
                                                             'scope': {'name': {'identifier': 'indexEnum'}}}],
                                              'name': {'identifier': 'copyBytes'},
                                              'scope': {'name': {'identifier': 'term'}}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'inner': {'left': {'name': {'identifier': 'ord'}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'name': {'identifier': 'ord'},
                                                                                                                'scope': {'name': {'identifier': 'state'}}}}},
                                                                             'type': {'type': 'INT'}},
                                                             'name': {'identifier': 'left'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': '_next'}},
                                                                                      'name': {'identifier': 'term'},
                                                                                      'type': {'name': {'identifier': 'BytesRef'}}}]}},
                                                       {'check': {'left': {'name': {'identifier': 'term'}},
                                                                  'operator': 'NOT_EQUALS',
                                                                  'right': {}}},
                                                       {'expression': {'expression': {'name': {'identifier': 'left'}},
                                                                       'operator': 'POSTFIX_DECREMENT'}},
                                                       {'check': {'name': {'identifier': 'indexIsCurrent'}}}]},
                               'condition': {'left': {'name': {'identifier': 'left'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ticket'},
                                                                                                                                          {'IdentifierName': 'SetFailed'}]},
                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setFailed'},
                                              'scope': {'name': {'identifier': 'ticket'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DirectoryReader'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RunData'},
                                                                                                                                                                                          {'IdentifierName': 'GetIndexReader'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DirectoryReader'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DirectoryReader'},
                                                                                                                                                                                          {'IdentifierName': 'OpenIfChanged'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'nr'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RunData'},
                                                                                                                                        {'IdentifierName': 'SetIndexReader'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'nr'}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nr'},
                                                                                                                                        {'IdentifierName': 'DecRef'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                            {'IdentifierName': 'DecRef'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getIndexReader'},
                                                                             'scope': {'name': {'identifier': 'getRunData'}}},
                                                             'name': {'identifier': 'r'},
                                                             'type': {'name': {'identifier': 'DirectoryReader'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'r'}}],
                                                                             'name': {'identifier': 'openIfChanged'},
                                                                             'scope': {'name': {'identifier': 'DirectoryReader'}}},
                                                             'name': {'identifier': 'nr'},
                                                             'type': {'name': {'identifier': 'DirectoryReader'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'nr'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'nr'}}],
                                                                           'name': {'identifier': 'setIndexReader'},
                                                                           'scope': {'name': {'identifier': 'getRunData'}}}},
                                                           {'expression': {'name': {'identifier': 'decRef'},
                                                                           'scope': {'name': {'identifier': 'nr'}}}}]}},
                              {'expression': {'name': {'identifier': 'decRef'},
                                              'scope': {'name': {'identifier': 'r'}}}},
                              {'expression': {'value': '1'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Get'},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                                                        {'IdentifierName': 'BoolVal'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'boolVal'},
                                              'scope': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                        'name': {'identifier': 'get'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'SubtractExpression': [{'AddExpression': [{'ParenthesizedExpression': [{'LeftShiftExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                                                              {'IdentifierName': 'curBufIndex'}]}]},
                                                                                                                                             {'IdentifierName': 'chunkSizePower'}]}]},
                                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'curBuf'},
                                                                                                                         {'IdentifierName': 'Position'}]}]},
                                                                    {'IdentifierName': 'offset'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'getFilePointer'},
                                                       'scope': {}},
                                              'operator': 'MINUS',
                                              'right': {'name': {'identifier': 'offset'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SpanPositionCheckQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'SpanQuery'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_match'},
                                                                                                                                                                                                              {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'rewritten'},
                                                                 {'IdentifierName': 'm_match'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'clone'},
                                                                                                            {'CastExpression': [{'IdentifierName': 'SpanPositionCheckQuery'},
                                                                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                            {'IdentifierName': 'Clone'}]},
                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clone'},
                                                                                                                                              {'IdentifierName': 'm_match'}]},
                                                                                                            {'IdentifierName': 'rewritten'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'clone'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                                            'name': {'identifier': 'rewrite'},
                                                                                            'scope': {'name': {'identifier': 'match'}}},
                                                                             'type': {'name': {'identifier': 'SpanQuery'}}},
                                                             'name': {'identifier': 'rewritten'},
                                                             'type': {'name': {'identifier': 'SpanQuery'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'rewritten'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'match'}}},
                               'thenStmt': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                                                      'type': {'name': {'identifier': 'AssertionError'}}}}]},
                                                                              'parameter': {'isVarArgs': 'false',
                                                                                            'name': {'identifier': 'e'},
                                                                                            'type': {'name': {'identifier': 'CloneNotSupportedException'}}}}],
                                                            'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'clone'},
                                                                                                                                                      'scope': {}},
                                                                                                                                       'type': {'name': {'identifier': 'SpanPositionCheckQuery'}}},
                                                                                                                       'name': {'identifier': 'clone'},
                                                                                                                       'type': {'name': {'identifier': 'SpanPositionCheckQuery'}}}]}},
                                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'match'},
                                                                                                                   'scope': {'name': {'identifier': 'clone'}}},
                                                                                                        'value': {'name': {'identifier': 'rewritten'}}}},
                                                                                        {'expression': {'name': {'identifier': 'clone'}}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                              'name': {'identifier': 'rewrite'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_mergeTerm'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tenum'},
                                                                                                                                            {'IdentifierName': 'Next'}]},
                                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'mergeTerm'}},
                                              'value': {'name': {'identifier': 'next'},
                                                        'scope': {'name': {'identifier': 'tenum'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                   {'NumericLiteralExpression': '3'}]},
                                        {'Block': [{'SwitchStatement': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                     {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'a'"}]},
                                                                                           {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'e'"}]},
                                                                                           {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'i'"}]},
                                                                                           {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'o'"}]},
                                                                                           {'ReturnStatement': [{'SubtractExpression': [{'IdentifierName': 'len'},
                                                                                                                                        {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'len'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '3'}},
                               'thenStmt': {'entries': [{'label': {'value': 'a'}},
                                                        {'label': {'value': 'e'}},
                                                        {'label': {'value': 'i'}},
                                                        {'label': {'value': 'o'},
                                                         'statements': [{'expression': {'left': {'name': {'identifier': 'len'}},
                                                                                        'operator': 'MINUS',
                                                                                        'right': {'value': '1'}}}]}],
                                            'selector': {'index': {'left': {'name': {'identifier': 'len'}},
                                                                   'operator': 'MINUS',
                                                                   'right': {'value': '1'}},
                                                         'name': {'name': {'identifier': 's'}}}}},
                              {'expression': {'name': {'identifier': 'len'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'CleanupSession'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'sessionId'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'sessionID'}}],
                                              'name': {'identifier': 'cleanupSession'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'numThreadStatesActive'},
                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'threadStates'},
                                                                                                                                {'IdentifierName': 'Length'}]}]},
                                                                      {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ThreadState'},
                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'threadStates'},
                                                                                                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'numThreadStatesActive'}]}]}]}]}]}]}]},
                                                                                 {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'threadState'},
                                                                                                                                                                      {'IdentifierName': '@Lock'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                 {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                                                                                 {'TryStatement': [{'Block': [{'IfStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'threadState'},
                                                                                                                                                                 {'IdentifierName': 'IsActive'}]},
                                                                                                                               {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'numThreadStatesActive'}]}]},
                                                                                                                                          {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                                                                                               {'IdentifierName': 'Assert'}]},
                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'threadState'},
                                                                                                                                                                                                                                                                                     {'IdentifierName': 'dwpt'}]},
                                                                                                                                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                                                                                                                                          {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'unlock'},
                                                                                                                                                                                                   {'FalseLiteralExpression': 'false'}]}]},
                                                                                                                                          {'ReturnStatement': [{'IdentifierName': 'threadState'}]}]}]},
                                                                                                              {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                                                                   {'IdentifierName': 'Assert'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'AssertUnreleasedThreadStatesInactive'},
                                                                                                                                                                                                                           {'ArgumentList': '()'}]}]}]}]}]},
                                                                                                              {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                                                                                                   {'FinallyClause': [{'Block': [{'IfStatement': [{'IdentifierName': 'unlock'},
                                                                                                                                                  {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'threadState'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Unlock'}]},
                                                                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
                                                     {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ie'}}],
                                                                                                                  'type': {'name': {'identifier': 'ThreadInterruptedException'}}}}]},
                                                                          'parameter': {'isVarArgs': 'false',
                                                                                        'name': {'identifier': 'ie'},
                                                                                        'type': {'name': {'identifier': 'InterruptedException'}}}}],
                                                        'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'wait'}}}]}}]},
                               'condition': {'name': {'identifier': 'aborted'}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                             'type': {'name': {'identifier': 'ThreadState'}}},
                                                             'name': {'identifier': 'threadState'},
                                                             'type': {'name': {'identifier': 'ThreadState'}}}]}},
                              {'expression': {'name': {'identifier': 'lock'},
                                              'scope': {'name': {'identifier': 'threadState'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'threadState'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'threadStates'}}}},
                              {'expression': {'name': {'identifier': 'threadState'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'doc'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'analyzer'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doc'}},
                                              'value': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'analyzer'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rnd'},
                                                                                                                                                                                                                                                                                 {'IdentifierName': 'Next'}]},
                                                                                                                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxSize'}]}]}]},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Convert'},
                                                                                                                                                                         {'IdentifierName': 'ToInt32'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rnd'},
                                                                                                                                                                                                                                   {'IdentifierName': 'Next'}]},
                                                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Arrays'},
                                                                                                        {'IdentifierName': 'AsList'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'random'}},
                                                             'name': {'identifier': 'rnd'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'Integer'}},
                                                                             'levels': [{'dimension': {'left': {'arguments': [{'name': {'identifier': 'maxSize'}}],
                                                                                                                'name': {'identifier': 'nextInt'},
                                                                                                                'scope': {'name': {'identifier': 'rnd'}}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'componentType': {'name': {'identifier': 'Integer'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'a'}}},
                                                                       'value': {'arguments': [{'arguments': [{'name': {'identifier': 'length'},
                                                                                                               'scope': {'name': {'identifier': 'a'}}}],
                                                                                                'name': {'identifier': 'nextInt'},
                                                                                                'scope': {'name': {'identifier': 'rnd'}}}],
                                                                                 'name': {'identifier': 'valueOf'},
                                                                                 'scope': {'name': {'identifier': 'Integer'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'a'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'arguments': [{'name': {'identifier': 'a'}}],
                                              'name': {'identifier': 'asList'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DrillDownQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'config'}]},
                                                                                            {'Argument': [{'IdentifierName': 'query'}]},
                                                                                            {'Argument': [{'IdentifierName': 'drillDownDims'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'config'}},
                                                            {'name': {'identifier': 'baseQuery'}},
                                                            {'name': {'identifier': 'dimQueries'}},
                                                            {'name': {'identifier': 'drillDownDims'}}],
                                              'type': {'name': {'identifier': 'DrillDownQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_source'},
                                                                                                            {'IdentifierName': 'CreateWeight'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                            {'Argument': [{'IdentifierName': 'searcher'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'context'}},
                                                            {'name': {'identifier': 'searcher'}}],
                                              'name': {'identifier': 'createWeight'},
                                              'scope': {'name': {'identifier': 'source'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Balance'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RedimNodeArrays'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_freenode'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CharVector'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CharVector'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'kx'},
                                                                                                            {'IdentifierName': 'Alloc'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TernaryTree'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TernaryTree'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Compact'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'kx'}]},
                                                                                            {'Argument': [{'IdentifierName': 'map'}]},
                                                                                            {'Argument': [{'IdentifierName': 'm_root'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_kv'},
                                                                                {'IdentifierName': 'kx'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_kv'},
                                                                                                            {'IdentifierName': 'TrimToSize'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'balance'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'freenode'}}],
                                              'name': {'identifier': 'redimNodeArrays'}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'CharVector'}}},
                                                             'name': {'identifier': 'kx'},
                                                             'type': {'name': {'identifier': 'CharVector'}}}]}},
                              {'expression': {'arguments': [{'value': '1'}],
                                              'name': {'identifier': 'alloc'},
                                              'scope': {'name': {'identifier': 'kx'}}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'TernaryTree'}}},
                                                             'name': {'identifier': 'map'},
                                                             'type': {'name': {'identifier': 'TernaryTree'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'kx'}},
                                                            {'name': {'identifier': 'map'}},
                                                            {'name': {'identifier': 'root'}}],
                                              'name': {'identifier': 'compact'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'kv'}},
                                              'value': {'name': {'identifier': 'kx'}}}},
                              {'expression': {'name': {'identifier': 'trimToSize'},
                                              'scope': {'name': {'identifier': 'kv'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'primary'},
                                                                                                                                          {'IdentifierName': 'OnCommit'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'WrapCommits'},
                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'commits'}]}]}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_lastCommit'},
                                                                                                              {'ElementAccessExpression': [{'IdentifierName': 'commits'},
                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'commits'},
                                                                                                                                                                                                                                              {'IdentifierName': 'Count'}]},
                                                                                                                                                                                                            {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'commits'}}],
                                                             'name': {'identifier': 'wrapCommits'}}],
                                              'name': {'identifier': 'onCommit'},
                                              'scope': {'name': {'identifier': 'primary'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastCommit'}},
                                              'value': {'arguments': [{'left': {'name': {'identifier': 'size'},
                                                                                'scope': {'name': {'identifier': 'commits'}}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'value': '1'}}],
                                                        'name': {'identifier': 'get'},
                                                        'scope': {'name': {'identifier': 'commits'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'AddDocument'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'BuildDocument'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'contexts'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'weight'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'payload'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'text'}},
                                                                           {'name': {'identifier': 'contexts'}},
                                                                           {'name': {'identifier': 'weight'}},
                                                                           {'name': {'identifier': 'payload'}}],
                                                             'name': {'identifier': 'buildDocument'}}],
                                              'name': {'identifier': 'addDocument'},
                                              'scope': {'name': {'identifier': 'writer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FSDirectory'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'args'},
                                                                                                {'IdentifierName': 'Length'}]},
                                                              {'NumericLiteralExpression': '3'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FSDirectory'},
                                                                                                                                                                        {'IdentifierName': 'Open'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'DirectoryInfo'},
                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'args'},
                                                                                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'field'},
                                                                                                            {'ElementAccessExpression': [{'IdentifierName': 'args'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'inputStr'},
                                                                                                            {'ElementAccessExpression': [{'IdentifierName': 'args'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ArgumentException'},
                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TermInfo'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Term'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'inputStr'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'FSDirectory'}}}]}},
                              {'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'inputStr'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'field'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'args'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '3'}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'usage'}}},
                                                           {'expression': {'arguments': [{'value': '1'}],
                                                                           'name': {'identifier': 'exit'},
                                                                           'scope': {'name': {'identifier': 'System'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'dir'}},
                                                                           'value': {'arguments': [{'arguments': [{'index': {'value': '0'},
                                                                                                                   'name': {'name': {'identifier': 'args'}}}],
                                                                                                    'name': {'identifier': 'get'},
                                                                                                    'scope': {'name': {'identifier': 'Paths'}}}],
                                                                                     'name': {'identifier': 'open'},
                                                                                     'scope': {'name': {'identifier': 'FSDirectory'}}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'field'}},
                                                                           'value': {'index': {'value': '1'},
                                                                                     'name': {'name': {'identifier': 'args'}}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'inputStr'}},
                                                                           'value': {'index': {'value': '2'},
                                                                                     'name': {'name': {'identifier': 'args'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'dir'}},
                                                            {'arguments': [{'name': {'identifier': 'field'}},
                                                                           {'name': {'identifier': 'inputStr'}}],
                                                             'type': {'name': {'identifier': 'Term'}}}],
                                              'name': {'identifier': 'getTermInfo'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'count'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'costs'},
                                                                                                {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Grow'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'costs'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'cost'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'lastRightID'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'lastRightID'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'backPos'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'backPos'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'backIndex'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'backIndex'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'backID'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'backID'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                               {'IdentifierName': 'backType'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]},
                                                                                {'IdentifierName': 'backType'}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'count'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'wordID'}}],
                                                                             'name': {'identifier': 'getWordCost'},
                                                                             'scope': {'name': {'identifier': 'dict'}}},
                                                             'name': {'identifier': 'wordCost'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'wordID'}}],
                                                                             'name': {'identifier': 'getLeftId'},
                                                                             'scope': {'name': {'identifier': 'dict'}}},
                                                             'name': {'identifier': 'leftID'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'MAX_VALUE'},
                                                                             'scope': {'name': {'identifier': 'Integer'}}},
                                                             'name': {'identifier': 'leastCost'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'expression': {'value': '1'},
                                                                             'operator': 'MINUS'},
                                                             'name': {'identifier': 'leastIDX'},
                                                             'type': {'type': 'INT'}}]}},
                              {'check': {'left': {'name': {'identifier': 'count'},
                                                  'scope': {'name': {'identifier': 'fromPosData'}}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'index': {'name': {'identifier': 'idx'}},
                                                                                                               'name': {'name': {'identifier': 'costs'},
                                                                                                                        'scope': {'name': {'identifier': 'fromPosData'}}}},
                                                                                                      'operator': 'PLUS',
                                                                                                      'right': {'arguments': [{'index': {'name': {'identifier': 'idx'}},
                                                                                                                               'name': {'name': {'identifier': 'lastRightID'},
                                                                                                                                        'scope': {'name': {'identifier': 'fromPosData'}}}},
                                                                                                                              {'name': {'identifier': 'leftID'}}],
                                                                                                                'name': {'identifier': 'get'},
                                                                                                                'scope': {'name': {'identifier': 'costs'}}}},
                                                                                      'name': {'identifier': 'cost'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'name': {'identifier': 'VERBOSE'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'value': '      '
                                                                                                                                                                                                                                        'fromIDX='},
                                                                                                                                                                                                                      'operator': 'PLUS',
                                                                                                                                                                                                                      'right': {'name': {'identifier': 'idx'}}},
                                                                                                                                                                                                             'operator': 'PLUS',
                                                                                                                                                                                                             'right': {'value': ': '
                                                                                                                                                                                                                                'cost='}},
                                                                                                                                                                                                    'operator': 'PLUS',
                                                                                                                                                                                                    'right': {'name': {'identifier': 'cost'}}},
                                                                                                                                                                                           'operator': 'PLUS',
                                                                                                                                                                                           'right': {'value': ' '
                                                                                                                                                                                                              '(prevCost='}},
                                                                                                                                                                                  'operator': 'PLUS',
                                                                                                                                                                                  'right': {'index': {'name': {'identifier': 'idx'}},
                                                                                                                                                                                            'name': {'name': {'identifier': 'costs'},
                                                                                                                                                                                                     'scope': {'name': {'identifier': 'fromPosData'}}}}},
                                                                                                                                                                         'operator': 'PLUS',
                                                                                                                                                                         'right': {'value': ' '
                                                                                                                                                                                            'wordCost='}},
                                                                                                                                                                'operator': 'PLUS',
                                                                                                                                                                'right': {'name': {'identifier': 'wordCost'}}},
                                                                                                                                                       'operator': 'PLUS',
                                                                                                                                                       'right': {'value': ' '
                                                                                                                                                                          'bgCost='}},
                                                                                                                                              'operator': 'PLUS',
                                                                                                                                              'right': {'arguments': [{'index': {'name': {'identifier': 'idx'}},
                                                                                                                                                                       'name': {'name': {'identifier': 'lastRightID'},
                                                                                                                                                                                'scope': {'name': {'identifier': 'fromPosData'}}}},
                                                                                                                                                                      {'name': {'identifier': 'leftID'}}],
                                                                                                                                                        'name': {'identifier': 'get'},
                                                                                                                                                        'scope': {'name': {'identifier': 'costs'}}}},
                                                                                                                                     'operator': 'PLUS',
                                                                                                                                     'right': {'value': ' '
                                                                                                                                                        'leftID='}},
                                                                                                                            'operator': 'PLUS',
                                                                                                                            'right': {'name': {'identifier': 'leftID'}}},
                                                                                                                   'operator': 'PLUS',
                                                                                                                   'right': {'value': ')'}}],
                                                                                                    'name': {'identifier': 'println'},
                                                                                                    'scope': {'name': {'identifier': 'out'},
                                                                                                              'scope': {'name': {'identifier': 'System'}}}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'cost'}},
                                                                      'operator': 'LESS',
                                                                      'right': {'name': {'identifier': 'leastCost'}}},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'leastCost'}},
                                                                                                    'value': {'name': {'identifier': 'cost'}}}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'leastIDX'}},
                                                                                                    'value': {'name': {'identifier': 'idx'}}}},
                                                                                    {'condition': {'name': {'identifier': 'VERBOSE'}},
                                                                                     'thenStmt': {'statements': [{'expression': {'arguments': [{'value': '        '
                                                                                                                                                         '**'}],
                                                                                                                                 'name': {'identifier': 'println'},
                                                                                                                                 'scope': {'name': {'identifier': 'out'},
                                                                                                                                           'scope': {'name': {'identifier': 'System'}}}}}]}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'idx'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'count'},
                                                     'scope': {'name': {'identifier': 'fromPosData'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'idx'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'idx'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'leastCost'}},
                                              'value': {'name': {'identifier': 'wordCost'}}}},
                              {'condition': {'name': {'identifier': 'VERBOSE'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'left': {'value': '      '
                                                                                                                                                                                                      '+ '
                                                                                                                                                                                                      'cost='},
                                                                                                                                                                                    'operator': 'PLUS',
                                                                                                                                                                                    'right': {'name': {'identifier': 'leastCost'}}},
                                                                                                                                                                           'operator': 'PLUS',
                                                                                                                                                                           'right': {'value': ' '
                                                                                                                                                                                              'wordID='}},
                                                                                                                                                                  'operator': 'PLUS',
                                                                                                                                                                  'right': {'name': {'identifier': 'wordID'}}},
                                                                                                                                                         'operator': 'PLUS',
                                                                                                                                                         'right': {'value': ' '
                                                                                                                                                                            'leftID='}},
                                                                                                                                                'operator': 'PLUS',
                                                                                                                                                'right': {'name': {'identifier': 'leftID'}}},
                                                                                                                                       'operator': 'PLUS',
                                                                                                                                       'right': {'value': ' '
                                                                                                                                                          'leastIDX='}},
                                                                                                                              'operator': 'PLUS',
                                                                                                                              'right': {'name': {'identifier': 'leastIDX'}}},
                                                                                                                     'operator': 'PLUS',
                                                                                                                     'right': {'value': ' '
                                                                                                                                        'toPos='}},
                                                                                                            'operator': 'PLUS',
                                                                                                            'right': {'name': {'identifier': 'endPos'}}},
                                                                                                   'operator': 'PLUS',
                                                                                                   'right': {'value': ' '
                                                                                                                      'toPos.idx='}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'count'},
                                                                                                    'scope': {'arguments': [{'name': {'identifier': 'endPos'}}],
                                                                                                              'name': {'identifier': 'get'},
                                                                                                              'scope': {'name': {'identifier': 'positions'}}}}}],
                                                                           'name': {'identifier': 'println'},
                                                                           'scope': {'name': {'identifier': 'out'},
                                                                                     'scope': {'name': {'identifier': 'System'}}}}}]}},
                              {'condition': {'left': {'inner': {'left': {'name': {'identifier': 'addPenalty'}},
                                                                'operator': 'OR',
                                                                'right': {'inner': {'left': {'expression': {'name': {'identifier': 'outputCompounds'}},
                                                                                             'operator': 'LOGICAL_COMPLEMENT'},
                                                                                    'operator': 'AND',
                                                                                    'right': {'name': {'identifier': 'searchMode'}}}}}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {'name': {'identifier': 'USER'},
                                                                 'scope': {'name': {'identifier': 'Type'}}}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'pos'},
                                                                                                                         'scope': {'name': {'identifier': 'fromPosData'}}},
                                                                                                                        {'left': {'name': {'identifier': 'endPos'}},
                                                                                                                         'operator': 'MINUS',
                                                                                                                         'right': {'name': {'identifier': 'pos'},
                                                                                                                                   'scope': {'name': {'identifier': 'fromPosData'}}}}],
                                                                                                          'name': {'identifier': 'computePenalty'}},
                                                                                          'name': {'identifier': 'penalty'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'condition': {'name': {'identifier': 'VERBOSE'}},
                                                            'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'penalty'}},
                                                                                                       'operator': 'GREATER',
                                                                                                       'right': {'value': '0'}},
                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'left': {'value': '        '
                                                                                                                                                                                        '+ '
                                                                                                                                                                                        'penalty='},
                                                                                                                                                                      'operator': 'PLUS',
                                                                                                                                                                      'right': {'name': {'identifier': 'penalty'}}},
                                                                                                                                                             'operator': 'PLUS',
                                                                                                                                                             'right': {'value': ' '
                                                                                                                                                                                'cost='}},
                                                                                                                                                    'operator': 'PLUS',
                                                                                                                                                    'right': {'inner': {'left': {'name': {'identifier': 'leastCost'}},
                                                                                                                                                                        'operator': 'PLUS',
                                                                                                                                                                        'right': {'name': {'identifier': 'penalty'}}}}}],
                                                                                                                                     'name': {'identifier': 'println'},
                                                                                                                                     'scope': {'name': {'identifier': 'out'},
                                                                                                                                               'scope': {'name': {'identifier': 'System'}}}}}]}}]}},
                                                           {'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'leastCost'}},
                                                                           'value': {'name': {'identifier': 'penalty'}}}}]}},
                              {'check': {'left': {'name': {'identifier': 'leftID'}},
                                         'operator': 'EQUALS',
                                         'right': {'arguments': [{'name': {'identifier': 'wordID'}}],
                                                   'name': {'identifier': 'getRightId'},
                                                   'scope': {'name': {'identifier': 'dict'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'leastCost'}},
                                                            {'name': {'identifier': 'leftID'}},
                                                            {'name': {'identifier': 'pos'},
                                                             'scope': {'name': {'identifier': 'fromPosData'}}},
                                                            {'name': {'identifier': 'leastIDX'}},
                                                            {'name': {'identifier': 'wordID'}},
                                                            {'name': {'identifier': 'type'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'arguments': [{'name': {'identifier': 'endPos'}}],
                                                        'name': {'identifier': 'get'},
                                                        'scope': {'name': {'identifier': 'positions'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                              {'IdentifierName': 'queryConfig'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'queryConfig'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'source'},
                                                                                                    {'IdentifierName': 'Equals'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'target'}]}]}]},
                                        {'ReturnStatement': 'return;'}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'files'},
                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'source'},
                                                                                                                                  {'IdentifierName': 'Copy'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'target'}]},
                                                                                                                  {'Argument': [{'IdentifierName': 'file'}]},
                                                                                                                  {'Argument': [{'IdentifierName': 'file'}]},
                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOContext'},
                                                                                                                                                                  {'IdentifierName': 'READ_ONCE'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'target'}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {'name': {'identifier': 'source'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'source'}},
                                                                                                                  {'name': {'identifier': 'file'}},
                                                                                                                  {'name': {'identifier': 'file'}},
                                                                                                                  {'name': {'identifier': 'READONCE'},
                                                                                                                   'scope': {'name': {'identifier': 'IOContext'}}}],
                                                                                                    'name': {'identifier': 'copyFrom'},
                                                                                                    'scope': {'name': {'identifier': 'target'}}}}]},
                                                            'iterable': {'name': {'identifier': 'files'}},
                                                            'variable': {'variables': [{'name': {'identifier': 'file'},
                                                                                        'type': {'name': {'identifier': 'String'}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'IIndexableField'},
                                             {'IdentifierName': 'fields'},
                                             {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                                                 {'IdentifierName': 'Name'}]},
                                                                                                                                                               {'IdentifierName': 'Equals'}]},
                                                                                                                             {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                                               {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StringComparison'},
                                                                                                                                                                                               {'IdentifierName': 'Ordinal'}]}]}]}]},
                                                                                                   {'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                                        {'IdentifierName': 'GetStringValue'}]},
                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                            {'NullLiteralExpression': 'null'}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                     {'IdentifierName': 'GetStringValue'}]},
                                                                                                                                   {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                               'name': {'identifier': 'equals'},
                                                                               'scope': {'name': {'identifier': 'name'},
                                                                                         'scope': {'name': {'identifier': 'field'}}}},
                                                                      'operator': 'AND',
                                                                      'right': {'left': {'name': {'identifier': 'stringValue'},
                                                                                         'scope': {'name': {'identifier': 'field'}}},
                                                                                'operator': 'NOT_EQUALS',
                                                                                'right': {}}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'stringValue'},
                                                                                                    'scope': {'name': {'identifier': 'field'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'fields'}},
                               'variable': {'variables': [{'name': {'identifier': 'field'},
                                                           'type': {'name': {'identifier': 'IndexableField'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'backingStore'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Reap'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'backingStore'}}}},
                              {'expression': {'name': {'identifier': 'reap'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertNotNull'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'dd'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expName'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                                            {'IdentifierName': 'Name'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expTitle'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                                            {'IdentifierName': 'Title'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expBody'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                                            {'IdentifierName': 'Body'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expDate'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dd'},
                                                                                                                                            {'IdentifierName': 'Date'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'dd'}}],
                                              'name': {'identifier': 'assertNotNull'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expName'}},
                                                            {'name': {'identifier': 'getName'},
                                                             'scope': {'name': {'identifier': 'dd'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expTitle'}},
                                                            {'name': {'identifier': 'getTitle'},
                                                             'scope': {'name': {'identifier': 'dd'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expBody'}},
                                                            {'name': {'identifier': 'getBody'},
                                                             'scope': {'name': {'identifier': 'dd'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expDate'}},
                                                            {'name': {'identifier': 'getDate'},
                                                             'scope': {'name': {'identifier': 'dd'}}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': '_textFieldNames'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Terms'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MultiFields'},
                                                                                                                                                                                                                           {'IdentifierName': 'GetTerms'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': '_atomicReader'}]},
                                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'textFieldName'}]}]}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'terms'},
                                                                                                                                                                                                 {'IdentifierName': 'SumDocFreq'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'avgNumberOfUniqueTerms'},
                                                                                                              {'DivideExpression': [{'IdentifierName': 'numPostings'},
                                                                                                                                    {'CastExpression': [{'PredefinedType': 'double'},
                                                                                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'terms'},
                                                                                                                                                                                          {'IdentifierName': 'DocCount'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '_atomicReader'},
                                                                                                                                                                                          {'IdentifierName': 'DocFreq'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Term'},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '_classFieldName'}]},
                                                                                                                                                                                                                                        {'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'MultiplyExpression': [{'IdentifierName': 'avgNumberOfUniqueTerms'},
                                                                    {'IdentifierName': 'docsWithC'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'avgNumberOfUniqueTerms'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'indexReader'}},
                                                                                                                    {'name': {'identifier': 'textFieldName'}}],
                                                                                                      'name': {'identifier': 'getTerms'},
                                                                                                      'scope': {'name': {'identifier': 'MultiFields'}}},
                                                                                      'name': {'identifier': 'terms'},
                                                                                      'type': {'name': {'identifier': 'Terms'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSumDocFreq'},
                                                                                                      'scope': {'name': {'identifier': 'terms'}}},
                                                                                      'name': {'identifier': 'numPostings'},
                                                                                      'type': {'type': 'LONG'}}]}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'avgNumberOfUniqueTerms'}},
                                                                       'value': {'left': {'name': {'identifier': 'numPostings'}},
                                                                                 'operator': 'DIVIDE',
                                                                                 'right': {'expression': {'name': {'identifier': 'getDocCount'},
                                                                                                          'scope': {'name': {'identifier': 'terms'}}},
                                                                                           'type': {'type': 'DOUBLE'}}}}}]},
                               'iterable': {'name': {'identifier': 'textFieldNames'}},
                               'variable': {'variables': [{'name': {'identifier': 'textFieldName'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'term'}}],
                                                                             'name': {'identifier': 'docFreq'},
                                                                             'scope': {'name': {'identifier': 'indexReader'}}},
                                                             'name': {'identifier': 'docsWithC'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'left': {'name': {'identifier': 'avgNumberOfUniqueTerms'}},
                                              'operator': 'MULTIPLY',
                                              'right': {'name': {'identifier': 'docsWithC'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'len'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Read'},
                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                    {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'ch'},
                                                                                           {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                                                     {'BreakStatement': 'break;'}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'cbuf'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'off'}]}]}]}]},
                                                                                                             {'CastExpression': [{'PredefinedType': 'char'},
                                                                                                                                 {'IdentifierName': 'ch'}]}]}]}]}]},
                       {'ReturnStatement': [{'ConditionalExpression': [{'GreaterThanExpression': [{'IdentifierName': 'i'},
                                                                                                  {'NumericLiteralExpression': '0'}]},
                                                                       {'IdentifierName': 'i'},
                                                                       {'ParenthesizedExpression': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'len'},
                                                                                                                                                     {'NumericLiteralExpression': '0'}]},
                                                                                                                               {'NumericLiteralExpression': '0'},
                                                                                                                               {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'read'}},
                                                                                      'name': {'identifier': 'ch'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'ch'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'expression': {'value': '1'},
                                                                                'operator': 'MINUS'}},
                                                        'thenStmt': {}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'expression': {'name': {'identifier': 'off'}},
                                                                                            'operator': 'POSTFIX_INCREMENT'},
                                                                                  'name': {'name': {'identifier': 'cbuf'}}},
                                                                       'value': {'expression': {'name': {'identifier': 'ch'}},
                                                                                 'type': {'type': 'CHAR'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'len'}}},
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'condition': {'left': {'name': {'identifier': 'i'}},
                                                            'operator': 'GREATER',
                                                            'right': {'value': '0'}},
                                              'elseExpr': {'inner': {'condition': {'left': {'name': {'identifier': 'len'}},
                                                                                   'operator': 'EQUALS',
                                                                                   'right': {'value': '0'}},
                                                                     'elseExpr': {'expression': {'value': '1'},
                                                                                  'operator': 'MINUS'},
                                                                     'thenExpr': {'value': '0'}}},
                                              'thenExpr': {'name': {'identifier': 'i'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Index'},
                                                                                {'CharacterLiteralExpression': "'a'"}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'index'}},
                                              'value': {'value': 'a'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldsWriter'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'FieldsWriter'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'ParenthesizedExpression': [{'SubtractExpression': [{'IdentifierName': 'ch'},
                                                                                                                         {'CharacterLiteralExpression': "'a'"}]}]},
                                                                    {'IdentifierName': 'numStopChars'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'name': {'identifier': 'ch'}},
                                                                 'operator': 'MINUS',
                                                                 'right': {'value': 'a'}}},
                                              'operator': 'LESS',
                                              'right': {'name': {'identifier': 'numStopChars'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'EdgeNGramTokenFilter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'EdgeNGramTokenFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'EdgeNGramTokenFilter'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'Side'}]},
                                                                                                                                                                                                                              {'IdentifierName': 'FRONT'}]}]},
                                                                                                                                                                              {'Argument': [{'NumericLiteralExpression': '6'}]},
                                                                                                                                                                              {'Argument': [{'NumericLiteralExpression': '6'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertTokenStreamContents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0'}]}]}]}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0'}]}]}]}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'input'}},
                                                                                           {'value': '6'},
                                                                                           {'value': '6'}],
                                                                             'type': {'name': {'identifier': 'EdgeNGramTokenFilter'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'EdgeNGramTokenFilter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'elementType': {'name': {'identifier': 'String'}},
                                                             'levels': [{'dimension': {'value': '0'}}]},
                                                            {'elementType': {'type': 'INT'},
                                                             'levels': [{'dimension': {'value': '0'}}]},
                                                            {'elementType': {'type': 'INT'},
                                                             'levels': [{'dimension': {'value': '0'}}]}],
                                              'name': {'identifier': 'assertTokenStreamContents'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetDirectReaderNoHeader'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'format'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'version'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'valueCount'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'header'},
                                                                                                                                        {'IdentifierName': 'bitsPerValue'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'version'}}],
                                              'name': {'identifier': 'checkVersion'}}},
                              {'entries': [{'label': {'name': {'identifier': 'PACKED'}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bitsPerValue'}},
                                                                                         {'name': {'identifier': 'valueCount'}},
                                                                                         {'name': {'identifier': 'in'}}],
                                                                           'type': {'name': {'identifier': 'DirectPackedReader'}}}}]},
                                           {'label': {'name': {'identifier': 'PACKED_SINGLE_BLOCK'}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bitsPerValue'}},
                                                                                         {'name': {'identifier': 'valueCount'}},
                                                                                         {'name': {'identifier': 'in'}}],
                                                                           'type': {'name': {'identifier': 'DirectPacked64SingleBlockReader'}}}}]},
                                           {'statements': [{'expression': {'arguments': [{'left': {'value': 'Unknwown '
                                                                                                            'format: '},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'format'}}}],
                                                                           'type': {'name': {'identifier': 'AssertionError'}}}}]}],
                               'selector': {'name': {'identifier': 'format'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'PortugueseStemFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'PortugueseStemFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'exhausted'},
                                                                                {'SimpleAssignmentExpression': [{'IdentifierName': 'resetExhausted'},
                                                                                                                {'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'ParenthesizedExpression': [{'ConditionalExpression': [{'IdentifierName': 'parallel'},
                                                                                                    {'InvocationExpression': [{'IdentifierName': 'DoParallelTasks'},
                                                                                                                              {'ArgumentList': '()'}]},
                                                                                                    {'InvocationExpression': [{'IdentifierName': 'DoSerialTasks'},
                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'exhausted'}},
                                              'value': {'operator': 'ASSIGN',
                                                        'target': {'name': {'identifier': 'resetExhausted'}},
                                                        'value': {'value': 'false'}}}},
                              {'expression': {'inner': {'condition': {'name': {'identifier': 'parallel'}},
                                                        'elseExpr': {'name': {'identifier': 'doSerialTasks'}},
                                                        'thenExpr': {'name': {'identifier': 'doParallelTasks'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BooleanQuery'},
                                                                                                                  {'IdentifierName': 'MaxClauseCount'}]},
                                                                                {'ParenthesizedExpression': [{'IdentifierName': 'originalMaxClauses'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'originalMaxClauses'}}],
                                              'name': {'identifier': 'setMaxClauseCount'},
                                              'scope': {'name': {'identifier': 'BooleanQuery'}}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'IdentifierName': 'BoolVal'},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'NumericLiteralExpression': '1d'},
                                                                       {'NumericLiteralExpression': '0d'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                            'name': {'identifier': 'boolVal'}},
                                              'elseExpr': {'expression': {'value': '0'},
                                                           'type': {'type': 'DOUBLE'}},
                                              'thenExpr': {'expression': {'value': '1'},
                                                           'type': {'type': 'DOUBLE'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IndexFileNames'},
                                                                                                                                                                                          {'IdentifierName': 'SegmentFileName'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                                                                                                            {'IdentifierName': 'SegmentInfo'}]},
                                                                                                                                                                                                                          {'IdentifierName': 'Name'}]}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                                                                          {'IdentifierName': 'SegmentSuffix'}]}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'EXTENSION'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexOutput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                                                                            {'IdentifierName': 'Directory'}]},
                                                                                                                                                                                          {'IdentifierName': 'CreateOutput'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                                                                          {'IdentifierName': 'Context'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CodecUtil'},
                                                                                                                                         {'IdentifierName': 'WriteHeader'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': '@out'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'CODEC_NAME'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'VERSION_CURRENT'}]}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'success'},
                                                                                                             {'TrueLiteralExpression': 'true'}]}]}]},
                                         {'FinallyClause': [{'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'success'}]},
                                                                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                                                        {'IdentifierName': 'DisposeWhileHandlingException'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@out'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldsConsumerAnonymousInnerClassHelper'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': '@out'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'MemoryFieldsConsumer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ShingleFilter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ShingleFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'components'},
                                                                                                                                                                                                                              {'IdentifierName': 'TokenStream'}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'minShingleSize'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'maxShingleSize'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetMinShingleSize'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'minShingleSize'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetMaxShingleSize'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxShingleSize'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetTokenSeparator'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenSeparator'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetOutputUnigrams'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'outputUnigrams'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetOutputUnigramsIfNoShingles'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'outputUnigramsIfNoShingles'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'filter'},
                                                                                                            {'IdentifierName': 'SetFillerToken'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'fillerToken'}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'components'},
                                                                                                                                            {'IdentifierName': 'Tokenizer'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'filter'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getTokenStream'},
                                                                                            'scope': {'name': {'identifier': 'components'}}},
                                                                                           {'name': {'identifier': 'minShingleSize'}},
                                                                                           {'name': {'identifier': 'maxShingleSize'}}],
                                                                             'type': {'name': {'identifier': 'ShingleFilter'}}},
                                                             'name': {'identifier': 'filter'},
                                                             'type': {'name': {'identifier': 'ShingleFilter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'minShingleSize'}}],
                                              'name': {'identifier': 'setMinShingleSize'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'maxShingleSize'}}],
                                              'name': {'identifier': 'setMaxShingleSize'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenSeparator'}}],
                                              'name': {'identifier': 'setTokenSeparator'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'outputUnigrams'}}],
                                              'name': {'identifier': 'setOutputUnigrams'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'outputUnigramsIfNoShingles'}}],
                                              'name': {'identifier': 'setOutputUnigramsIfNoShingles'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'fillerToken'}}],
                                              'name': {'identifier': 'setFillerToken'},
                                              'scope': {'name': {'identifier': 'filter'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getTokenizer'},
                                                             'scope': {'name': {'identifier': 'components'}}},
                                                            {'name': {'identifier': 'filter'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SpecialOperations'},
                                                                                                        {'IdentifierName': 'FindIndex'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]},
                                                                                        {'Argument': [{'IdentifierName': '_points'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'points'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'inner': {'left': {'name': {'identifier': 'a'}},
                                                                                                                         'operator': 'PLUS',
                                                                                                                         'right': {'name': {'identifier': 'b'}}}},
                                                                                                      'operator': 'UNSIGNED_RIGHT_SHIFT',
                                                                                                      'right': {'value': '1'}},
                                                                                      'name': {'identifier': 'd'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'left': {'index': {'name': {'identifier': 'd'}},
                                                                               'name': {'name': {'identifier': 'points'}}},
                                                                      'operator': 'GREATER',
                                                                      'right': {'name': {'identifier': 'c'}}},
                                                        'elseStmt': {'condition': {'left': {'index': {'name': {'identifier': 'd'}},
                                                                                            'name': {'name': {'identifier': 'points'}}},
                                                                                   'operator': 'LESS',
                                                                                   'right': {'name': {'identifier': 'c'}}},
                                                                     'elseStmt': {'expression': {'name': {'identifier': 'd'}}},
                                                                     'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                                                                 'target': {'name': {'identifier': 'a'}},
                                                                                                 'value': {'name': {'identifier': 'd'}}}}},
                                                        'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                                                    'target': {'name': {'identifier': 'b'}},
                                                                                    'value': {'name': {'identifier': 'd'}}}}}]},
                               'condition': {'left': {'left': {'name': {'identifier': 'b'}},
                                                      'operator': 'MINUS',
                                                      'right': {'name': {'identifier': 'a'}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '1'}}},
                              {'expression': {'name': {'identifier': 'a'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'count'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                                                                                          {'IdentifierName': 'ReadVInt64'}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]},
                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                {'IdentifierName': 'higherWeightsCompletion'}]},
                                                                                                              {'ObjectCreationExpression': [{'IdentifierName': 'FSTCompletion'},
                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'object'}]}]},
                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                                                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'NoOutputs'},
                                                                                                                                                                                                                                                                            {'IdentifierName': 'Singleton'}]}]}]}]}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                {'IdentifierName': 'normalCompletion'}]},
                                                                                                              {'ObjectCreationExpression': [{'IdentifierName': 'FSTCompletion'},
                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'higherWeightsCompletion'},
                                                                                                                                                                                                              {'IdentifierName': 'FST'}]}]},
                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                                                                                              {'Argument': [{'IdentifierName': 'exactMatchFirst'}]}]}]}]}]},
                                                     {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'count'}},
                                              'value': {'name': {'identifier': 'readVLong'},
                                                        'scope': {'name': {'identifier': 'input'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'higherWeightsCompletion'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'arguments': [{'name': {'identifier': 'input'}},
                                                                                     {'name': {'identifier': 'getSingleton'},
                                                                                      'scope': {'name': {'identifier': 'NoOutputs'}}}],
                                                                       'type': {'name': {'identifier': 'FST'}}}],
                                                        'type': {'name': {'identifier': 'FSTCompletion'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'normalCompletion'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'getFST'},
                                                                       'scope': {'name': {'identifier': 'higherWeightsCompletion'}}},
                                                                      {'value': 'false'},
                                                                      {'name': {'identifier': 'exactMatchFirst'}}],
                                                        'type': {'name': {'identifier': 'FSTCompletion'}}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StartingGun'},
                                                                                                            {'IdentifierName': 'Wait'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'Queries'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Queries'},
                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                         {'IdentifierName': 'GetHashCode'}]},
                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                         'name': {'identifier': 'rethrow'},
                                                                                         'scope': {'name': {'identifier': 'Rethrow'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'await'},
                                                                           'scope': {'name': {'identifier': 'startingGun'}}}},
                                                           {'body': {'statements': [{'expression': {'name': {'identifier': 'hashCode'},
                                                                                                    'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                              'name': {'name': {'identifier': 'queries'}}}}}]},
                                                            'compare': {'left': {'name': {'identifier': 'i'}},
                                                                        'operator': 'LESS',
                                                                        'right': {'name': {'identifier': 'length'},
                                                                                  'scope': {'name': {'identifier': 'queries'}}}},
                                                            'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                               'name': {'identifier': 'i'},
                                                                                               'type': {'type': 'INT'}}]}],
                                                            'update': [{'expression': {'name': {'identifier': 'i'}},
                                                                        'operator': 'POSTFIX_INCREMENT'}]}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Create'},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'AttributeSource'},
                                                                                                                                                                          {'IdentifierName': 'AttributeFactory'}]},
                                                                                                                                        {'IdentifierName': 'DEFAULT_ATTRIBUTE_FACTORY'}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'DEFAULT_TOKEN_ATTRIBUTE_FACTORY'},
                                                             'scope': {'name': {'identifier': 'TokenStream'}}}],
                                              'name': {'identifier': 'create'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FileInfo'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FileInfo'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Path'},
                                                                                                                                                                                                                                                        {'IdentifierName': 'Combine'}]},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TempDir'},
                                                                                                                                                                                                                                                                                        {'IdentifierName': 'FullName'}]}]},
                                                                                                                                                                                                                                        {'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]}]}]}]},
                       {'UsingStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'file'},
                                                                                                       {'IdentifierName': 'Create'}]},
                                                                     {'ArgumentList': '()'}]},
                                           {'Block': []}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'IdentifierName': 'OfflineSorter'},
                                                                                                  {'IdentifierName': 'ByteSequencesWriter'}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'OfflineSorter'},
                                                                                                                                                                               {'IdentifierName': 'ByteSequencesWriter'}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'file'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                            {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                             {'IdentifierName': 'data'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                                                             {'IdentifierName': 'Write'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'datum'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'w'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'file'}]}]},
  'java_ast': {'statements': [{'resources': [{'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'out'}}],
                                                                             'type': {'name': {'identifier': 'ByteSequencesWriter'},
                                                                                      'scope': {'name': {'identifier': 'OfflineSorter'}}}},
                                                             'name': {'identifier': 'w'},
                                                             'type': {'name': {'identifier': 'ByteSequencesWriter'}}}]}],
                               'tryBlock': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'datum'}}],
                                                                                                    'name': {'identifier': 'write'},
                                                                                                    'scope': {'name': {'identifier': 'w'}}}}]},
                                                            'iterable': {'name': {'identifier': 'data'}},
                                                            'variable': {'variables': [{'name': {'identifier': 'datum'},
                                                                                        'type': {'componentType': {'type': 'BYTE'},
                                                                                                 'origin': 'TYPE'}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'out'}}],
                                                                           'name': {'identifier': 'writeFooter'},
                                                                           'scope': {'name': {'identifier': 'CodecUtil'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CharArraySet'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'matchVersion'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stopWords'},
                                                                                                                                                                                                                              {'IdentifierName': 'Count'}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'ignoreCase'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stopSet'},
                                                                                                            {'IdentifierName': 'UnionWith'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'stopWords'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'stopSet'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'size'},
                                                                                            'scope': {'name': {'identifier': 'stopWords'}}},
                                                                                           {'name': {'identifier': 'ignoreCase'}}],
                                                                             'type': {'name': {'identifier': 'CharArraySet'}}},
                                                             'name': {'identifier': 'stopSet'},
                                                             'type': {'name': {'identifier': 'CharArraySet'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stopWords'}}],
                                              'name': {'identifier': 'addAll'},
                                              'scope': {'name': {'identifier': 'stopSet'}}}},
                              {'expression': {'name': {'identifier': 'stopSet'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'a'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SrndPrefixQuery'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'prefix'}]},
                                                                                            {'Argument': [{'IdentifierName': 'quoted'}]},
                                                                                            {'Argument': [{'IdentifierName': 'truncator'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'prefix'}},
                                                            {'name': {'identifier': 'quoted'}},
                                                            {'name': {'identifier': 'TRUNCATOR'}}],
                                              'type': {'name': {'identifier': 'SrndPrefixQuery'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                            {'IdentifierName': 'Append'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]},
                                                                                            {'Argument': [{'IdentifierName': 'offset'}]},
                                                                                            {'Argument': [{'IdentifierName': 'length'}]}]}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'subwordCount'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'text'}},
                                                            {'name': {'identifier': 'offset'}},
                                                            {'name': {'identifier': 'length'}}],
                                              'name': {'identifier': 'append'},
                                              'scope': {'name': {'identifier': 'buffer'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'subwordCount'}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'doc'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StoredField'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldInfo'},
                                                                                                                                                                                                          {'IdentifierName': 'Name'}]}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'name'},
                                                                            'scope': {'name': {'identifier': 'fieldInfo'}}},
                                                                           {'name': {'identifier': 'value'}}],
                                                             'type': {'name': {'identifier': 'StoredField'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_doc'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'TearDown'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doc'}},
                                              'value': {}}},
                              {'expression': {'name': {'identifier': 'tearDown'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckCrashed'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckDiskFull'},
                                                                          {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'numBytes'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                            {'IdentifierName': 'CopyBytes'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'numBytes'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Dir'},
                                                                                                            {'IdentifierName': 'MaybeThrowDeterministicException'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'name': {'identifier': 'checkCrashed'}}},
                              {'expression': {'arguments': [{},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'numBytes'}}],
                                              'name': {'identifier': 'checkDiskFull'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'numBytes'}}],
                                              'name': {'identifier': 'copyBytes'},
                                              'scope': {'name': {'identifier': 'delegate'}}}},
                              {'expression': {'name': {'identifier': 'maybeThrowDeterministicException'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'freq'},
                                                                                             {'NumericLiteralExpression': '0'}]},
                                                                       {'NumericLiteralExpression': '0'},
                                                                       {'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'name': {'identifier': 'freq'}},
                                                            'operator': 'EQUALS',
                                                            'right': {'value': '0'}},
                                              'elseExpr': {'value': '1'},
                                              'thenExpr': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'PortugueseAnalyzer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'PortugueseAnalyzer'}}},
                                                             'name': {'identifier': 'analyzer'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'analyzer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                            {'IdentifierName': 'SafeSet'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'bit'}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bit'}}],
                                              'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'bits'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldType'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TextField'},
                                                                                                                                                                                                                              {'IdentifierName': 'TYPE_NOT_STORED'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ft'},
                                                                                                                  {'IdentifierName': 'IndexOptions'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'IndexOptions'},
                                                                                                                  {'IdentifierName': 'DOCS_ONLY'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ft'},
                                                                                                                  {'IdentifierName': 'OmitNorms'}]},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ft'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'TYPE_NOT_STORED'},
                                                                                            'scope': {'name': {'identifier': 'TextField'}}}],
                                                                             'type': {'name': {'identifier': 'FieldType'}}},
                                                             'name': {'identifier': 'ft'},
                                                             'type': {'name': {'identifier': 'FieldType'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'DOCS'},
                                                             'scope': {'name': {'identifier': 'IndexOptions'}}}],
                                              'name': {'identifier': 'setIndexOptions'},
                                              'scope': {'name': {'identifier': 'ft'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setOmitNorms'},
                                              'scope': {'name': {'identifier': 'ft'}}}},
                              {'expression': {'name': {'identifier': 'ft'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SeekStatus'},
                                                                              {'IdentifierName': 'END'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'END'},
                                              'scope': {'name': {'identifier': 'SeekStatus'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clock'},
                                                                                                                                                                                          {'IdentifierName': 'Get'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'timeout'},
                                                                {'IdentifierName': 'time'}]},
                                        {'Block': [{'IfStatement': [{'IdentifierName': 'greedy'},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                                                                                                                    {'IdentifierName': 'Collect'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]},
                                                   {'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TimeExceededException'},
                                                                                                     {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'timeout'},
                                                                                                                                                             {'IdentifierName': 't0'}]}]},
                                                                                                                       {'Argument': [{'SubtractExpression': [{'IdentifierName': 'time'},
                                                                                                                                                             {'IdentifierName': 't0'}]}]},
                                                                                                                       {'Argument': [{'AddExpression': [{'IdentifierName': 'docBase'},
                                                                                                                                                        {'IdentifierName': 'doc'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                                                            {'IdentifierName': 'Collect'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'clock'}}},
                                                             'name': {'identifier': 'time'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'time'}},
                                                      'operator': 'MINUS',
                                                      'right': {'name': {'identifier': 'timeout'}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0L'}},
                               'thenStmt': {'statements': [{'condition': {'name': {'identifier': 'greedy'}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                                                        'name': {'identifier': 'collect'},
                                                                                                        'scope': {'name': {'identifier': 'in'}}}}]}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'timeout'}},
                                                                                          'operator': 'MINUS',
                                                                                          'right': {'name': {'identifier': 't0'}}},
                                                                                         {'left': {'name': {'identifier': 'time'}},
                                                                                          'operator': 'MINUS',
                                                                                          'right': {'name': {'identifier': 't0'}}},
                                                                                         {'left': {'name': {'identifier': 'docBase'}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'name': {'identifier': 'doc'}}}],
                                                                           'type': {'name': {'identifier': 'TimeExceededException'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'collect'},
                                              'scope': {'name': {'identifier': 'in'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'SetUp'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'UseNonNrtReaders'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                                            {'IdentifierName': 'NextBoolean'}]},
                                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'setUp'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'useNonNrtReaders'}},
                                              'value': {'name': {'identifier': 'nextBoolean'},
                                                        'scope': {'name': {'identifier': 'random'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'InitIndex'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'newScheduler'}]},
                                                                                                                                                                          {'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                                          {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MockDirectoryWrapper'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'MockDirectoryWrapper'},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                                                                    {'IdentifierName': 'Directory'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Crash'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexReader'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DirectoryReader'},
                                                                                                                                                                                          {'IdentifierName': 'Open'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '157'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                            {'IdentifierName': 'NumDocs'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                           {'value': 'false'}],
                                                                             'name': {'identifier': 'initIndex'}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'getDirectory'},
                                                                                            'scope': {'name': {'identifier': 'writer'}}},
                                                                             'type': {'name': {'identifier': 'MockDirectoryWrapper'}}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'MockDirectoryWrapper'}}}]}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'crash'},
                                              'scope': {'name': {'identifier': 'dir'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}}],
                                                                             'name': {'identifier': 'open'},
                                                                             'scope': {'name': {'identifier': 'DirectoryReader'}}},
                                                             'name': {'identifier': 'reader'},
                                                             'type': {'name': {'identifier': 'IndexReader'}}}]}},
                              {'expression': {'arguments': [{'value': '157'},
                                                            {'name': {'identifier': 'numDocs'},
                                                             'scope': {'name': {'identifier': 'reader'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'SpanishAnalyzer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'SpanishAnalyzer'}}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'GenericName': [{'TypeArgumentList': [{'NullableType': [{'PredefinedType': 'long'}]}]}]},
                                                                                                                                          {'IdentifierName': 'Default'}]},
                                                                                                        {'IdentifierName': 'Compare'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'left'},
                                                                                                                                        {'IdentifierName': 'Output1'}]}]},
                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'right'},
                                                                                                                                        {'IdentifierName': 'Output1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'output1'},
                                                             'scope': {'name': {'identifier': 'right'}}}],
                                              'name': {'identifier': 'compareTo'},
                                              'scope': {'name': {'identifier': 'output1'},
                                                        'scope': {'name': {'identifier': 'left'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RecursiveCompile'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'current'},
                                                                                                                                                                      {'IdentifierName': 'GetChild'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'expected'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RecursiveCompile'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'current'},
                                                                                                                                                                      {'IdentifierName': 'GetChild'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'expected'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                            {'IdentifierName': 'Emit'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'opCode'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                            {'IdentifierName': 'Emit'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'OpCodes'},
                                                                                                                                            {'IdentifierName': 'Conv_R8'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Label'}}},
                                                             'name': {'identifier': 'labelTrue'},
                                                             'type': {'name': {'identifier': 'Label'}}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Label'}}},
                                                             'name': {'identifier': 'labelReturn'},
                                                             'type': {'name': {'identifier': 'Label'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'DOUBLE_TYPE'},
                                                             'scope': {'name': {'identifier': 'Type'}}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'typeStack'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'left'}}],
                                              'name': {'identifier': 'visit'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'right'}}],
                                              'name': {'identifier': 'visit'}}},
                              {'expression': {'name': {'identifier': 'pop'},
                                              'scope': {'name': {'identifier': 'typeStack'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'DOUBLE_TYPE'},
                                                             'scope': {'name': {'identifier': 'Type'}}},
                                                            {'name': {'identifier': 'operator'}},
                                                            {'name': {'identifier': 'labelTrue'}}],
                                              'name': {'identifier': 'ifCmp'},
                                              'scope': {'name': {'identifier': 'gen'}}}},
                              {'expression': {'arguments': [{'value': 'false'}],
                                              'name': {'identifier': 'pushBoolean'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'labelReturn'}}],
                                              'name': {'identifier': 'goTo'},
                                              'scope': {'name': {'identifier': 'gen'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'labelTrue'}}],
                                              'name': {'identifier': 'visitLabel'},
                                              'scope': {'name': {'identifier': 'gen'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'pushBoolean'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'labelReturn'}}],
                                              'name': {'identifier': 'visitLabel'},
                                              'scope': {'name': {'identifier': 'gen'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastWasCommon'},
                                                                                {'FalseLiteralExpression': 'false'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'savedState'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                  {'IdentifierName': 'Length'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastWasCommon'}},
                                              'value': {'value': 'false'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'savedState'}},
                                              'value': {}}},
                              {'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'setLength'},
                                              'scope': {'name': {'identifier': 'buffer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LowerCaseTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'source'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StopFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_matchVersion'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'source'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'm_stopwords'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'LowerCaseTokenizer'}}},
                                                             'name': {'identifier': 'source'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'source'}},
                                                            {'arguments': [{'name': {'identifier': 'source'}},
                                                                           {'name': {'identifier': 'stopwords'}}],
                                                             'type': {'name': {'identifier': 'StopFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'task'},
                                                          {'IdentifierName': 'ResetInputsTask'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'exhausted'},
                                                                                                            {'FalseLiteralExpression': 'false'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'resetExhausted'},
                                                                                                            {'TrueLiteralExpression': 'true'}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'task'},
                                                                                           {'IdentifierName': 'TaskSequence'}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TaskSequence'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'TaskSequence'},
                                                                                                                                                                                                               {'IdentifierName': 'task'}]}]}]}]}]},
                                                                                    {'IfStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                       {'IdentifierName': 'resetExhausted'}]},
                                                                                                     {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'exhausted'},
                                                                                                                                                                         {'FalseLiteralExpression': 'false'}]}]},
                                                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'resetExhausted'},
                                                                                                                                                                         {'TrueLiteralExpression': 'true'}]}]},
                                                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                                           {'IdentifierName': 'resetExhausted'}]},
                                                                                                                                                                         {'FalseLiteralExpression': 'false'}]}]}]},
                                                                                                     {'ElseClause': [{'Block': [{'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'exhausted'},
                                                                                                                                                                                     {'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                                                       {'IdentifierName': 'exhausted'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'task'}},
                                             'type': {'name': {'identifier': 'ResetInputsTask'}}},
                               'elseStmt': {'condition': {'expression': {'name': {'identifier': 'task'}},
                                                          'type': {'name': {'identifier': 'TaskSequence'}}},
                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'task'}},
                                                                                                                       'type': {'name': {'identifier': 'TaskSequence'}}},
                                                                                                       'name': {'identifier': 't'},
                                                                                                       'type': {'name': {'identifier': 'TaskSequence'}}}]}},
                                                                        {'condition': {'name': {'identifier': 'resetExhausted'},
                                                                                       'scope': {'name': {'identifier': 't'}}},
                                                                         'elseStmt': {'statements': [{'expression': {'operator': 'BINARY_OR',
                                                                                                                     'target': {'name': {'identifier': 'exhausted'}},
                                                                                                                     'value': {'name': {'identifier': 'exhausted'},
                                                                                                                               'scope': {'name': {'identifier': 't'}}}}}]},
                                                                         'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                     'target': {'name': {'identifier': 'exhausted'}},
                                                                                                                     'value': {'value': 'false'}}},
                                                                                                     {'expression': {'operator': 'ASSIGN',
                                                                                                                     'target': {'name': {'identifier': 'resetExhausted'}},
                                                                                                                     'value': {'value': 'true'}}},
                                                                                                     {'expression': {'operator': 'ASSIGN',
                                                                                                                     'target': {'name': {'identifier': 'resetExhausted'},
                                                                                                                                'scope': {'name': {'identifier': 't'}}},
                                                                                                                     'value': {'value': 'false'}}}]}}]}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'exhausted'}},
                                                                           'value': {'value': 'false'}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'resetExhausted'}},
                                                                           'value': {'value': 'true'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': 'start'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': 'end'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'part1'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'start'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'start'},
                                                                                                                            {'ConditionalExpression': [{'IdentifierName': 'analyzeRangeTerms'},
                                                                                                                                                       {'InvocationExpression': [{'IdentifierName': 'AnalyzeMultitermTerm'},
                                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                                                                   {'Argument': [{'IdentifierName': 'part1'}]}]}]},
                                                                                                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'part1'}]}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'part2'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'end'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'end'},
                                                                                                                            {'ConditionalExpression': [{'IdentifierName': 'analyzeRangeTerms'},
                                                                                                                                                       {'InvocationExpression': [{'IdentifierName': 'AnalyzeMultitermTerm'},
                                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                                                                   {'Argument': [{'IdentifierName': 'part2'}]}]}]},
                                                                                                                                                       {'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'part2'}]}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TermRangeQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TermRangeQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'start'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'end'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'startInclusive'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'endInclusive'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'query'},
                                                                                                                  {'IdentifierName': 'MultiTermRewriteMethod'}]},
                                                                                {'IdentifierName': 'MultiTermRewriteMethod'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'query'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'start'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'end'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'part1'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'start'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'field'}},
                                                                                                   {'name': {'identifier': 'part1'}}],
                                                                                     'name': {'identifier': 'normalize'},
                                                                                     'scope': {'name': {'identifier': 'getAnalyzer'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'start'}},
                                                                           'value': {}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'part2'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'end'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'field'}},
                                                                                                   {'name': {'identifier': 'part2'}}],
                                                                                     'name': {'identifier': 'normalize'},
                                                                                     'scope': {'name': {'identifier': 'getAnalyzer'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'end'}},
                                                                           'value': {}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}},
                                                                                           {'name': {'identifier': 'start'}},
                                                                                           {'name': {'identifier': 'end'}},
                                                                                           {'name': {'identifier': 'startInclusive'}},
                                                                                           {'name': {'identifier': 'endInclusive'}}],
                                                                             'type': {'name': {'identifier': 'TermRangeQuery'}}},
                                                             'name': {'identifier': 'query'},
                                                             'type': {'name': {'identifier': 'TermRangeQuery'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'multiTermRewriteMethod'}}],
                                              'name': {'identifier': 'setRewriteMethod'},
                                              'scope': {'name': {'identifier': 'query'}}}},
                              {'expression': {'name': {'identifier': 'query'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Owner'},
                                                                                                                                                                      {'IdentifierName': 'ValidOutput'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'newOutput'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'GreaterThanExpression': [{'IdentifierName': 'NumArcs'},
                                                                                                                                     {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'S'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'Arcs'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'NumArcs'},
                                                                                                                                                                                                                            {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arc'},
                                                                                                                                                                  {'IdentifierName': 'Label'}]},
                                                                                                                                {'IdentifierName': 'labelToMatch'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arc'},
                                                                                                                  {'IdentifierName': 'Output'}]},
                                                                                {'IdentifierName': 'newOutput'}]}]}]},
  'java_ast': {'statements': [{'check': {'arguments': [{'name': {'identifier': 'newOutput'}}],
                                         'name': {'identifier': 'validOutput'},
                                         'scope': {'name': {'identifier': 'owner'}}}},
                              {'check': {'left': {'name': {'identifier': 'numArcs'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}}},
                              {'expression': {'variables': [{'initializer': {'index': {'left': {'name': {'identifier': 'numArcs'}},
                                                                                       'operator': 'MINUS',
                                                                                       'right': {'value': '1'}},
                                                                             'name': {'name': {'identifier': 'arcs'}}},
                                                             'name': {'identifier': 'arc'},
                                                             'type': {'name': {'identifier': 'Arc'},
                                                                      'typeArguments': [{'name': {'identifier': 'T'}}]}}]}},
                              {'check': {'left': {'name': {'identifier': 'label'},
                                                  'scope': {'name': {'identifier': 'arc'}}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'labelToMatch'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'output'},
                                                         'scope': {'name': {'identifier': 'arc'}}},
                                              'value': {'name': {'identifier': 'newOutput'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'offset'},
                                                                            {'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pool'},
                                                                                                                                                           {'IdentifierName': 'NewSlice'}]},
                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'FIRST_LEVEL_SIZE'}]}]}]},
                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'pool'},
                                                                                                                                 {'IdentifierName': 'Int32Offset'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'offset'}},
                                              'value': {'left': {'arguments': [{'name': {'identifier': 'FIRST_LEVEL_SIZE'}}],
                                                                 'name': {'identifier': 'newSlice'},
                                                                 'scope': {'name': {'identifier': 'pool'}}},
                                                        'operator': 'PLUS',
                                                        'right': {'name': {'identifier': 'intOffset'},
                                                                  'scope': {'name': {'identifier': 'pool'}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'SearchAfter'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'after'}]},
                                                                                        {'Argument': [{'IdentifierName': 'query'}]},
                                                                                        {'Argument': [{'IdentifierName': 'numHits'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'after'}},
                                                            {'name': {'identifier': 'query'}},
                                                            {'name': {'identifier': 'numHits'}}],
                                              'name': {'identifier': 'searchAfter'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'obj'}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                              {'IdentifierName': 'Equals'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'obj'}]}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'GetType'},
                                                                                           {'ArgumentList': '()'}]},
                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'obj'},
                                                                                                                             {'IdentifierName': 'GetType'}]},
                                                                                           {'ArgumentList': '()'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SortedSetSortField'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'SortedSetSortField'},
                                                                                                                                                  {'IdentifierName': 'obj'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'selector'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                   {'IdentifierName': 'selector'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'obj'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'obj'}}],
                                                            'name': {'identifier': 'equals'},
                                                            'scope': {}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'left': {'name': {'identifier': 'getClass'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'getClass'},
                                                       'scope': {'name': {'identifier': 'obj'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'obj'}},
                                                                             'type': {'name': {'identifier': 'SortedSetSortField'}}},
                                                             'name': {'identifier': 'other'},
                                                             'type': {'name': {'identifier': 'SortedSetSortField'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'selector'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'selector'},
                                                       'scope': {'name': {'identifier': 'other'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RandomState'},
                                                                                                    {'IdentifierName': 'NextBoolean'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Thread'},
                                                                                                                                        {'IdentifierName': 'Sleep'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'nextBoolean'},
                                             'scope': {'name': {'identifier': 'randomState'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'yield'},
                                                                           'scope': {'name': {'identifier': 'Thread'}}}}]}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'ElementAccessExpression': [{'IdentifierName': 'b'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'a'"}]},
                                                               {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'e'"}]},
                                                               {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'i'"}]},
                                                               {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'o'"}]},
                                                               {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'u'"}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'y'"}]},
                                                               {'ReturnStatement': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                  {'IdentifierName': 'k0'}]}]},
                                                                                                               {'TrueLiteralExpression': 'true'},
                                                                                                               {'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'Cons'},
                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                                                           {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'value': 'a'}},
                                           {'label': {'value': 'e'}},
                                           {'label': {'value': 'i'}},
                                           {'label': {'value': 'o'}},
                                           {'label': {'value': 'u'},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'value': 'y'},
                                            'statements': [{'expression': {'condition': {'inner': {'left': {'name': {'identifier': 'i'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'name': {'identifier': 'k0'}}}},
                                                                           'elseExpr': {'expression': {'arguments': [{'left': {'name': {'identifier': 'i'}},
                                                                                                                      'operator': 'MINUS',
                                                                                                                      'right': {'value': '1'}}],
                                                                                                       'name': {'identifier': 'cons'}},
                                                                                        'operator': 'LOGICAL_COMPLEMENT'},
                                                                           'thenExpr': {'value': 'true'}}}]},
                                           {'statements': [{'expression': {'value': 'true'}}]}],
                               'selector': {'index': {'name': {'identifier': 'i'}},
                                            'name': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mval'},
                                                                                                                  {'IdentifierName': 'Exists'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                            {'IdentifierName': 'BytesVal'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]},
                                                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mval'},
                                                                                                                                                                            {'IdentifierName': 'Value'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'exists'},
                                                         'scope': {'name': {'identifier': 'mval'}}},
                                              'value': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                      {'name': {'identifier': 'value'},
                                                                       'scope': {'name': {'identifier': 'mval'}}}],
                                                        'name': {'identifier': 'bytesVal'}}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'Exception'},
                                             {'InvocationExpression': [{'IdentifierName': 'ExpandFromMultiple'},
                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]},
                                             {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 't2'},
                                                                                                                                                  {'IdentifierName': 'AssumptionViolatedException'}]}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 't2'}},
                                                                                               'type': {'name': {'identifier': 'AssumptionViolatedException'}}}},
                                                                      'operator': 'LOGICAL_COMPLEMENT'},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}}]},
                               'iterable': {'arguments': [{'name': {'identifier': 't'}}],
                                            'name': {'identifier': 'expandFromMultiple'}},
                               'variable': {'variables': [{'name': {'identifier': 't2'},
                                                           'type': {'name': {'identifier': 'Throwable'}}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'multipleValuesPerDocument'},
                                        {'Block': [{'SwitchStatement': [{'IdentifierName': 'scoreMode'},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ScoreMode'},
                                                                                                                                                  {'IdentifierName': 'Avg'}]}]},
                                                                                           {'ReturnStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'MV'},
                                                                                                                                                                 {'IdentifierName': 'Avg'}]},
                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]},
                                                                        {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                                                           {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'MV'},
                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                                {'Argument': [{'IdentifierName': 'scoreMode'}]}]}]}]}]}]}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'scoreMode'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ScoreMode'},
                                                                                                                      {'IdentifierName': 'Avg'}]}]},
                                                               {'ReturnStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'SV'},
                                                                                                                                     {'IdentifierName': 'Avg'}]},
                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SV'},
                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                    {'Argument': [{'IdentifierName': 'scoreMode'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'multipleValuesPerDocument'}},
                               'elseStmt': {'statements': [{'entries': [{'label': {'name': {'identifier': 'Avg'}},
                                                                         'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                                       'name': {'identifier': 'binaryDocValues'}}],
                                                                                                        'type': {'name': {'identifier': 'Avg'},
                                                                                                                 'scope': {'name': {'identifier': 'SV'}}}}}]},
                                                                        {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                                       'name': {'identifier': 'binaryDocValues'}},
                                                                                                                      {'name': {'identifier': 'scoreMode'}}],
                                                                                                        'type': {'name': {'identifier': 'SV'}}}}]}],
                                                            'selector': {'name': {'identifier': 'scoreMode'}}}]},
                               'thenStmt': {'statements': [{'entries': [{'label': {'name': {'identifier': 'Avg'}},
                                                                         'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                                       'name': {'identifier': 'sortedSetDocValues'}}],
                                                                                                        'type': {'name': {'identifier': 'Avg'},
                                                                                                                 'scope': {'name': {'identifier': 'MV'}}}}}]},
                                                                        {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                                       'name': {'identifier': 'sortedSetDocValues'}},
                                                                                                                      {'name': {'identifier': 'scoreMode'}}],
                                                                                                        'type': {'name': {'identifier': 'MV'}}}}]}],
                                                            'selector': {'name': {'identifier': 'scoreMode'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_p2'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_p2'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_p1'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_p1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'I_pV'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                  {'IdentifierName': 'I_pV'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'CopyFrom'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'other'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_p2'}},
                                              'value': {'name': {'identifier': 'I_p2'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_p1'}},
                                              'value': {'name': {'identifier': 'I_p1'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'I_pV'}},
                                              'value': {'name': {'identifier': 'I_pV'},
                                                        'scope': {'name': {'identifier': 'other'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'other'}}],
                                              'name': {'identifier': 'copy_from'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'WHITESPACE'}]}]},
                                                                                                                                                                              {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'MockCollationFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'true'}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'MockCollationFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MatchAllDocsQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexSearcher'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewSearcher'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'Reader'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'ScoreDoc'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MyTopsDocCollector'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'numResults'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'searcher'},
                                                                                                            {'IdentifierName': 'Search'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'q'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tdc'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'tdc'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MatchAllDocsQuery'}}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                             'name': {'identifier': 'newSearcher'}},
                                                             'name': {'identifier': 'searcher'},
                                                             'type': {'name': {'identifier': 'IndexSearcher'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'numResults'}}],
                                                                             'type': {'name': {'identifier': 'MyTopsDocCollector'}}},
                                                             'name': {'identifier': 'tdc'},
                                                             'type': {'name': {'identifier': 'TopDocsCollector'},
                                                                      'typeArguments': [{'name': {'identifier': 'ScoreDoc'}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'q'}},
                                                            {'name': {'identifier': 'tdc'}}],
                                              'name': {'identifier': 'search'},
                                              'scope': {'name': {'identifier': 'searcher'}}}},
                              {'expression': {'name': {'identifier': 'tdc'}}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'stackSize'},
                                                                      {'NumericLiteralExpression': '1'}]},
                                           {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'MergeAt'},
                                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'value': '0'}],
                                                                       'name': {'identifier': 'mergeAt'}}}]},
                               'condition': {'left': {'name': {'identifier': 'stackSize'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                {'ParenthesizedExpression': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                       {'IdentifierName': 'MaxValue'}]},
                                                                                                                     {'IdentifierName': 'encoded'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'inner': {'left': {'name': {'identifier': 'MAX_VALUE'},
                                                                                'scope': {'name': {'identifier': 'Integer'}}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'name': {'identifier': 'encoded'}}}},
                                              'type': {'type': 'INT'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'r_check_vowel_harmony'},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_17'}]},
                                                                                                          {'Argument': [{'NumericLiteralExpression': '4'}]}]}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'r_check_vowel_harmony'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'a_17'}},
                                                                    {'value': '4'}],
                                                      'name': {'identifier': 'find_among_b'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ifVals'},
                                                                                                                                   {'IdentifierName': 'BoolVal'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'trueVals'},
                                                                                                                                   {'IdentifierName': 'ByteVal'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'falseVals'},
                                                                                                                                   {'IdentifierName': 'ByteVal'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                            'name': {'identifier': 'boolVal'},
                                                            'scope': {'name': {'identifier': 'ifVals'}}},
                                              'elseExpr': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                           'name': {'identifier': 'byteVal'},
                                                           'scope': {'name': {'identifier': 'falseVals'}}},
                                              'thenExpr': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                           'name': {'identifier': 'byteVal'},
                                                           'scope': {'name': {'identifier': 'trueVals'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'LogicalOrExpression': [{'LessThanExpression': [{'IdentifierName': 'start'},
                                                                                                                  {'NumericLiteralExpression': '0'}]},
                                                                                          {'GreaterThanExpression': [{'IdentifierName': 'end'},
                                                                                                                     {'IdentifierName': 'Length'}]}]},
                                                                 {'GreaterThanExpression': [{'IdentifierName': 'start'},
                                                                                            {'IdentifierName': 'end'}]}]},
                                        {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                        {'IdentifierName': 'IndexOutOfRangeException'}]},
                                                                                                     {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'CharsRef'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'chars'}]},
                                                                                            {'Argument': [{'AddExpression': [{'IdentifierName': 'Offset'},
                                                                                                                             {'IdentifierName': 'start'}]}]},
                                                                                            {'Argument': [{'SubtractExpression': [{'IdentifierName': 'end'},
                                                                                                                                  {'IdentifierName': 'start'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'left': {'name': {'identifier': 'start'}},
                                                               'operator': 'LESS',
                                                               'right': {'value': '0'}},
                                                      'operator': 'OR',
                                                      'right': {'left': {'name': {'identifier': 'end'}},
                                                                'operator': 'GREATER',
                                                                'right': {'name': {'identifier': 'length'}}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'start'}},
                                                       'operator': 'GREATER',
                                                       'right': {'name': {'identifier': 'end'}}}},
                               'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'IndexOutOfBoundsException'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'chars'}},
                                                            {'left': {'name': {'identifier': 'offset'}},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'start'}}},
                                                            {'left': {'name': {'identifier': 'end'}},
                                                             'operator': 'MINUS',
                                                             'right': {'name': {'identifier': 'start'}}}],
                                              'type': {'name': {'identifier': 'CharsRef'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldTermStack'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldTermStack'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'docId'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'matchedField'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'fieldQuery'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldPhraseList'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldPhraseList'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldTermStack'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'fieldQuery'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'phraseLimit'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fragListBuilder'},
                                                                                                        {'IdentifierName': 'CreateFieldFragList'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldPhraseList'}]},
                                                                                        {'Argument': [{'IdentifierName': 'fragCharSize'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                             'scope': {'name': {'identifier': 'matchedFields'}}},
                                                             'name': {'identifier': 'matchedFieldsItr'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'hasNext'},
                                                            'scope': {'name': {'identifier': 'matchedFieldsItr'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'matchedFields '
                                                                                                   'must '
                                                                                                   'contain '
                                                                                                   'at '
                                                                                                   'least '
                                                                                                   'on '
                                                                                                   'field '
                                                                                                   'name.'}],
                                                                           'type': {'name': {'identifier': 'IllegalArgumentException'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'FieldPhraseList'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                                       'scope': {'name': {'identifier': 'matchedFields'}}}}]},
                                                             'name': {'identifier': 'toMerge'},
                                                             'type': {'componentType': {'name': {'identifier': 'FieldPhraseList'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}},
                                                                                                                    {'name': {'identifier': 'docId'}},
                                                                                                                    {'name': {'identifier': 'next'},
                                                                                                                     'scope': {'name': {'identifier': 'matchedFieldsItr'}}},
                                                                                                                    {'name': {'identifier': 'fieldQuery'}}],
                                                                                                      'type': {'name': {'identifier': 'FieldTermStack'}}},
                                                                                      'name': {'identifier': 'stack'},
                                                                                      'type': {'name': {'identifier': 'FieldTermStack'}}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'expression': {'name': {'identifier': 'i'}},
                                                                                            'operator': 'POSTFIX_INCREMENT'},
                                                                                  'name': {'name': {'identifier': 'toMerge'}}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'stack'}},
                                                                                               {'name': {'identifier': 'fieldQuery'}},
                                                                                               {'name': {'identifier': 'phraseLimit'}}],
                                                                                 'type': {'name': {'identifier': 'FieldPhraseList'}}}}}]},
                               'condition': {'name': {'identifier': 'hasNext'},
                                             'scope': {'name': {'identifier': 'matchedFieldsItr'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'toMerge'}}],
                                                             'type': {'name': {'identifier': 'FieldPhraseList'}}},
                                                            {'name': {'identifier': 'fragCharSize'}}],
                                              'name': {'identifier': 'createFieldFragList'},
                                              'scope': {'name': {'identifier': 'fragListBuilder'}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iw'},
                                                                                                                                         {'IdentifierName': 'Commit'}]},
                                                                                                       {'ArgumentList': '()'}]}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexCommit'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sdp'},
                                                                                                                                                                                                                       {'IdentifierName': 'Snapshot'}]},
                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                    {'ForEachStatement': [{'PredefinedType': 'string'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'ic'},
                                                                                                            {'IdentifierName': 'FileNames'}]},
                                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertTrue'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'SlowFileExists'},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                                                                                                                    {'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                                                   {'IdentifierName': 'toString'}]},
                                                                                                                                                                                 {'ArgumentList': '()'}]}]},
                                                                                                                                         {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                         'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'commit'},
                                                                           'scope': {'name': {'identifier': 'iw'}}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'snapshot'},
                                                                                                          'scope': {'name': {'identifier': 'sdp'}}},
                                                                                          'name': {'identifier': 'ic'},
                                                                                          'type': {'name': {'identifier': 'IndexCommit'}}}]}},
                                                           {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'dir'}},
                                                                                                                                 {'name': {'identifier': 'name'}}],
                                                                                                                   'name': {'identifier': 'slowFileExists'}}],
                                                                                                    'name': {'identifier': 'assertTrue'}}}]},
                                                            'iterable': {'name': {'identifier': 'getFileNames'},
                                                                         'scope': {'name': {'identifier': 'ic'}}},
                                                            'variable': {'variables': [{'name': {'identifier': 'name'},
                                                                                        'type': {'name': {'identifier': 'String'}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DocumentsWriterDeleteQueue'},
                                                                                                             {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                              {'IdentifierName': 'deleteQueue'}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'deleteQueue'},
                                                                                                                                          {'IdentifierName': 'AddDelete'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'queries'}]}]}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'flushControl'},
                                                                                                                                          {'IdentifierName': 'DoOnDelete'}]},
                                                                                                        {'ArgumentList': '()'}]}]},
                                                     {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'ApplyAllDeletes'},
                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'deleteQueue'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'deleteQueue'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'deleteQueue'},
                                                             'type': {'name': {'identifier': 'DocumentsWriterDeleteQueue'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'queries'}}],
                                                                             'name': {'identifier': 'addDelete'},
                                                                             'scope': {'name': {'identifier': 'deleteQueue'}}},
                                                             'name': {'identifier': 'seqNo'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'name': {'identifier': 'doOnDelete'},
                                              'scope': {'name': {'identifier': 'flushControl'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastSeqNo'}},
                                              'value': {'arguments': [{'name': {'identifier': 'lastSeqNo'}},
                                                                      {'name': {'identifier': 'seqNo'}}],
                                                        'name': {'identifier': 'max'},
                                                        'scope': {'name': {'identifier': 'Math'}}}}},
                              {'condition': {'arguments': [{'name': {'identifier': 'deleteQueue'}}],
                                             'name': {'identifier': 'applyAllDeletes'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'seqNo'}},
                                                                           'value': {'expression': {'name': {'identifier': 'seqNo'}},
                                                                                     'operator': 'MINUS'}}}]}},
                              {'expression': {'name': {'identifier': 'seqNo'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'pos'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                            {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                          {'IdentifierName': 'CodePointAt'}]},
                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]},
                                                              {'IdentifierName': 'c'}]},
                                        {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'pos'},
                                                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Character'},
                                                                                                                                                                     {'IdentifierName': 'CharCount'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'pos'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'originalString'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'pos'}}],
                                                      'name': {'identifier': 'codePointAt'},
                                                      'scope': {'name': {'identifier': 'originalString'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'c'}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                           'target': {'name': {'identifier': 'pos'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                                     'name': {'identifier': 'charCount'},
                                                                                     'scope': {'name': {'identifier': 'Character'}}}}},
                                                           {'expression': {'value': 'true'}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastPos'},
                                                                                {'IdentifierName': 'pos'}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]},
                       {'WhileStatement': [{'LogicalAndExpression': [{'LessThanExpression': [{'IdentifierName': 'pos'},
                                                                                             {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                 {'IdentifierName': 'keys'}]},
                                                                                                                               {'IdentifierName': 'Length'}]}]},
                                                                     {'EqualsExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                          {'IdentifierName': 'keys'}]},
                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                           {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastPos'}},
                                              'value': {'name': {'identifier': 'pos'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'pos'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'body': {'expression': {'expression': {'name': {'identifier': 'pos'}},
                                                       'operator': 'POSTFIX_INCREMENT'}},
                               'condition': {'left': {'left': {'name': {'identifier': 'pos'}},
                                                      'operator': 'LESS',
                                                      'right': {'name': {'identifier': 'length'},
                                                                'scope': {'name': {'identifier': 'keys'}}}},
                                             'operator': 'AND',
                                             'right': {'left': {'index': {'name': {'identifier': 'pos'}},
                                                                'name': {'name': {'identifier': 'keys'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jjmatchedKind'},
                                                                                {'IdentifierName': 'kind'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jjmatchedPos'},
                                                                                {'IdentifierName': 'pos'}]}]},
                       {'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'pos'},
                                                               {'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'jjmatchedKind'}},
                                              'value': {'name': {'identifier': 'kind'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'jjmatchedPos'}},
                                              'value': {'name': {'identifier': 'pos'}}}},
                              {'expression': {'left': {'name': {'identifier': 'pos'}},
                                              'operator': 'PLUS',
                                              'right': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'BytesToCharSequence'},
                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': '@string'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'random'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'string'}}],
                                                             'type': {'name': {'identifier': 'BytesRef'}}},
                                                            {'name': {'identifier': 'random'}}],
                                              'name': {'identifier': 'bytesToCharSequence'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FIELD'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                            {'IdentifierName': 'Name'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'scratch'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'WriteNewline'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TYPE'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'type'},
                                                                                                                                                                      {'IdentifierName': 'ToString'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'scratch'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SimpleTextUtil'},
                                                                                                            {'IdentifierName': 'WriteNewline'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'data'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'data'}},
                                                            {'name': {'identifier': 'FIELD'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'data'}},
                                                            {'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'field'}}},
                                                            {'name': {'identifier': 'scratch'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'data'}}],
                                              'name': {'identifier': 'writeNewline'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'data'}},
                                                            {'name': {'identifier': 'TYPE'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'data'}},
                                                            {'name': {'identifier': 'toString'},
                                                             'scope': {'name': {'identifier': 'type'}}},
                                                            {'name': {'identifier': 'scratch'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'data'}}],
                                              'name': {'identifier': 'writeNewline'},
                                              'scope': {'name': {'identifier': 'SimpleTextUtil'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'BitwiseOrExpression': [{'BitwiseOrExpression': [{'BitwiseOrExpression': [{'ParenthesizedExpression': [{'LeftShiftExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                                                                                                   {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]},
                                                                                                                                                                                                                                    {'NumericLiteralExpression': '0xFF'}]}]},
                                                                                                                                                                             {'NumericLiteralExpression': '24'}]}]},
                                                                                                                       {'ParenthesizedExpression': [{'LeftShiftExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                                                                                                   {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]},
                                                                                                                                                                                                                                    {'NumericLiteralExpression': '0xFF'}]}]},
                                                                                                                                                                             {'NumericLiteralExpression': '16'}]}]}]},
                                                                                              {'ParenthesizedExpression': [{'LeftShiftExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                                                                          {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'pos'}]}]}]}]},
                                                                                                                                                                                                           {'NumericLiteralExpression': '0xFF'}]}]},
                                                                                                                                                    {'NumericLiteralExpression': '8'}]}]}]},
                                                                     {'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                           {'IdentifierName': 'Bytes'}]},
                                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]},
                                                                                                                            {'NumericLiteralExpression': '0xFF'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'left': {'inner': {'left': {'inner': {'left': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                                                                                         'operator': 'POSTFIX_INCREMENT'},
                                                                                                               'name': {'name': {'identifier': 'bytes'},
                                                                                                                        'scope': {'name': {'identifier': 'b'}}}},
                                                                                                      'operator': 'BINARY_AND',
                                                                                                      'right': {'value': '0xFF'}}},
                                                                                   'operator': 'LEFT_SHIFT',
                                                                                   'right': {'value': '24'}}},
                                                                'operator': 'BINARY_OR',
                                                                'right': {'inner': {'left': {'inner': {'left': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                                                                                          'operator': 'POSTFIX_INCREMENT'},
                                                                                                                'name': {'name': {'identifier': 'bytes'},
                                                                                                                         'scope': {'name': {'identifier': 'b'}}}},
                                                                                                       'operator': 'BINARY_AND',
                                                                                                       'right': {'value': '0xFF'}}},
                                                                                    'operator': 'LEFT_SHIFT',
                                                                                    'right': {'value': '16'}}}},
                                                       'operator': 'BINARY_OR',
                                                       'right': {'inner': {'left': {'inner': {'left': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                                                                                 'operator': 'POSTFIX_INCREMENT'},
                                                                                                       'name': {'name': {'identifier': 'bytes'},
                                                                                                                'scope': {'name': {'identifier': 'b'}}}},
                                                                                              'operator': 'BINARY_AND',
                                                                                              'right': {'value': '0xFF'}}},
                                                                           'operator': 'LEFT_SHIFT',
                                                                           'right': {'value': '8'}}}},
                                              'operator': 'BINARY_OR',
                                              'right': {'inner': {'left': {'index': {'name': {'identifier': 'pos'}},
                                                                           'name': {'name': {'identifier': 'bytes'},
                                                                                    'scope': {'name': {'identifier': 'b'}}}},
                                                                  'operator': 'BINARY_AND',
                                                                  'right': {'value': '0xFF'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'RefreshReader'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                        {'Argument': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'hasChanges'}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                                                      'name': {'identifier': 'r'},
                                                                                      'type': {'name': {'identifier': 'DirectoryReader'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'test'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'modify'}}],
                                                                                                    'name': {'identifier': 'modifyIndex'},
                                                                                                    'scope': {'name': {'identifier': 'test'}}}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'r'}},
                                                                                                    'value': {'name': {'identifier': 'openReader'},
                                                                                                              'scope': {'name': {'identifier': 'test'}}}}}]}},
                                                       {'expression': {'variables': [{'initializer': {},
                                                                                      'name': {'identifier': 'refreshed'},
                                                                                      'type': {'name': {'identifier': 'DirectoryReader'}}}]}},
                                                       {'finallyBlock': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'refreshed'}},
                                                                                                                'operator': 'EQUALS',
                                                                                                                'right': {}},
                                                                                                       'operator': 'AND',
                                                                                                       'right': {'left': {'name': {'identifier': 'r'}},
                                                                                                                 'operator': 'NOT_EQUALS',
                                                                                                                 'right': {}}},
                                                                                         'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                                                                                     'scope': {'name': {'identifier': 'r'}}}}]}}]},
                                                        'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'refreshed'}},
                                                                                                    'value': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                                                              'name': {'identifier': 'openIfChanged'},
                                                                                                              'scope': {'name': {'identifier': 'DirectoryReader'}}}}},
                                                                                    {'condition': {'left': {'name': {'identifier': 'refreshed'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {}},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'refreshed'}},
                                                                                                                                 'value': {'name': {'identifier': 'reader'}}}}]}}]}},
                                                       {'condition': {'name': {'identifier': 'hasChanges'}},
                                                        'elseStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'refreshed'}},
                                                                                                   'operator': 'NOT_EQUALS',
                                                                                                   'right': {'name': {'identifier': 'reader'}}},
                                                                                     'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'New '
                                                                                                                                                         'DirectoryReader '
                                                                                                                                                         'instance '
                                                                                                                                                         'created '
                                                                                                                                                         'during '
                                                                                                                                                         'refresh '
                                                                                                                                                         'even '
                                                                                                                                                         'though '
                                                                                                                                                         'index '
                                                                                                                                                         'had '
                                                                                                                                                         'no '
                                                                                                                                                         'changes.'}],
                                                                                                                                 'name': {'identifier': 'fail'}}}]}}]},
                                                        'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'refreshed'}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'name': {'identifier': 'reader'}}},
                                                                                     'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'No '
                                                                                                                                                         'new '
                                                                                                                                                         'DirectoryReader '
                                                                                                                                                         'instance '
                                                                                                                                                         'created '
                                                                                                                                                         'during '
                                                                                                                                                         'refresh.'}],
                                                                                                                                 'name': {'identifier': 'fail'}}}]}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'r'}},
                                                                                     {'name': {'identifier': 'refreshed'}}],
                                                                       'type': {'name': {'identifier': 'ReaderCouple'}}}}]},
                               'expression': {'name': {'identifier': 'createReaderMutex'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '3'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '3'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '3'},
                                                            {'value': '3'},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'TRI_GRAM_TOKENS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}},
                                                            {'name': {'identifier': 'TRI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}},
                                                            {'name': {'identifier': 'TRI_GRAM_TYPES_WITHOUT_UNIGRAMS_MIN_TRI_GRAM'}},
                                                            {'value': 'false'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'Lookup'},
                                                                                                                                         {'IdentifierName': 'LookupResult'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'suggester'},
                                                                                                                                                                                          {'IdentifierName': 'DoLookup'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'prefix'}]},
                                                                                                                                                                          {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'num'}]},
                                                                                                                                                                          {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                                                                                                          {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'QualifiedName': [{'IdentifierName': 'Lookup'},
                                                                {'IdentifierName': 'LookupResult'}]},
                                             {'IdentifierName': 'responses'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'response'},
                                                                                                                                                                       {'IdentifierName': 'Payload'}]},
                                                                                                                                     {'IdentifierName': 'equals'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'payload'}]}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'response'},
                                                                                                                                           {'IdentifierName': 'Value'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'prefix'}},
                                                                                           {'name': {'identifier': 'num'}},
                                                                                           {'value': 'true'},
                                                                                           {'value': 'false'}],
                                                                             'name': {'identifier': 'lookup'},
                                                                             'scope': {'name': {'identifier': 'suggester'}}},
                                                             'name': {'identifier': 'responses'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'LookupResult'},
                                                                                         'scope': {'name': {'identifier': 'Lookup'}}}]}}]}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'payload'}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'payload'},
                                                                                'scope': {'name': {'identifier': 'response'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'value'},
                                                                                                    'scope': {'name': {'identifier': 'response'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'responses'}},
                               'variable': {'variables': [{'name': {'identifier': 'response'},
                                                           'type': {'name': {'identifier': 'LookupResult'},
                                                                    'scope': {'name': {'identifier': 'Lookup'}}}}]}},
                              {'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'maxDocCharsToAnalyze'}]},
                                                                                {'IdentifierName': 'maxDocCharsToAnalyze'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'maxDocCharsToAnalyze'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'maxDocCharsToAnalyze'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'NumericLiteralExpression': '3'},
                                                               {'IdentifierName': 'arg1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'value': '3'},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'arg1'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'failed'},
                                                                                {'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'failed'}},
                                              'value': {'value': 'false'}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                                                {'IdentifierName': 'seed'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LineFileDocs'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LineFileDocs'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'numdocs'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                         {'IdentifierName': 'AddDocument'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lineFileDocs'},
                                                                                                                                                                                                   {'IdentifierName': 'NextDoc'}]},
                                                                                                                                                                 {'ArgumentList': '()'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lineFileDocs'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'seed'}}],
                                                                             'type': {'name': {'identifier': 'Random'}}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}}],
                                                                             'type': {'name': {'identifier': 'LineFileDocs'}}},
                                                             'name': {'identifier': 'lineFileDocs'},
                                                             'type': {'name': {'identifier': 'LineFileDocs'}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'nextDoc'},
                                                                                      'scope': {'name': {'identifier': 'lineFileDocs'}}}],
                                                                       'name': {'identifier': 'addDocument'},
                                                                       'scope': {'name': {'identifier': 'writer'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numdocs'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'lineFileDocs'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ThreadClass'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ThreadAnonymousInnerClassHelper'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'stopTime'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reopenThread'},
                                                                                                            {'IdentifierName': 'SetDaemon'}]},
                                                                          {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reopenThread'},
                                                                                                            {'IdentifierName': 'Start'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RunSearchThreads'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'stopTime'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reopenThread'},
                                                                                                            {'IdentifierName': 'Join'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'catchClauses': [{'body': {'statements': [{'condition': {'name': {'identifier': 'VERBOSE'}},
                                                                                                                                                                         'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'TEST: '
                                                                                                                                                                                                                                             'reopen '
                                                                                                                                                                                                                                             'thread '
                                                                                                                                                                                                                                             'hit '
                                                                                                                                                                                                                                             'exc'}],
                                                                                                                                                                                                                     'name': {'identifier': 'println'},
                                                                                                                                                                                                                     'scope': {'name': {'identifier': 'out'},
                                                                                                                                                                                                                               'scope': {'name': {'identifier': 'System'}}}}},
                                                                                                                                                                                                     {'expression': {'arguments': [{'name': {'identifier': 'out'},
                                                                                                                                                                                                                                    'scope': {'name': {'identifier': 'System'}}}],
                                                                                                                                                                                                                     'name': {'identifier': 'printStackTrace'},
                                                                                                                                                                                                                     'scope': {'name': {'identifier': 't'}}}}]}},
                                                                                                                                                                        {'expression': {'arguments': [{'value': 'true'}],
                                                                                                                                                                                        'name': {'identifier': 'set'},
                                                                                                                                                                                        'scope': {'name': {'identifier': 'failed'}}}},
                                                                                                                                                                        {'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                                                                                                                                                        'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                                                                                                                'parameter': {'isVarArgs': 'false',
                                                                                                                                                              'name': {'identifier': 't'},
                                                                                                                                                              'type': {'name': {'identifier': 'Throwable'}}}}],
                                                                                                                              'tryBlock': {'statements': [{'condition': {'name': {'identifier': 'VERBOSE'}},
                                                                                                                                                           'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'left': {'value': '['},
                                                                                                                                                                                                                               'operator': 'PLUS',
                                                                                                                                                                                                                               'right': {'name': {'identifier': 'getName'},
                                                                                                                                                                                                                                         'scope': {'name': {'identifier': 'currentThread'},
                                                                                                                                                                                                                                                   'scope': {'name': {'identifier': 'Thread'}}}}},
                                                                                                                                                                                                                      'operator': 'PLUS',
                                                                                                                                                                                                                      'right': {'value': ']: '
                                                                                                                                                                                                                                         'launch '
                                                                                                                                                                                                                                         'reopen '
                                                                                                                                                                                                                                         'thread'}}],
                                                                                                                                                                                                       'name': {'identifier': 'println'},
                                                                                                                                                                                                       'scope': {'name': {'identifier': 'out'},
                                                                                                                                                                                                                 'scope': {'name': {'identifier': 'System'}}}}}]}},
                                                                                                                                                          {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'random'}},
                                                                                                                                                                                                                                {'value': '1'},
                                                                                                                                                                                                                                {'value': '100'}],
                                                                                                                                                                                                                  'name': {'identifier': 'nextInt'},
                                                                                                                                                                                                                  'scope': {'name': {'identifier': 'TestUtil'}}}],
                                                                                                                                                                                                   'name': {'identifier': 'sleep'},
                                                                                                                                                                                                   'scope': {'name': {'identifier': 'Thread'}}}},
                                                                                                                                                                                   {'expression': {'name': {'identifier': 'commit'},
                                                                                                                                                                                                   'scope': {'name': {'identifier': 'writer'}}}},
                                                                                                                                                                                   {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'random'}},
                                                                                                                                                                                                                                {'value': '1'},
                                                                                                                                                                                                                                {'value': '5'}],
                                                                                                                                                                                                                  'name': {'identifier': 'nextInt'},
                                                                                                                                                                                                                  'scope': {'name': {'identifier': 'TestUtil'}}}],
                                                                                                                                                                                                   'name': {'identifier': 'sleep'},
                                                                                                                                                                                                   'scope': {'name': {'identifier': 'Thread'}}}},
                                                                                                                                                                                   {'expression': {'variables': [{'initializer': {'name': {'identifier': 'nextBoolean'},
                                                                                                                                                                                                                                  'scope': {'name': {'identifier': 'random'}}},
                                                                                                                                                                                                                  'name': {'identifier': 'block'},
                                                                                                                                                                                                                  'type': {'type': 'BOOLEAN'}}]}},
                                                                                                                                                                                   {'condition': {'name': {'identifier': 'block'}},
                                                                                                                                                                                    'elseStmt': {'condition': {'name': {'identifier': 'maybeRefresh'},
                                                                                                                                                                                                               'scope': {'name': {'identifier': 'mgr'}}},
                                                                                                                                                                                                 'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'pruner'}}],
                                                                                                                                                                                                                                             'name': {'identifier': 'prune'},
                                                                                                                                                                                                                                             'scope': {'name': {'identifier': 'lifetimeMGR'}}}}]}},
                                                                                                                                                                                    'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'maybeRefreshBlocking'},
                                                                                                                                                                                                                                'scope': {'name': {'identifier': 'mgr'}}}},
                                                                                                                                                                                                                {'expression': {'arguments': [{'name': {'identifier': 'pruner'}}],
                                                                                                                                                                                                                                'name': {'identifier': 'prune'},
                                                                                                                                                                                                                                'scope': {'name': {'identifier': 'lifetimeMGR'}}}}]}}]},
                                                                                                                                                           'condition': {'left': {'name': {'identifier': 'currentTimeMillis'},
                                                                                                                                                                                  'scope': {'name': {'identifier': 'System'}}},
                                                                                                                                                                         'operator': 'LESS',
                                                                                                                                                                         'right': {'name': {'identifier': 'stopTime'}}}}]}}]},
                                                                                                     'name': {'identifier': 'run'},
                                                                                                     'type': {}}],
                                                                             'type': {'name': {'identifier': 'Thread'}}},
                                                             'name': {'identifier': 'reopenThread'},
                                                             'type': {'name': {'identifier': 'Thread'}}}]}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setDaemon'},
                                              'scope': {'name': {'identifier': 'reopenThread'}}}},
                              {'expression': {'name': {'identifier': 'start'},
                                              'scope': {'name': {'identifier': 'reopenThread'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stopTime'}}],
                                              'name': {'identifier': 'runSearchThreads'}}},
                              {'expression': {'name': {'identifier': 'join'},
                                              'scope': {'name': {'identifier': 'reopenThread'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                                                           {'IdentifierName': 'Count'}]},
                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]},
                                         {'GreaterThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                           {'NumericLiteralExpression': '0'}]},
                                         {'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IIndexableField'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                   {'IdentifierName': 'Name'}]},
                                                                                                                                 {'IdentifierName': 'Equals'}]},
                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                 {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StringComparison'},
                                                                                                                                                                 {'IdentifierName': 'Ordinal'}]}]}]}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                                                     {'IdentifierName': 'Remove'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                             'scope': {'name': {'identifier': 'fields'}}},
                                                             'name': {'identifier': 'it'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{'name': {'identifier': 'IndexableField'}}]}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'next'},
                                                                                                      'scope': {'name': {'identifier': 'it'}}},
                                                                                      'name': {'identifier': 'field'},
                                                                                      'type': {'name': {'identifier': 'IndexableField'}}}]}},
                                                       {'condition': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'name'},
                                                                                'scope': {'name': {'identifier': 'field'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'remove'},
                                                                                                    'scope': {'name': {'identifier': 'it'}}}}]}}]},
                               'condition': {'name': {'identifier': 'hasNext'},
                                             'scope': {'name': {'identifier': 'it'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'done'},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'TryStatement': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                            {'VariableDeclarator': 'line'}]}]},
                                                    {'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'SimpleAssignmentExpression': [{'IdentifierName': 'line'},
                                                                                                                                                           {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                                                         {'IdentifierName': '@in'}]},
                                                                                                                                                                                                                       {'IdentifierName': 'ReadLine'}]},
                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]},
                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'spare'},
                                                                                                                                                                     {'IdentifierName': 'CopyChars'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'line'}]}]}]}]},
                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                                                         {'IdentifierName': 'spare'}]}]}]},
                                                                     {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'done'},
                                                                                                                                                         {'TrueLiteralExpression': 'true'}]}]},
                                                                                                {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                                                     {'IdentifierName': 'Dispose'}]},
                                                                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                     {'IdentifierName': '@in'}]}]}]}]}]},
                                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                                                                         {'NullLiteralExpression': 'null'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'success'},
                                                                                                             {'TrueLiteralExpression': 'true'}]}]}]},
                                         {'FinallyClause': [{'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'success'}]},
                                                                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                                                        {'IdentifierName': 'DisposeWhileHandlingException'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                                                                                        {'IdentifierName': '@in'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'done'}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'expression': {'variables': [{'initializer': {'value': 'false'},
                                                             'name': {'identifier': 'success'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'BytesRef'}}}]}},
                              {'finallyBlock': {'statements': [{'condition': {'expression': {'name': {'identifier': 'success'}},
                                                                              'operator': 'LOGICAL_COMPLEMENT'},
                                                                'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'in'}}],
                                                                                                            'name': {'identifier': 'closeWhileHandlingException'},
                                                                                                            'scope': {'name': {'identifier': 'IOUtils'}}}}]}}]},
                               'tryBlock': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'line'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'condition': {'left': {'inner': {'operator': 'ASSIGN',
                                                                                             'target': {'name': {'identifier': 'line'}},
                                                                                             'value': {'name': {'identifier': 'readLine'},
                                                                                                       'scope': {'name': {'identifier': 'in'}}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}},
                                                            'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'done'}},
                                                                                                        'value': {'value': 'true'}}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'in'}}],
                                                                                                        'name': {'identifier': 'close'},
                                                                                                        'scope': {'name': {'identifier': 'IOUtils'}}}},
                                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'result'}},
                                                                                                        'value': {}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'line'}}],
                                                                                                        'name': {'identifier': 'copyChars'},
                                                                                                        'scope': {'name': {'identifier': 'spare'}}}},
                                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'result'}},
                                                                                                        'value': {'name': {'identifier': 'get'},
                                                                                                                  'scope': {'name': {'identifier': 'spare'}}}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'success'}},
                                                                           'value': {'value': 'true'}}}]}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                   {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]},
                                                                      {'NumericLiteralExpression': '0xFFFFFFFFL'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'len'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}},
                               'message': {'left': {'left': {'value': 'len '
                                                                      'must be '
                                                                      '> 0 '
                                                                      '(got '},
                                                    'operator': 'PLUS',
                                                    'right': {'name': {'identifier': 'len'}}},
                                           'operator': 'PLUS',
                                           'right': {'value': ')'}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'valueCount'}}}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'off'}},
                                                  'operator': 'PLUS',
                                                  'right': {'name': {'identifier': 'len'}}},
                                         'operator': 'LESS_EQUALS',
                                         'right': {'name': {'identifier': 'length'},
                                                   'scope': {'name': {'identifier': 'arr'}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'valueCount'}},
                                                                                            'operator': 'MINUS',
                                                                                            'right': {'name': {'identifier': 'index'}}},
                                                                                           {'name': {'identifier': 'len'}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'gets'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'o'}},
                                                                                  'name': {'name': {'identifier': 'arr'}}},
                                                                       'value': {'left': {'index': {'name': {'identifier': 'i'}},
                                                                                          'name': {'name': {'identifier': 'values'}}},
                                                                                 'operator': 'BINARY_AND',
                                                                                 'right': {'value': '0xFFFFFFFFL'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'index'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'name': {'identifier': 'off'}},
                                                                  'name': {'identifier': 'o'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'left': {'name': {'identifier': 'index'}},
                                                                                  'operator': 'PLUS',
                                                                                  'right': {'name': {'identifier': 'gets'}}},
                                                                  'name': {'identifier': 'end'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'},
                                          {'expression': {'name': {'identifier': 'o'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'gets'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleTextNormsConsumer'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'type': {'name': {'identifier': 'SimpleTextNormsConsumer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'float'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                            {'IdentifierName': 'Log'}]},
                                                                                          {'ArgumentList': [{'Argument': [{'AddExpression': [{'NumericLiteralExpression': '1'},
                                                                                                                                             {'DivideExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'SubtractExpression': [{'IdentifierName': 'numDocs'},
                                                                                                                                                                                                                                           {'IdentifierName': 'docFreq'}]},
                                                                                                                                                                                                                   {'NumericLiteralExpression': '0.5D'}]}]},
                                                                                                                                                                   {'ParenthesizedExpression': [{'AddExpression': [{'IdentifierName': 'docFreq'},
                                                                                                                                                                                                                   {'NumericLiteralExpression': '0.5D'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'arguments': [{'left': {'value': '1'},
                                                                            'operator': 'PLUS',
                                                                            'right': {'left': {'inner': {'left': {'left': {'name': {'identifier': 'docCount'}},
                                                                                                                  'operator': 'MINUS',
                                                                                                                  'right': {'name': {'identifier': 'docFreq'}}},
                                                                                                         'operator': 'PLUS',
                                                                                                         'right': {'value': '0.5D'}}},
                                                                                      'operator': 'DIVIDE',
                                                                                      'right': {'inner': {'left': {'name': {'identifier': 'docFreq'}},
                                                                                                          'operator': 'PLUS',
                                                                                                          'right': {'value': '0.5D'}}}}}],
                                                             'name': {'identifier': 'log'},
                                                             'scope': {'name': {'identifier': 'Math'}}},
                                              'type': {'type': 'FLOAT'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Directory'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewDirectory'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'PerformTest'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'newDirectory'}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'Directory'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'dir'}}],
                                              'name': {'identifier': 'performTest'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FreqProxPostingsArray'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'size'}]},
                                                                                            {'Argument': [{'IdentifierName': 'hasFreq'}]},
                                                                                            {'Argument': [{'IdentifierName': 'hasProx'}]},
                                                                                            {'Argument': [{'IdentifierName': 'hasOffsets'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getIndexOptions'},
                                                                             'scope': {'name': {'identifier': 'fieldInfo'}}},
                                                             'name': {'identifier': 'indexOptions'},
                                                             'type': {'name': {'identifier': 'IndexOptions'}}}]}},
                              {'check': {'left': {'name': {'identifier': 'indexOptions'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {'name': {'identifier': 'NONE'},
                                                   'scope': {'name': {'identifier': 'IndexOptions'}}}}},
                              {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'DOCS_AND_FREQS'},
                                                                                                     'scope': {'name': {'identifier': 'IndexOptions'}}}],
                                                                                      'name': {'identifier': 'compareTo'},
                                                                                      'scope': {'name': {'identifier': 'indexOptions'}}},
                                                                             'operator': 'GREATER_EQUALS',
                                                                             'right': {'value': '0'}},
                                                             'name': {'identifier': 'hasFreq'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'DOCS_AND_FREQS_AND_POSITIONS'},
                                                                                                     'scope': {'name': {'identifier': 'IndexOptions'}}}],
                                                                                      'name': {'identifier': 'compareTo'},
                                                                                      'scope': {'name': {'identifier': 'indexOptions'}}},
                                                                             'operator': 'GREATER_EQUALS',
                                                                             'right': {'value': '0'}},
                                                             'name': {'identifier': 'hasProx'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'arguments': [{'name': {'identifier': 'DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS'},
                                                                                                     'scope': {'name': {'identifier': 'IndexOptions'}}}],
                                                                                      'name': {'identifier': 'compareTo'},
                                                                                      'scope': {'name': {'identifier': 'indexOptions'}}},
                                                                             'operator': 'GREATER_EQUALS',
                                                                             'right': {'value': '0'}},
                                                             'name': {'identifier': 'hasOffsets'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'size'}},
                                                            {'name': {'identifier': 'hasFreq'}},
                                                            {'name': {'identifier': 'hasProx'}},
                                                            {'name': {'identifier': 'hasOffsets'}}],
                                              'type': {'name': {'identifier': 'FreqProxPostingsArray'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Query'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ConstantScoreQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ItemizedFilter'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                                                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '0'},
                                                                                                                                                                                                                                                                                                                       {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                                  {'IdentifierName': 'Boost'}]},
                                                                                {'NumericLiteralExpression': '1000'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Qtest'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'q'}]},
                                                                                            {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                      {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                       {'ArrayInitializerExpression': [{'NumericLiteralExpression': '0'},
                                                                                                                                                                       {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'elementType': {'type': 'INT'},
                                                                                                           'initializer': {'values': [{'value': '0'},
                                                                                                                                      {'value': '2'}]},
                                                                                                           'levels': [{}]}],
                                                                                            'name': {'identifier': 'matchTheseItems'}}],
                                                                             'type': {'name': {'identifier': 'ConstantScoreQuery'}}},
                                                             'name': {'identifier': 'q'},
                                                             'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'q'}},
                                                                           {'value': '1000'}],
                                                             'type': {'name': {'identifier': 'BoostQuery'}}},
                                                            {'elementType': {'type': 'INT'},
                                                             'initializer': {'values': [{'value': '0'},
                                                                                        {'value': '2'}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'qtest'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
{'IdentifierName': 'Append'}]},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]}]}]},
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    {'IdentifierName': 'Append'}]},
                                                                                                                                                                                                                                                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'('"}]}]}]},
                                                                                                                                                                                                                                                                                                                                                                                                                        {'IdentifierName': 'Append'}]},
                                                                                                                                                                                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'startOffset'}]}]}]},
                                                                                                                                                                                                                                                                                                                                                            {'IdentifierName': 'Append'}]},
                                                                                                                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "','"}]}]}]},
                                                                                                                                                                                                                                                                                                {'IdentifierName': 'Append'}]},
                                                                                                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'endOffset'}]}]}]},
                                                                                                                                                                                                                                    {'IdentifierName': 'Append'}]},
                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "','"}]}]}]},
                                                                                                                                                                        {'IdentifierName': 'Append'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'position'}]}]}]},
                                                                                                            {'IdentifierName': 'Append'}]},
                                                                          {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "')'"}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'sb'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'expression': {'arguments': [{'value': ')'}],
                                              'name': {'identifier': 'append'},
                                              'scope': {'arguments': [{'name': {'identifier': 'position'}}],
                                                        'name': {'identifier': 'append'},
                                                        'scope': {'arguments': [{'value': ','}],
                                                                  'name': {'identifier': 'append'},
                                                                  'scope': {'arguments': [{'name': {'identifier': 'endOffset'}}],
                                                                            'name': {'identifier': 'append'},
                                                                            'scope': {'arguments': [{'value': ','}],
                                                                                      'name': {'identifier': 'append'},
                                                                                      'scope': {'arguments': [{'name': {'identifier': 'startOffset'}}],
                                                                                                'name': {'identifier': 'append'},
                                                                                                'scope': {'arguments': [{'value': '('}],
                                                                                                          'name': {'identifier': 'append'},
                                                                                                          'scope': {'arguments': [{'name': {'identifier': 'text'}}],
                                                                                                                    'name': {'identifier': 'append'},
                                                                                                                    'scope': {'name': {'identifier': 'sb'}}}}}}}}}}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'sb'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tf1'},
                                                                                                      {'IdentifierName': 'df'}]},
                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'tf2'},
                                                                                                      {'IdentifierName': 'df'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'df'},
                                                       'scope': {'name': {'identifier': 'tf1'}}},
                                              'operator': 'LESS',
                                              'right': {'name': {'identifier': 'df'},
                                                        'scope': {'name': {'identifier': 'tf2'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'current'},
                                                                                                            {'IdentifierName': 'Save'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@out'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'out'}}],
                                              'name': {'identifier': 'save'},
                                              'scope': {'name': {'identifier': 'current'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'MyBufferedIndexInput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MyBufferedIndexInput'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RunReadBytes'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BufferedIndexInput'},
                                                                                                                                            {'IdentifierName': 'BUFFER_SIZE'}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MyBufferedIndexInput'}}},
                                                             'name': {'identifier': 'input'},
                                                             'type': {'name': {'identifier': 'MyBufferedIndexInput'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'BUFFER_SIZE'},
                                                             'scope': {'name': {'identifier': 'BufferedIndexInput'}}},
                                                            {'name': {'identifier': 'random'}}],
                                              'name': {'identifier': 'runReadBytes'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'pointer'},
                                                               {'IdentifierName': 'pos'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'pointer'}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'pos'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'control'},
                                                                                                            {'IdentifierName': 'SetFlushPending'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'FindLargestNonPendingWriter'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'control'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'perThreadState'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'control'}},
                                                                           {'name': {'identifier': 'perThreadState'}}],
                                                             'name': {'identifier': 'findLargestNonPendingWriter'}}],
                                              'name': {'identifier': 'setFlushPending'},
                                              'scope': {'name': {'identifier': 'control'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetParser'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'a'}}],
                                              'name': {'identifier': 'getParser'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '10000'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TestUtil'},
                                                                                                                                                                                          {'IdentifierName': 'RandomHtmlishString'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'maxNumElements'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckAnalysisConsistency'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'NewTestAnalyzer'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                      {'IdentifierName': 'nextBoolean'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'text'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '10000'},
                                                             'name': {'identifier': 'maxNumElements'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                           {'name': {'identifier': 'maxNumElements'}}],
                                                                             'name': {'identifier': 'randomHtmlishString'},
                                                                             'scope': {'name': {'identifier': 'TestUtil'}}},
                                                             'name': {'identifier': 'text'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'newTestAnalyzer'}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'a'}},
                                                            {'name': {'identifier': 'nextBoolean'},
                                                             'scope': {'name': {'identifier': 'random'}}},
                                                            {'name': {'identifier': 'text'}}],
                                              'name': {'identifier': 'checkAnalysisConsistency'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'a'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'map'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                                {'IdentifierName': 'expression'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'name'}},
                                                            {'name': {'identifier': 'expression'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'map'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'bufferedDeletesGen'},
                                                                                {'IdentifierName': 'value'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'bufferedDeletesGen'}},
                                             'operator': 'EQUALS',
                                             'right': {'expression': {'value': '1'},
                                                       'operator': 'MINUS'}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'value': 'buffered '
                                                                                                   'deletes '
                                                                                                   'gen '
                                                                                                   'should '
                                                                                                   'only '
                                                                                                   'be '
                                                                                                   'set '
                                                                                                   'once'}],
                                                                           'type': {'name': {'identifier': 'IllegalStateException'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'bufferedDeletesGen'}},
                                                                           'value': {'name': {'identifier': 'v'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'sizeInBytes'}},
                                                                           'value': {'expression': {'value': '1'},
                                                                                     'operator': 'MINUS'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Directory'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewDirectory'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                                                                              {'Argument': [{'InvocationExpression': [{'IdentifierName': 'NewIndexWriterConfig'},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                                                                                                                                        {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'MockAnalyzer'},
                                                                                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'PrepareCommit'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Commit'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexReader'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DirectoryReader'},
                                                                                                                                                                                          {'IdentifierName': 'Open'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                            {'IdentifierName': 'NumDocs'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'newDirectory'}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'Directory'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                           {'arguments': [{'arguments': [{'name': {'identifier': 'random'}}],
                                                                                                           'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                                                                            'name': {'identifier': 'newIndexWriterConfig'}}],
                                                                             'type': {'name': {'identifier': 'IndexWriter'}}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'expression': {'name': {'identifier': 'prepareCommit'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'commit'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}}],
                                                                             'name': {'identifier': 'open'},
                                                                             'scope': {'name': {'identifier': 'DirectoryReader'}}},
                                                             'name': {'identifier': 'reader'},
                                                             'type': {'name': {'identifier': 'IndexReader'}}}]}},
                              {'expression': {'arguments': [{'value': '0'},
                                                            {'name': {'identifier': 'numDocs'},
                                                             'scope': {'name': {'identifier': 'reader'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Path'},
                                                                                                                                                                                          {'IdentifierName': 'Combine'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'workingDirectory'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'sessionId'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'source'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'System'},
                                                                                                                                                                                {'IdentifierName': 'IO'}]},
                                                                                                                                              {'IdentifierName': 'Directory'}]},
                                                                                                            {'IdentifierName': 'CreateDirectory'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'sourceDirectory'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FSDirectory'},
                                                                                                        {'IdentifierName': 'Open'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'sourceDirectory'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'sessionID'}}],
                                                                             'name': {'identifier': 'resolve'},
                                                                             'scope': {'name': {'identifier': 'workDir'}}},
                                                             'name': {'identifier': 'sessionDir'},
                                                             'type': {'name': {'identifier': 'Path'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'sessionDir'}}],
                                              'name': {'identifier': 'createDirectories'},
                                              'scope': {'name': {'identifier': 'Files'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'source'}}],
                                                                             'name': {'identifier': 'resolve'},
                                                                             'scope': {'name': {'identifier': 'sessionDir'}}},
                                                             'name': {'identifier': 'sourceDir'},
                                                             'type': {'name': {'identifier': 'Path'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'sourceDir'}}],
                                              'name': {'identifier': 'createDirectories'},
                                              'scope': {'name': {'identifier': 'Files'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'sourceDir'}}],
                                              'name': {'identifier': 'open'},
                                              'scope': {'name': {'identifier': 'FSDirectory'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LessThanExpression': [{'ParenthesizedExpression': [{'SubtractExpression': [{'IdentifierName': 'ch'},
                                                                                                                         {'CharacterLiteralExpression': "'a'"}]}]},
                                                                    {'IdentifierName': 'numStopChars'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'name': {'identifier': 'ch'}},
                                                                 'operator': 'MINUS',
                                                                 'right': {'value': 'a'}}},
                                              'operator': 'LESS',
                                              'right': {'name': {'identifier': 'numStopChars'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                                          {'IdentifierName': 'Min'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'numWords'}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                                          {'IdentifierName': 'numWords'}]}]}]}]}]}]}]}]},
                       {'WhileStatement': [{'GreaterThanOrEqualExpression': [{'PreDecrementExpression': [{'IdentifierName': 'pos'}]},
                                                                             {'NumericLiteralExpression': '0'}]},
                                           {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]},
                                                                                                                                                       {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                                      {'IdentifierName': 'bits'}]},
                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'pos'}]}]}]}]}]},
                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                       {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'numWords'}},
                                                                                           {'name': {'identifier': 'numWords'},
                                                                                            'scope': {'name': {'identifier': 'other'}}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'pos'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'pos'}},
                                                                                                  'name': {'name': {'identifier': 'bits'}}},
                                                                                         'operator': 'BINARY_AND',
                                                                                         'right': {'index': {'name': {'identifier': 'pos'}},
                                                                                                   'name': {'name': {'identifier': 'bits'},
                                                                                                            'scope': {'name': {'identifier': 'other'}}}}}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'expression': {'value': 'true'}}}]},
                               'condition': {'left': {'expression': {'name': {'identifier': 'pos'}},
                                                      'operator': 'PREFIX_DECREMENT'},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'value': '0'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Scorer_Renamed'}]},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'ScoreCachingWrappingScorer'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'scorer'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'scorer'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'scorer'}}],
                                                        'type': {'name': {'identifier': 'ScoreCachingWrappingScorer'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'ValueOffset'},
                                                               {'PostIncrementExpression': [{'IdentifierName': 'ValueCount'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'valueOffset'}},
                                              'operator': 'PLUS',
                                              'right': {'expression': {'name': {'identifier': 'valueCount'}},
                                                        'operator': 'POSTFIX_INCREMENT'}}}]}},
 {'cs_ast': {'Block': [{'DoStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'JjCheckNAdd'},
                                                                                                      {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'jjnextStates'},
                                                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'start'}]}]}]}]}]}]}]}]},
                                        {'NotEqualsExpression': [{'PostIncrementExpression': [{'IdentifierName': 'start'}]},
                                                                 {'IdentifierName': 'end'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'index': {'name': {'identifier': 'start'}},
                                                                                      'name': {'name': {'identifier': 'jjnextStates'}}}],
                                                                       'name': {'identifier': 'jjCheckNAdd'}}}]},
                               'condition': {'left': {'expression': {'name': {'identifier': 'start'}},
                                                      'operator': 'POSTFIX_INCREMENT'},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'end'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BitArray'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BitArray'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                              {'ArgumentList': '()'}]},
                                                                                                    {'IdentifierName': 'NextBoolean'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bs'},
                                                                                                                                        {'IdentifierName': 'SafeSet'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                              {'ArgumentList': '()'}]},
                                                                                                    {'IdentifierName': 'NextBoolean'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bs'},
                                                                                                                                        {'IdentifierName': 'SafeSet'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'T'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CopyOf'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'bs'}]},
                                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertEquals'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'IdentifierName': 'bs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'copy'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '2'}],
                                                                             'type': {'name': {'identifier': 'BitSet'}}},
                                                             'name': {'identifier': 'bs'},
                                                             'type': {'name': {'identifier': 'BitSet'}}}]}},
                              {'condition': {'name': {'identifier': 'nextBoolean'},
                                             'scope': {'name': {'identifier': 'random'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': '0'}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'bs'}}}}]}},
                              {'condition': {'name': {'identifier': 'nextBoolean'},
                                             'scope': {'name': {'identifier': 'random'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': '1'}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'bs'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'bs'}},
                                                                                           {'value': '2'}],
                                                                             'name': {'identifier': 'copyOf'}},
                                                             'name': {'identifier': 'copy'},
                                                             'type': {'name': {'identifier': 'T'}}}]}},
                              {'expression': {'arguments': [{'value': '2'},
                                                            {'name': {'identifier': 'bs'}},
                                                            {'name': {'identifier': 'copy'}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blocks'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '1'}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ForwardBytesReader'},
                                                                                                      {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'blocks'},
                                                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ForwardBytesReaderAnonymousInner'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'},
                                                      'scope': {'name': {'identifier': 'blocks'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '1'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'value': '0'}],
                                                                                          'name': {'identifier': 'get'},
                                                                                          'scope': {'name': {'identifier': 'blocks'}}}],
                                                                           'type': {'name': {'identifier': 'ForwardBytesReader'}}}}]}},
                              {'expression': {'anonymousClassBody': [{'variables': [{'name': {'identifier': 'current'},
                                                                                     'type': {'componentType': {'type': 'BYTE'},
                                                                                              'origin': 'TYPE'}}]},
                                                                     {'variables': [{'name': {'identifier': 'nextBuffer'},
                                                                                     'type': {'type': 'INT'}}]},
                                                                     {'variables': [{'initializer': {'name': {'identifier': 'blockSize'}},
                                                                                     'name': {'identifier': 'nextRead'},
                                                                                     'type': {'type': 'INT'}}]},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'nextRead'}},
                                                                                                             'operator': 'EQUALS',
                                                                                                             'right': {'name': {'identifier': 'blockSize'}}},
                                                                                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                           'target': {'name': {'identifier': 'current'}},
                                                                                                                                           'value': {'arguments': [{'expression': {'name': {'identifier': 'nextBuffer'}},
                                                                                                                                                                    'operator': 'POSTFIX_INCREMENT'}],
                                                                                                                                                     'name': {'identifier': 'get'},
                                                                                                                                                     'scope': {'name': {'identifier': 'blocks'}}}}},
                                                                                                                           {'expression': {'operator': 'ASSIGN',
                                                                                                                                           'target': {'name': {'identifier': 'nextRead'}},
                                                                                                                                           'value': {'value': '0'}}}]}},
                                                                                              {'expression': {'index': {'expression': {'name': {'identifier': 'nextRead'}},
                                                                                                                        'operator': 'POSTFIX_INCREMENT'},
                                                                                                              'name': {'name': {'identifier': 'current'}}}}]},
                                                                      'name': {'identifier': 'readByte'},
                                                                      'type': {'type': 'BYTE'}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'getPosition'}},
                                                                                                                             'operator': 'PLUS',
                                                                                                                             'right': {'name': {'identifier': 'count'}}}],
                                                                                                              'name': {'identifier': 'setPosition'}}}]},
                                                                      'name': {'identifier': 'skipBytes'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'LONG'}}],
                                                                      'type': {}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'blockSize'}},
                                                                                                                                                                      'operator': 'MINUS',
                                                                                                                                                                      'right': {'name': {'identifier': 'nextRead'}}},
                                                                                                                                                      'name': {'identifier': 'chunkLeft'},
                                                                                                                                                      'type': {'type': 'INT'}}]}},
                                                                                                                       {'condition': {'left': {'name': {'identifier': 'len'}},
                                                                                                                                      'operator': 'LESS_EQUALS',
                                                                                                                                      'right': {'name': {'identifier': 'chunkLeft'}}},
                                                                                                                        'elseStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'chunkLeft'}},
                                                                                                                                                                   'operator': 'GREATER',
                                                                                                                                                                   'right': {'value': '0'}},
                                                                                                                                                     'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'current'}},
                                                                                                                                                                                                               {'name': {'identifier': 'nextRead'}},
                                                                                                                                                                                                               {'name': {'identifier': 'b'}},
                                                                                                                                                                                                               {'name': {'identifier': 'offset'}},
                                                                                                                                                                                                               {'name': {'identifier': 'chunkLeft'}}],
                                                                                                                                                                                                 'name': {'identifier': 'arraycopy'},
                                                                                                                                                                                                 'scope': {'name': {'identifier': 'System'}}}},
                                                                                                                                                                                 {'expression': {'operator': 'PLUS',
                                                                                                                                                                                                 'target': {'name': {'identifier': 'offset'}},
                                                                                                                                                                                                 'value': {'name': {'identifier': 'chunkLeft'}}}},
                                                                                                                                                                                 {'expression': {'operator': 'MINUS',
                                                                                                                                                                                                 'target': {'name': {'identifier': 'len'}},
                                                                                                                                                                                                 'value': {'name': {'identifier': 'chunkLeft'}}}}]}},
                                                                                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                                                                                    'target': {'name': {'identifier': 'current'}},
                                                                                                                                                                    'value': {'arguments': [{'expression': {'name': {'identifier': 'nextBuffer'}},
                                                                                                                                                                                             'operator': 'POSTFIX_INCREMENT'}],
                                                                                                                                                                              'name': {'identifier': 'get'},
                                                                                                                                                                              'scope': {'name': {'identifier': 'blocks'}}}}},
                                                                                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                                                                                    'target': {'name': {'identifier': 'nextRead'}},
                                                                                                                                                                    'value': {'value': '0'}}}]},
                                                                                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'current'}},
                                                                                                                                                                                  {'name': {'identifier': 'nextRead'}},
                                                                                                                                                                                  {'name': {'identifier': 'b'}},
                                                                                                                                                                                  {'name': {'identifier': 'offset'}},
                                                                                                                                                                                  {'name': {'identifier': 'len'}}],
                                                                                                                                                                    'name': {'identifier': 'arraycopy'},
                                                                                                                                                                    'scope': {'name': {'identifier': 'System'}}}},
                                                                                                                                                    {'expression': {'operator': 'PLUS',
                                                                                                                                                                    'target': {'name': {'identifier': 'nextRead'}},
                                                                                                                                                                    'value': {'name': {'identifier': 'len'}}}},
                                                                                                                                                    {}]}}]},
                                                                                               'condition': {'left': {'name': {'identifier': 'len'}},
                                                                                                             'operator': 'GREATER',
                                                                                                             'right': {'value': '0'}}}]},
                                                                      'name': {'identifier': 'readBytes'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'b'},
                                                                                      'type': {'componentType': {'type': 'BYTE'},
                                                                                               'origin': 'TYPE'}},
                                                                                     {'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'offset'},
                                                                                      'type': {'type': 'INT'}},
                                                                                     {'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'len'},
                                                                                      'type': {'type': 'INT'}}],
                                                                      'type': {}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'left': {'left': {'inner': {'left': {'expression': {'name': {'identifier': 'nextBuffer'}},
                                                                                                                                                   'type': {'type': 'LONG'}},
                                                                                                                                          'operator': 'MINUS',
                                                                                                                                          'right': {'value': '1'}}},
                                                                                                                       'operator': 'MULTIPLY',
                                                                                                                       'right': {'name': {'identifier': 'blockSize'}}},
                                                                                                              'operator': 'PLUS',
                                                                                                              'right': {'name': {'identifier': 'nextRead'}}}}]},
                                                                      'name': {'identifier': 'getPosition'},
                                                                      'type': {'type': 'LONG'}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'inner': {'left': {'name': {'identifier': 'pos'}},
                                                                                                                                                                      'operator': 'SIGNED_RIGHT_SHIFT',
                                                                                                                                                                      'right': {'name': {'identifier': 'blockBits'}}}},
                                                                                                                                             'type': {'type': 'INT'}},
                                                                                                                             'name': {'identifier': 'bufferIndex'},
                                                                                                                             'type': {'type': 'INT'}}]}},
                                                                                              {'expression': {'operator': 'ASSIGN',
                                                                                                              'target': {'name': {'identifier': 'nextBuffer'}},
                                                                                                              'value': {'left': {'name': {'identifier': 'bufferIndex'}},
                                                                                                                        'operator': 'PLUS',
                                                                                                                        'right': {'value': '1'}}}},
                                                                                              {'expression': {'operator': 'ASSIGN',
                                                                                                              'target': {'name': {'identifier': 'current'}},
                                                                                                              'value': {'arguments': [{'name': {'identifier': 'bufferIndex'}}],
                                                                                                                        'name': {'identifier': 'get'},
                                                                                                                        'scope': {'name': {'identifier': 'blocks'}}}}},
                                                                                              {'expression': {'operator': 'ASSIGN',
                                                                                                              'target': {'name': {'identifier': 'nextRead'}},
                                                                                                              'value': {'expression': {'inner': {'left': {'name': {'identifier': 'pos'}},
                                                                                                                                                 'operator': 'BINARY_AND',
                                                                                                                                                 'right': {'name': {'identifier': 'blockMask'}}}},
                                                                                                                        'type': {'type': 'INT'}}}},
                                                                                              {'check': {'left': {'name': {'identifier': 'getPosition'}},
                                                                                                         'operator': 'EQUALS',
                                                                                                         'right': {'name': {'identifier': 'pos'}}}}]},
                                                                      'name': {'identifier': 'setPosition'},
                                                                      'parameters': [{'isVarArgs': 'false',
                                                                                      'name': {'identifier': 'pos'},
                                                                                      'type': {'type': 'LONG'}}],
                                                                      'type': {}},
                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'value': 'false'}}]},
                                                                      'name': {'identifier': 'reversed'},
                                                                      'type': {'type': 'BOOLEAN'}}],
                                              'type': {'name': {'identifier': 'BytesReader'},
                                                       'scope': {'name': {'identifier': 'FST'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'perThread'},
                                                                          {'IdentifierName': 'IsActive'}]},
                                        {'Block': [{'IfStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'perThread'},
                                                                                                      {'IdentifierName': 'IsInitialized'}]},
                                                                    {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SubtractFlushedNumDocs'},
                                                                                                                                                               {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'perThread'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'dwpt'}]},
                                                                                                                                                                                                                                 {'IdentifierName': 'NumDocsInRAM'}]}]}]}]}]},
                                                                                                            {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'perThread'},
                                                                                                                                                                                                                                   {'IdentifierName': 'dwpt'}]},
                                                                                                                                                                                                 {'IdentifierName': 'Abort'}]},
                                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'newFiles'}]}]}]}]}]},
                                                                                                 {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'perThread'},
                                                                                                                                                                                                                                                      {'IdentifierName': 'dwpt'}]},
                                                                                                                                                                                                                    {'IdentifierName': 'CheckAndResetHasAborted'}]},
                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                               {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'flushControl'},
                                                                                                                                                                                                                    {'IdentifierName': 'DoOnAbort'}]},
                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'perThread'}]}]}]}]}]}]}]}]},
                                                                    {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'flushControl'},
                                                                                                                                                                                    {'IdentifierName': 'DoOnAbort'}]},
                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'perThread'}]}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                        {'IdentifierName': 'Assert'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'closed'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'name': {'identifier': 'isHeldByCurrentThread'},
                                         'scope': {'name': {'identifier': 'perThread'}}}},
                              {'condition': {'name': {'identifier': 'isInitialized'},
                                             'scope': {'name': {'identifier': 'perThread'}}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'perThread'}}],
                                                                           'name': {'identifier': 'doOnAbort'},
                                                                           'scope': {'name': {'identifier': 'flushControl'}}}},
                                                           {'expression': {'value': '0'}}]},
                               'thenStmt': {'statements': [{'finallyBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'perThread'}}],
                                                                                                            'name': {'identifier': 'doOnAbort'},
                                                                                                            'scope': {'name': {'identifier': 'flushControl'}}}}]},
                                                            'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getNumDocsInRAM'},
                                                                                                                                       'scope': {'name': {'identifier': 'dwpt'},
                                                                                                                                                 'scope': {'name': {'identifier': 'perThread'}}}},
                                                                                                                       'name': {'identifier': 'abortedDocCount'},
                                                                                                                       'type': {'type': 'INT'}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'abortedDocCount'}}],
                                                                                                        'name': {'identifier': 'subtractFlushedNumDocs'}}},
                                                                                        {'expression': {'name': {'identifier': 'abort'},
                                                                                                        'scope': {'name': {'identifier': 'dwpt'},
                                                                                                                  'scope': {'name': {'identifier': 'perThread'}}}}},
                                                                                        {'expression': {'name': {'identifier': 'abortedDocCount'}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'fieldName'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                              {'IdentifierName': 'fieldName'}]},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldName'},
                                                                                                                                                                        {'IdentifierName': 'Intern'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                              {'IdentifierName': 'fieldName'}]},
                                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                      {'IdentifierName': 'WeightedSpanTerm'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'tokenStream'}]},
                                                                                {'IdentifierName': 'tokenStream'}]}]},
                       {'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Extract'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'terms'}]}]}]}]}]},
                                         {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'internalReader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'terms'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'fieldName'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'fieldName'}}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'PositionCheckingMap'}}},
                                                             'name': {'identifier': 'terms'},
                                                             'type': {'name': {'identifier': 'Map'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                        {'name': {'identifier': 'WeightedSpanTerm'}}]}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'tokenStream'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'tokenStream'}}}},
                              {'finallyBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'internalReader'}}],
                                                                               'name': {'identifier': 'close'},
                                                                               'scope': {'name': {'identifier': 'IOUtils'}}}}]},
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                                                         {'name': {'identifier': 'boost'}},
                                                                                         {'name': {'identifier': 'terms'}}],
                                                                           'name': {'identifier': 'extract'}}}]}},
                              {'expression': {'name': {'identifier': 'terms'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'writer'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                        {'IdentifierName': 'Dispose'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'writer'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                                                           'name': {'identifier': 'writeFooter'},
                                                                           'scope': {'name': {'identifier': 'CodecUtil'}}}},
                                                           {'expression': {'name': {'identifier': 'close'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'writer'}},
                                                                           'value': {}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'SortedEntry'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                  {'IdentifierName': 'docToOrd'}]},
                                                                                {'InvocationExpression': [{'IdentifierName': 'ReadNumericEntry'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'meta'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                  {'IdentifierName': 'values'}]},
                                                                                {'InvocationExpression': [{'IdentifierName': 'ReadBinaryEntry'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'meta'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'entry'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'SortedEntry'}}},
                                                             'name': {'identifier': 'entry'},
                                                             'type': {'name': {'identifier': 'SortedEntry'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'docToOrd'},
                                                         'scope': {'name': {'identifier': 'entry'}}},
                                              'value': {'arguments': [{'name': {'identifier': 'meta'}}],
                                                        'name': {'identifier': 'readNumericEntry'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'values'},
                                                         'scope': {'name': {'identifier': 'entry'}}},
                                              'value': {'arguments': [{'name': {'identifier': 'meta'}}],
                                                        'name': {'identifier': 'readBinaryEntry'}}}},
                              {'expression': {'name': {'identifier': 'entry'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'offset'},
                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Character'},
                                                                                                                                         {'IdentifierName': 'CharCount'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'bufferStart'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'offset'}},
                                              'value': {'arguments': [{'index': {'expression': {'name': {'identifier': 'bufferStart'}},
                                                                                 'operator': 'POSTFIX_INCREMENT'},
                                                                       'name': {'name': {'identifier': 'buffer'}}}],
                                                        'name': {'identifier': 'charCount'},
                                                        'scope': {'name': {'identifier': 'Character'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'ToStringBuilder'},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                                                                {'ArgumentList': '()'}]}]}]}]},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'b'}}],
                                              'name': {'identifier': 'toStringBuilder'}}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'm_sims'},
                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                        {'IdentifierName': 'ComputeNorm'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'state'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'state'}}],
                                              'name': {'identifier': 'computeNorm'},
                                              'scope': {'index': {'value': '0'},
                                                        'name': {'name': {'identifier': 'sims'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PortugueseStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'PortugueseStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'arriving'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'leaving'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'arriving'}},
                                              'value': {'expression': {'value': '1'},
                                                        'operator': 'MINUS'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'leaving'}},
                                              'value': {'expression': {'value': '1'},
                                                        'operator': 'MINUS'}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'numTop'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                   {'IdentifierName': 'Iterator'}]},
                                                                                                                                 {'IdentifierName': 'MoveNext'}]},
                                                                                               {'ArgumentList': '()'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                           {'IdentifierName': 'Current'}]},
                                                                                                                                         {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                             {'IdentifierName': 'Iterator'}]},
                                                                                                                                                                           {'IdentifierName': 'Current'}]}]}]},
                                                                                {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queue'},
                                                                                                                                                                     {'IdentifierName': 'Add'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                                     {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'top'},
                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                           {'IdentifierName': 'Current'}]},
                                                                                                                                                         {'DefaultExpression': [{'IdentifierName': 'T'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'numTop'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'name': {'identifier': 'hasNext'},
                                                                      'scope': {'name': {'identifier': 'iterator'},
                                                                                'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                          'name': {'name': {'identifier': 'top'}}}}},
                                                        'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'current'},
                                                                                                               'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                                         'name': {'name': {'identifier': 'top'}}}},
                                                                                                    'value': {}}}]},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'current'},
                                                                                                               'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                                         'name': {'name': {'identifier': 'top'}}}},
                                                                                                    'value': {'name': {'identifier': 'next'},
                                                                                                              'scope': {'name': {'identifier': 'iterator'},
                                                                                                                        'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                                                  'name': {'name': {'identifier': 'top'}}}}}}},
                                                                                    {'expression': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                                                                                   'name': {'name': {'identifier': 'top'}}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'queue'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numTop'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'numTop'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleTextStoredFieldsWriter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'directory'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'si'},
                                                                                                                                            {'IdentifierName': 'Name'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'context'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'directory'}},
                                                            {'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'si'}}},
                                                            {'name': {'identifier': 'context'}}],
                                              'type': {'name': {'identifier': 'SimpleTextStoredFieldsWriter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'ParenthesizedExpression': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'IdentifierName': 'termBytes'},
                                                                                                                                                                                                                                                               {'NullLiteralExpression': 'null'}]}]},
                                                                                                                                                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termBytes'},
                                                                                                                                                                                                                                                                     {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                                                                                   {'ArgumentList': '()'}]},
                                                                                                                                                                                                         {'NumericLiteralExpression': '0'}]}]},
                                                                                                                                                 {'ParenthesizedExpression': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'NotEqualsExpression': [{'IdentifierName': 'termBytesReader'},
                                                                                                                                                                                                                                                               {'NullLiteralExpression': 'null'}]}]},
                                                                                                                                                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termBytesReader'},
                                                                                                                                                                                                                                                                     {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                                                                                   {'ArgumentList': '()'}]},
                                                                                                                                                                                                         {'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'FieldIndexData'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                            {'IdentifierName': 'coreIndex'}]},
                                                                                                                                                                          {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'sizeInBytes'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'inner': {'condition': {'inner': {'left': {'name': {'identifier': 'termBytesReader'}},
                                                                                                               'operator': 'NOT_EQUALS',
                                                                                                               'right': {}}},
                                                                                       'elseExpr': {'value': '0'},
                                                                                       'thenExpr': {'name': {'identifier': 'ramBytesUsed'},
                                                                                                    'scope': {'name': {'identifier': 'termBytesReader'}}}}},
                                                             'name': {'identifier': 'sizeInBytes'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'sizeInBytes'}},
                                                                       'value': {'name': {'identifier': 'ramBytesUsed'},
                                                                                 'scope': {'name': {'identifier': 'entry'}}}}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'fields'}}},
                               'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                           'type': {'name': {'identifier': 'FieldIndexData'}}}]}},
                              {'expression': {'name': {'identifier': 'sizeInBytes'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outputs'},
                                                                                                        {'IdentifierName': 'Read'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'in'}}],
                                              'name': {'identifier': 'read'},
                                              'scope': {'name': {'identifier': 'outputs'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'allGroups'}]},
                                                                                {'IdentifierName': 'allGroups'}]}]},
                       {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'allGroups'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'allGroups'}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'WHITESPACE'}]}]},
                                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'false'}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'name': {'identifier': 'tokenizer'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'i'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'jjround'},
                                                                                {'NumericLiteralExpression': '0x80000001'}]}]},
                       {'ForStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'i'},
                                                                         {'NumericLiteralExpression': '33'}]},
                                         {'GreaterThanExpression': [{'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                                                    {'NumericLiteralExpression': '0'}]},
                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'jjrounds'},
                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                  {'NumericLiteralExpression': '0x80000000'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'jjround'}},
                                              'value': {'value': '0x80000001'}}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                  'name': {'name': {'identifier': 'jjrounds'}}},
                                                       'value': {'value': '0x80000000'}}},
                               'compare': {'left': {'expression': {'name': {'identifier': 'i'}},
                                                    'operator': 'POSTFIX_DECREMENT'},
                                           'operator': 'GREATER',
                                           'right': {'value': '0'}},
                               'initialization': [{'operator': 'ASSIGN',
                                                   'target': {'name': {'identifier': 'i'}},
                                                   'value': {'value': '33'}}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'InvocationExpression': [{'IdentifierName': 'ToString'},
                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'occur'}]}]}]},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'query'},
                                                                                                                           {'IdentifierName': 'ToString'}]},
                                                                                         {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'toString'},
                                                       'scope': {'name': {'identifier': 'occur'}}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'toString'},
                                                        'scope': {'name': {'identifier': 'query'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tasks'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'task'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'task'},
                                                                                                                  {'IdentifierName': 'Depth'}]},
                                                                                {'AddExpression': [{'IdentifierName': 'Depth'},
                                                                                                   {'NumericLiteralExpression': '1'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'task'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'tasks'}}}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'getDepth'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'setDepth'},
                                              'scope': {'name': {'identifier': 'task'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'node'},
                                                                                                                 {'IdentifierName': 'ModifierQueryNode'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BooleanModifierNode'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'mod'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                                                                                                              {'IdentifierName': 'node'}]}]}]}]}]},
                                                                   {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'modNode'},
                                                                                                                                            {'IdentifierName': 'Modifier'}]},
                                                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'Modifier'},
                                                                                                                                            {'IdentifierName': 'MOD_NONE'}]}]},
                                                                                    {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                                                                  {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'modNode'},
                                                                                                                                                                                                                                              {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                            {'ArgumentList': '()'}]}]},
                                                                                                                                                                    {'Argument': [{'IdentifierName': 'mod'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'node'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'node'}},
                                                                      'type': {'name': {'identifier': 'ModifierQueryNode'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'node'}},
                                                                                                          'type': {'name': {'identifier': 'ModifierQueryNode'}}},
                                                                                          'name': {'identifier': 'modNode'},
                                                                                          'type': {'name': {'identifier': 'ModifierQueryNode'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'getModifier'},
                                                                                   'scope': {'name': {'identifier': 'modNode'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'MOD_NONE'},
                                                                                    'scope': {'name': {'identifier': 'Modifier'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getChild'},
                                                                                                                       'scope': {'name': {'identifier': 'modNode'}}},
                                                                                                                      {'name': {'identifier': 'mod'}}],
                                                                                                        'type': {'name': {'identifier': 'ModifierQueryNode'}}}}]}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'node'}},
                                                                                         {'name': {'identifier': 'mod'}}],
                                                                           'type': {'name': {'identifier': 'BooleanModifierNode'}}}}]}},
                              {'expression': {'name': {'identifier': 'node'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'TEST_VALUE'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'TEST_VALUE'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetChildren'},
                                                                                                   {'ArgumentList': '()'}]},
                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'getChildren'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestRank'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'INT_VALUESOURCE'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'INT_VALUESOURCE'}}],
                                              'name': {'identifier': 'doTestRank'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                        {'IdentifierName': 'SafeGet'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'index'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'bits'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DistanceTst'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                            {'Argument': [{'IdentifierName': 'expdnrs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'db1'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                            {'name': {'identifier': 'expdnrs'}},
                                                            {'name': {'identifier': 'db1'}}],
                                              'name': {'identifier': 'distanceTst'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DistanceTst'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                            {'Argument': [{'IdentifierName': 'expdnrs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'db2'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                            {'name': {'identifier': 'expdnrs'}},
                                                            {'name': {'identifier': 'db2'}}],
                                              'name': {'identifier': 'distanceTst'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DistanceTst'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                            {'Argument': [{'IdentifierName': 'expdnrs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'db3'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'query'}},
                                                            {'name': {'identifier': 'expdnrs'}},
                                                            {'name': {'identifier': 'db3'}}],
                                              'name': {'identifier': 'distanceTst'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                              {'IdentifierName': 'Length'}]},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'normalizer'},
                                                                                                                                                                        {'IdentifierName': 'Normalize'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                        {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                        {'IdentifierName': 'Length'}]}]}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                         'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                        {'name': {'identifier': 'length'},
                                                                                                         'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                          'name': {'identifier': 'normalize'},
                                                                                          'scope': {'name': {'identifier': 'normalizer'}}}],
                                                                           'name': {'identifier': 'setLength'},
                                                                           'scope': {'name': {'identifier': 'termAtt'}}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_root'},
                                                                                {'CastExpression': [{'PredefinedType': 'char'},
                                                                                                    {'NumericLiteralExpression': '0'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_freenode'},
                                                                                {'CastExpression': [{'PredefinedType': 'char'},
                                                                                                    {'NumericLiteralExpression': '1'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_length'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_lo'},
                                                                                {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                            {'ArrayRankSpecifier': [{'IdentifierName': 'BLOCK_SIZE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_hi'},
                                                                                {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                            {'ArrayRankSpecifier': [{'IdentifierName': 'BLOCK_SIZE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_eq'},
                                                                                {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                            {'ArrayRankSpecifier': [{'IdentifierName': 'BLOCK_SIZE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_sc'},
                                                                                {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                            {'ArrayRankSpecifier': [{'IdentifierName': 'BLOCK_SIZE'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_kv'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'CharVector'},
                                                                                                              {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'root'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'freenode'}},
                                              'value': {'value': '1'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'length'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lo'}},
                                              'value': {'elementType': {'type': 'CHAR'},
                                                        'levels': [{'dimension': {'name': {'identifier': 'BLOCK_SIZE'}}}]}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'hi'}},
                                              'value': {'elementType': {'type': 'CHAR'},
                                                        'levels': [{'dimension': {'name': {'identifier': 'BLOCK_SIZE'}}}]}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'eq'}},
                                              'value': {'elementType': {'type': 'CHAR'},
                                                        'levels': [{'dimension': {'name': {'identifier': 'BLOCK_SIZE'}}}]}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'sc'}},
                                              'value': {'elementType': {'type': 'CHAR'},
                                                        'levels': [{'dimension': {'name': {'identifier': 'BLOCK_SIZE'}}}]}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'kv'}},
                                              'value': {'type': {'name': {'identifier': 'CharVector'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FieldInfos'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'byName'},
                                                                                                                                                                                                        {'IdentifierName': 'Values'}]},
                                                                                                                                                                      {'IdentifierName': 'ToArray'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'finished'}},
                                              'value': {'value': 'true'}}},
                              {'expression': {'arguments': [{'arguments': [{'elementType': {'name': {'identifier': 'FieldInfo'}},
                                                                            'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                                      'scope': {'name': {'identifier': 'byName'}}}}]}],
                                                             'name': {'identifier': 'toArray'},
                                                             'scope': {'name': {'identifier': 'values'},
                                                                       'scope': {'name': {'identifier': 'byName'}}}}],
                                              'type': {'name': {'identifier': 'FieldInfos'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'm_config'}]},
                                                                                {'IdentifierName': 'config'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_queries'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'PrepareQueries'},
                                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'config'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'config'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'queries'}},
                                              'value': {'name': {'identifier': 'prepareQueries'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BasqueAnalyzer'},
                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'type': {'name': {'identifier': 'BasqueAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                        {'IdentifierName': 'GetPointer'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getPointer'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CharVector'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CharVector'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'CastExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                                                                                                                               {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'array'},
                                                                                                                                                                                                                                                                            {'IdentifierName': 'Clone'}]},
                                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'blockSize'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cv'},
                                                                                                                  {'IdentifierName': 'n'}]},
                                                                                {'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'n'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'cv'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'clone'},
                                                                                            'scope': {'name': {'identifier': 'array'}}},
                                                                                           {'name': {'identifier': 'blockSize'}}],
                                                                             'type': {'name': {'identifier': 'CharVector'}}},
                                                             'name': {'identifier': 'cv'},
                                                             'type': {'name': {'identifier': 'CharVector'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'n'},
                                                         'scope': {'name': {'identifier': 'cv'}}},
                                              'value': {'name': {'identifier': 'n'},
                                                        'scope': {}}}},
                              {'expression': {'name': {'identifier': 'cv'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'countUntilPurge'},
                                                                                                                          {'IdentifierName': 'GetAndDecrement'}]},
                                                                                        {'ArgumentList': '()'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Purge'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'getAndDecrement'},
                                                      'scope': {'name': {'identifier': 'countUntilPurge'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'purge'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0x10000'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                   {'NumericLiteralExpression': '1138'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'char'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'DoStatement': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'map'},
                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'j'}]}]}]}]},
                                                                                                                                           {'IdentifierName': 'value'}]}]}]},
                                                                       {'GreaterThanExpression': [{'PreDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'map'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'CHAR'},
                                                                             'levels': [{'dimension': {'value': '0x110000'}}]},
                                                             'name': {'identifier': 'map'},
                                                             'type': {'componentType': {'type': 'CHAR'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'j'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'value'},
                                                                                      'type': {'type': 'CHAR'}}]}},
                                                       {'body': {'expression': {'operator': 'ASSIGN',
                                                                                'target': {'index': {'expression': {'name': {'identifier': 'j'}},
                                                                                                     'operator': 'POSTFIX_INCREMENT'},
                                                                                           'name': {'name': {'identifier': 'map'}}},
                                                                                'value': {'name': {'identifier': 'value'}}}},
                                                        'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                                               'operator': 'PREFIX_DECREMENT'},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}}}]},
                               'condition': {'left': {'name': {'identifier': 'i'}},
                                             'operator': 'LESS',
                                             'right': {'value': '1170'}}},
                              {'expression': {'name': {'identifier': 'map'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                                                        {'IdentifierName': 'GetInt16'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'wordId'}]}]}]},
                                                                                                                            {'IdentifierName': 'HAS_READING'}]}]},
                                                                     {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'arguments': [{'name': {'identifier': 'wordId'}}],
                                                                          'name': {'identifier': 'getShort'},
                                                                          'scope': {'name': {'identifier': 'buffer'}}},
                                                                 'operator': 'BINARY_AND',
                                                                 'right': {'name': {'identifier': 'HAS_READING'}}}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'NullableType': [{'PredefinedType': 'int'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'NullableType': [{'PredefinedType': 'int'}]}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'WhileStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docsEnum'},
                                                                                                                                {'IdentifierName': 'NextDoc'}]},
                                                                                              {'ArgumentList': '()'}]},
                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'DocIdSetIterator'},
                                                                                                      {'IdentifierName': 'NO_MORE_DOCS'}]}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docsEnum'},
                                                                                                                                                                                               {'IdentifierName': 'DocID'}]}]}]}]}]},
                                                      {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'docs'},
                                                                                                                                           {'IdentifierName': 'Add'}]},
                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'docID'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                        {'IdentifierName': 'ToInt32Array'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'INT'},
                                                                             'levels': [{'dimension': {'value': '0'}}]},
                                                             'name': {'identifier': 'docs'},
                                                             'type': {'componentType': {'type': 'INT'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'numDocs'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'docID'},
                                                                                                      'scope': {'name': {'identifier': 'postingsEnum'}}},
                                                                                      'name': {'identifier': 'docID'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'docs'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'docs'}},
                                                                                               {'left': {'name': {'identifier': 'numDocs'}},
                                                                                                'operator': 'PLUS',
                                                                                                'right': {'value': '1'}}],
                                                                                 'name': {'identifier': 'grow'},
                                                                                 'scope': {'name': {'identifier': 'ArrayUtil'}}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'left': {'name': {'identifier': 'numDocs'}},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'value': '1'}},
                                                                                  'name': {'name': {'identifier': 'docs'}}},
                                                                       'value': {'name': {'identifier': 'docID'}}}}]},
                               'condition': {'left': {'name': {'identifier': 'nextDoc'},
                                                      'scope': {'name': {'identifier': 'postingsEnum'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'NO_MORE_DOCS'},
                                                       'scope': {'name': {'identifier': 'DocIdSetIterator'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'docs'}},
                                                            {'name': {'identifier': 'numDocs'}}],
                                              'name': {'identifier': 'copyOf'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'cmd'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'SwitchStatement': [{'ElementAccessExpression': [{'IdentifierName': 'cmd'},
                                                                                                      {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]},
                                                                         {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'-'"}]},
                                                                                            {'CaseSwitchLabel': [{'CharacterLiteralExpression': "'D'"}]},
                                                                                            {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'len'},
                                                                                                                                                  {'AddExpression': [{'SubtractExpression': [{'ElementAccessExpression': [{'IdentifierName': 'cmd'},
                                                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                             {'CharacterLiteralExpression': "'a'"}]},
                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]},
                                                                                            {'BreakStatement': 'break;'}]},
                                                                         {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'R'"}]},
                                                                                            {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'len'}]}]},
                                                                                            {'GotoCaseStatement': [{'CharacterLiteralExpression': "'I'"}]}]},
                                                                         {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': "'I'"}]},
                                                                                            {'BreakStatement': 'break;'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'len'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'entries': [{'label': {'value': '-'}},
                                                                    {'label': {'value': 'D'},
                                                                     'statements': [{'expression': {'operator': 'PLUS',
                                                                                                    'target': {'name': {'identifier': 'len'}},
                                                                                                    'value': {'left': {'left': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                                'name': {'identifier': 'charAt'},
                                                                                                                                'scope': {'name': {'identifier': 'cmd'}}},
                                                                                                                       'operator': 'MINUS',
                                                                                                                       'right': {'value': 'a'}},
                                                                                                              'operator': 'PLUS',
                                                                                                              'right': {'value': '1'}}}},
                                                                                    {}]},
                                                                    {'label': {'value': 'R'},
                                                                     'statements': [{'expression': {'expression': {'name': {'identifier': 'len'}},
                                                                                                    'operator': 'POSTFIX_INCREMENT'}}]},
                                                                    {'label': {'value': 'I'},
                                                                     'statements': [{}]}],
                                                        'selector': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                    'operator': 'POSTFIX_INCREMENT'}],
                                                                     'name': {'identifier': 'charAt'},
                                                                     'scope': {'name': {'identifier': 'cmd'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'cmd'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'len'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TestCase'},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                            {'Argument': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '3'}]}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '1'},
                                                            {'expression': {'value': '3'},
                                                             'operator': 'MINUS'},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'testCase'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refCount'},
                                                                                                            {'IdentifierName': 'IncrementAndGet'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'name': {'identifier': 'incrementAndGet'},
                                              'scope': {'name': {'identifier': 'refCount'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'valid'},
                                                                                                                                   {'IdentifierName': 'Get'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]},
                                                                       {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                   {'IdentifierName': 'Int64ToString'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                                                                             {'IdentifierName': 'Get'}]},
                                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]},
                                                                       {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                             'name': {'identifier': 'getValueForDoc'}},
                                                             'name': {'identifier': 'value'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'docID'},
                                                      'scope': {'name': {'identifier': 'arr'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'doc'}}},
                               'elseStmt': {'statements': [{'expression': {}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'value'}}],
                                                                           'name': {'identifier': 'longToString'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Type'},
                                                                                                        {'IdentifierName': 'GetType'}]},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'AdjustDirectoryClassName'},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'clazzName'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'FSDirectory'}}}],
                                              'name': {'identifier': 'asSubclass'},
                                              'scope': {'arguments': [{'arguments': [{'name': {'identifier': 'clazzName'}}],
                                                                       'name': {'identifier': 'adjustDirectoryClassName'}}],
                                                        'name': {'identifier': 'forName'},
                                                        'scope': {'name': {'identifier': 'Class'}}}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'PredefinedType': 'bool'},
                                             {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'bool'},
                                                                                         {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                          {'ArrayInitializerExpression': [{'FalseLiteralExpression': 'false'},
                                                                                                          {'TrueLiteralExpression': 'true'}]}]},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CachingCollector'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CachingCollector'},
                                                                                                                                                                                                                           {'IdentifierName': 'Create'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'cacheScores'}]},
                                                                                                                                                                                                           {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '50'},
                                                                                                                                                                                                                                                 {'IdentifierName': 'ONE_BYTE'}]}]}]}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cc'},
                                                                                                                                             {'IdentifierName': 'SetNextReader'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cc'},
                                                                                                                                             {'IdentifierName': 'SetScorer'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'MockScorer'},
                                                                                                                                                                         {'ArgumentList': '()'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cc'},
                                                                                                                                             {'IdentifierName': 'Collect'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                             {'IdentifierName': 'IsTrue'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cc'},
                                                                                                                                                                             {'IdentifierName': 'IsCached'}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cc'},
                                                                                                                                             {'IdentifierName': 'Replay'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'NoOpCollector'},
                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'cacheScores'}},
                                                                                                                    {'left': {'value': '50'},
                                                                                                                     'operator': 'MULTIPLY',
                                                                                                                     'right': {'name': {'identifier': 'ONE_BYTE'}}}],
                                                                                                      'name': {'identifier': 'create'},
                                                                                                      'scope': {'name': {'identifier': 'CachingCollector'}}},
                                                                                      'name': {'identifier': 'cc'},
                                                                                      'type': {'name': {'identifier': 'CachingCollector'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                                                      'name': {'identifier': 'getLeafCollector'},
                                                                                                      'scope': {'name': {'identifier': 'cc'}}},
                                                                                      'name': {'identifier': 'acc'},
                                                                                      'type': {'name': {'identifier': 'LeafCollector'}}}]}},
                                                       {'expression': {'arguments': [{'type': {'name': {'identifier': 'MockScorer'}}}],
                                                                       'name': {'identifier': 'setScorer'},
                                                                       'scope': {'name': {'identifier': 'acc'}}}},
                                                       {'expression': {'arguments': [{'value': '0'}],
                                                                       'name': {'identifier': 'collect'},
                                                                       'scope': {'name': {'identifier': 'acc'}}}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'isCached'},
                                                                                      'scope': {'name': {'identifier': 'cc'}}}],
                                                                       'name': {'identifier': 'assertTrue'}}},
                                                       {'expression': {'arguments': [{'type': {'name': {'identifier': 'NoOpCollector'}}}],
                                                                       'name': {'identifier': 'replay'},
                                                                       'scope': {'name': {'identifier': 'cc'}}}}]},
                               'iterable': {'elementType': {'type': 'BOOLEAN'},
                                            'initializer': {'values': [{'value': 'false'},
                                                                       {'value': 'true'}]},
                                            'levels': [{}]},
                               'variable': {'variables': [{'name': {'identifier': 'cacheScores'},
                                                           'type': {'type': 'BOOLEAN'}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'bufferPosition'},
                                                                          {'IdentifierName': 'bufferLength'}]},
                                        {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Refill'},
                                                                                           {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'buffer'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'bufferPosition'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'bufferPosition'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'bufferLength'}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'refill'}}}},
                              {'expression': {'index': {'expression': {'name': {'identifier': 'bufferPosition'}},
                                                        'operator': 'POSTFIX_INCREMENT'},
                                              'name': {'name': {'identifier': 'buffer'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'obj'}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'obj'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'GetType'},
                                                                                           {'ArgumentList': '()'}]},
                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'obj'},
                                                                                                                             {'IdentifierName': 'GetType'}]},
                                                                                           {'ArgumentList': '()'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PathNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'PathNode'},
                                                                                                                                                  {'IdentifierName': 'obj'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'PreNode'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                   {'IdentifierName': 'PreNode'}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Number'},
                                                                                                                             {'IdentifierName': 'DoubleToInt64Bits'}]},
                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'Weight'}]}]}]},
                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Number'},
                                                                                                                             {'IdentifierName': 'DoubleToInt64Bits'}]},
                                                                                           {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                             {'IdentifierName': 'Weight'}]}]}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'obj'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'left': {'name': {'identifier': 'obj'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'left': {'name': {'identifier': 'getClass'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'getClass'},
                                                       'scope': {'name': {'identifier': 'obj'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'obj'}},
                                                                             'type': {'name': {'identifier': 'PathNode'}}},
                                                             'name': {'identifier': 'other'},
                                                             'type': {'name': {'identifier': 'PathNode'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'preNode'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'preNode'},
                                                       'scope': {'name': {'identifier': 'other'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'weight'}}],
                                                      'name': {'identifier': 'doubleToLongBits'},
                                                      'scope': {'name': {'identifier': 'Double'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'arguments': [{'name': {'identifier': 'weight'},
                                                                      'scope': {'name': {'identifier': 'other'}}}],
                                                       'name': {'identifier': 'doubleToLongBits'},
                                                       'scope': {'name': {'identifier': 'Double'}}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SimilarityBase'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'IBSimilarity'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'DistributionSPL'},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]},
                                                                                                                                                                              {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'LambdaTTF'},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]},
                                                                                                                                                                              {'Argument': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'Normalization'},
                                                                                                                                                                                                                                             {'IdentifierName': 'NoNormalization'}]},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CorrectnessTestCore'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'sim'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '2.2387237548828125f'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'DistributionSPL'}}},
                                                                                           {'type': {'name': {'identifier': 'LambdaTTF'}}},
                                                                                           {'type': {'name': {'identifier': 'NoNormalization'},
                                                                                                     'scope': {'name': {'identifier': 'Normalization'}}}}],
                                                                             'type': {'name': {'identifier': 'IBSimilarity'}}},
                                                             'name': {'identifier': 'sim'},
                                                             'type': {'name': {'identifier': 'SimilarityBase'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'sim'}},
                                                            {'value': '2.2387237548828125f'}],
                                              'name': {'identifier': 'correctnessTestCore'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Fields'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                                                                          {'IdentifierName': 'GetTermVectors'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'docId'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'vectors'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Terms'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'vectors'},
                                                                                                                                                                                          {'IdentifierName': 'GetTerms'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'vector'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'vector'},
                                                                                                                             {'IdentifierName': 'HasPositions'}]}]},
                                                                 {'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'vector'},
                                                                                                                             {'IdentifierName': 'HasOffsets'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetTokenStream'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'vector'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'docId'}}],
                                                                             'name': {'identifier': 'getTermVectors'},
                                                                             'scope': {'name': {'identifier': 'reader'}}},
                                                             'name': {'identifier': 'vectors'},
                                                             'type': {'name': {'identifier': 'Fields'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'vectors'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                             'name': {'identifier': 'terms'},
                                                                             'scope': {'name': {'identifier': 'vectors'}}},
                                                             'name': {'identifier': 'vector'},
                                                             'type': {'name': {'identifier': 'Terms'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'vector'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'hasOffsets'},
                                                            'scope': {'name': {'identifier': 'vector'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'vector'}}],
                                              'name': {'identifier': 'getTokenStream'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                            {'IdentifierName': 'Swap'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]},
                                                                                            {'Argument': [{'IdentifierName': 'j'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'list'}},
                                                            {'name': {'identifier': 'i'}},
                                                            {'name': {'identifier': 'j'}}],
                                              'name': {'identifier': 'swap'},
                                              'scope': {'name': {'identifier': 'Collections'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                    {'ArgumentList': '()'}]},
                                                                                                                                                                                          {'IdentifierName': 'nextBoolean'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LuceneVersion'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ConditionalExpression': [{'IdentifierName': 'updateOffsets'},
                                                                                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'LuceneVersion'},
                                                                                                                                                                                           {'IdentifierName': 'LUCENE_43'}]},
                                                                                                                                                         {'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TrimFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'version'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'updateOffsets'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}}],
                                                             'type': {'name': {'identifier': 'TrimFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'len'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}},
                               'message': {'left': {'left': {'value': 'len '
                                                                      'must be '
                                                                      '> 0 '
                                                                      '(got '},
                                                    'operator': 'PLUS',
                                                    'right': {'name': {'identifier': 'len'}}},
                                           'operator': 'PLUS',
                                           'right': {'value': ')'}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'valueCount'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'len'}},
                                              'value': {'arguments': [{'name': {'identifier': 'len'}},
                                                                      {'left': {'name': {'identifier': 'valueCount'}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'name': {'identifier': 'index'}}}],
                                                        'name': {'identifier': 'min'},
                                                        'scope': {'name': {'identifier': 'Math'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'arr'}},
                                                            {'name': {'identifier': 'off'}},
                                                            {'left': {'name': {'identifier': 'off'}},
                                                             'operator': 'PLUS',
                                                             'right': {'name': {'identifier': 'len'}}},
                                                            {'value': '0'}],
                                              'name': {'identifier': 'fill'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}},
                              {'expression': {'name': {'identifier': 'len'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '7'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '7'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'UNIGRAM_ONLY_POSITION_INCREMENTS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'UNIGRAM_ONLY_TYPES'}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '7'},
                                                            {'value': '7'},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'UNIGRAM_ONLY_POSITION_INCREMENTS'}},
                                                            {'name': {'identifier': 'UNIGRAM_ONLY_TYPES'}},
                                                            {'value': 'false'},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'elemSize'},
                                                                 {'NumericLiteralExpression': '10'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'elemSize'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                         {'IdentifierName': 'AreEqual'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                         {'IdentifierName': 'MaxValue'}]}]},
                                                                                                                         {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                                                                                   {'IdentifierName': 'Oversize'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                                                                   {'IdentifierName': 'MaxValue'}]}]},
                                                                                                                                                                                   {'Argument': [{'IdentifierName': 'elemSize'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                         {'IdentifierName': 'AreEqual'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                         {'IdentifierName': 'MaxValue'}]}]},
                                                                                                                         {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                                                                                   {'IdentifierName': 'Oversize'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                                                                                           {'IdentifierName': 'MaxValue'}]},
                                                                                                                                                                                                                         {'NumericLiteralExpression': '1'}]}]},
                                                                                                                                                                                   {'Argument': [{'IdentifierName': 'elemSize'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'MAX_ARRAY_LENGTH'},
                                                                                      'scope': {'name': {'identifier': 'ArrayUtil'}}},
                                                                                     {'arguments': [{'name': {'identifier': 'MAX_ARRAY_LENGTH'},
                                                                                                     'scope': {'name': {'identifier': 'ArrayUtil'}}},
                                                                                                    {'name': {'identifier': 'elemSize'}}],
                                                                                      'name': {'identifier': 'oversize'},
                                                                                      'scope': {'name': {'identifier': 'ArrayUtil'}}}],
                                                                       'name': {'identifier': 'assertEquals'}}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'MAX_ARRAY_LENGTH'},
                                                                                      'scope': {'name': {'identifier': 'ArrayUtil'}}},
                                                                                     {'arguments': [{'left': {'name': {'identifier': 'MAX_ARRAY_LENGTH'},
                                                                                                              'scope': {'name': {'identifier': 'ArrayUtil'}}},
                                                                                                     'operator': 'MINUS',
                                                                                                     'right': {'value': '1'}},
                                                                                                    {'name': {'identifier': 'elemSize'}}],
                                                                                      'name': {'identifier': 'oversize'},
                                                                                      'scope': {'name': {'identifier': 'ArrayUtil'}}}],
                                                                       'name': {'identifier': 'assertEquals'}}}]},
                               'compare': {'left': {'name': {'identifier': 'elemSize'}},
                                           'operator': 'LESS',
                                           'right': {'value': '10'}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'elemSize'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'elemSize'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'TValue'}]}]},
                                                                               {'VariableDeclarator': 'theSet'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'theMap'},
                                                                                                    {'IdentifierName': 'ContainsKey'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'theSet'},
                                                                                                            {'ElementAccessExpression': [{'IdentifierName': 'theMap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'theSet'},
                                                                                                                            {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'TValue'}]}]},
                                                                                                                                                          {'ArgumentList': '()'}]}]}]},
                                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'theMap'},
                                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]},
                                                                                                                            {'IdentifierName': 'theSet'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'theSet'},
                                                                                                            {'IdentifierName': 'UnionWith'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'vals'}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'theSet'},
                                                                              {'IdentifierName': 'Count'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'theSet'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'V'}}]}}]}},
                              {'condition': {'arguments': [{'name': {'identifier': 'key'}}],
                                             'name': {'identifier': 'containsKey'},
                                             'scope': {'name': {'identifier': 'theMap'}}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'theSet'}},
                                                                           'value': {'arguments': [{'value': '23'}],
                                                                                     'type': {'name': {'identifier': 'HashSet'}}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'key'}},
                                                                                         {'name': {'identifier': 'theSet'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'theMap'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'theSet'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'theMap'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'vals'}}],
                                              'name': {'identifier': 'addAll'},
                                              'scope': {'name': {'identifier': 'theSet'}}}},
                              {'expression': {'name': {'identifier': 'size'},
                                              'scope': {'name': {'identifier': 'theSet'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IRectangle'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queryShape'},
                                                                                                                                                                {'IdentifierName': 'BoundingBox'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_ctx'},
                                                                                                                                                                                                                            {'IdentifierName': 'DistCalc'}]},
                                                                                                                                                                                          {'IdentifierName': 'Distance'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_ctx'},
                                                                                                                                                                                                                                                    {'IdentifierName': 'MakePoint'}]},
                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bbox'},
                                                                                                                                                                                                                                                                                    {'IdentifierName': 'MinX'}]}]},
                                                                                                                                                                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bbox'},
                                                                                                                                                                                                                                                                                    {'IdentifierName': 'MinY'}]}]}]}]}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bbox'},
                                                                                                                                                                                                                          {'IdentifierName': 'MaxX'}]}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bbox'},
                                                                                                                                                                                                                          {'IdentifierName': 'MaxY'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'MultiplyExpression': [{'IdentifierName': 'diagonalDist'},
                                                                                                                                                      {'NumericLiteralExpression': '0.5'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'MultiplyExpression': [{'CastExpression': [{'PredefinedType': 'float'},
                                                                                                                                                                          {'IdentifierName': 'distToEdge'}]},
                                                                                                                                                      {'NumericLiteralExpression': '0.1f'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ReciprocalSingleFunction'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'MakeDistanceValueSource'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queryShape'},
                                                                                                                                                                                                      {'IdentifierName': 'Center'}]}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '1.0'}]}]}]}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '1f'}]},
                                                                                            {'Argument': [{'IdentifierName': 'c'}]},
                                                                                            {'Argument': [{'IdentifierName': 'c'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getBoundingBox'},
                                                                             'scope': {'name': {'identifier': 'queryShape'}}},
                                                             'name': {'identifier': 'bbox'},
                                                             'type': {'name': {'identifier': 'Rectangle'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'arguments': [{'name': {'identifier': 'getMinX'},
                                                                                                           'scope': {'name': {'identifier': 'bbox'}}},
                                                                                                          {'name': {'identifier': 'getMinY'},
                                                                                                           'scope': {'name': {'identifier': 'bbox'}}}],
                                                                                            'name': {'identifier': 'makePoint'},
                                                                                            'scope': {'name': {'identifier': 'ctx'}}},
                                                                                           {'name': {'identifier': 'getMaxX'},
                                                                                            'scope': {'name': {'identifier': 'bbox'}}},
                                                                                           {'name': {'identifier': 'getMaxY'},
                                                                                            'scope': {'name': {'identifier': 'bbox'}}}],
                                                                             'name': {'identifier': 'distance'},
                                                                             'scope': {'name': {'identifier': 'getDistCalc'},
                                                                                       'scope': {'name': {'identifier': 'ctx'}}}},
                                                             'name': {'identifier': 'diagonalDist'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'diagonalDist'}},
                                                                             'operator': 'MULTIPLY',
                                                                             'right': {'value': '0.5'}},
                                                             'name': {'identifier': 'distToEdge'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'expression': {'name': {'identifier': 'distToEdge'}},
                                                                                      'type': {'type': 'FLOAT'}},
                                                                             'operator': 'MULTIPLY',
                                                                             'right': {'value': '0.1f'}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getCenter'},
                                                                                            'scope': {'name': {'identifier': 'queryShape'}}},
                                                                                           {'value': '1.0'}],
                                                                             'name': {'identifier': 'makeDistanceValueSource'}},
                                                             'name': {'identifier': 'distance'},
                                                             'type': {'name': {'identifier': 'DoubleValuesSource'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'c'}},
                                                            {'name': {'identifier': 'distance'}}],
                                              'type': {'name': {'identifier': 'ReciprocalDoubleValuesSource'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Pos'}]},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'pos'},
                                                         'scope': {}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LogicalAndExpression': [{'LessThanExpression': [{'IdentifierName': 'pos'},
                                                                                              {'IdentifierName': 'nextPos'}]},
                                                                      {'GreaterThanOrEqualExpression': [{'IdentifierName': 'pos'},
                                                                                                        {'SubtractExpression': [{'IdentifierName': 'nextPos'},
                                                                                                                                {'IdentifierName': 'count'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'name': {'identifier': 'pos'}},
                                                       'operator': 'LESS',
                                                       'right': {'name': {'identifier': 'nextPos'}}},
                                              'operator': 'AND',
                                              'right': {'left': {'name': {'identifier': 'pos'}},
                                                        'operator': 'GREATER_EQUALS',
                                                        'right': {'left': {'name': {'identifier': 'nextPos'}},
                                                                  'operator': 'MINUS',
                                                                  'right': {'name': {'identifier': 'count'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'len'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'i'},
                                                                                                {'NumericLiteralExpression': '0'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                     {'IdentifierName': 'Append'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "' "
                                                                                                                                                                                                  "'"}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                         {'IdentifierName': 'Append'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Number'},
                                                                                                                                                                                                   {'IdentifierName': 'ToBinaryString'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                                                   {'IdentifierName': 'Value'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'i'}},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'value': ' '}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'b'}}}}]}},
                                                       {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'value'},
                                                                                                     'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                               'name': {'name': {'identifier': 'bytes'}}}}],
                                                                                      'name': {'identifier': 'toBinaryString'},
                                                                                      'scope': {'name': {'identifier': 'Integer'}}}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'b'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'len'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'IsExpression': [{'IdentifierName': 'node'},
                                                                                   {'IdentifierName': 'WildcardQueryNode'}]},
                                                                 {'IsExpression': [{'IdentifierName': 'node'},
                                                                                   {'IdentifierName': 'FuzzyQueryNode'}]}]},
                                        {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'QueryNodeException'},
                                                                                                     {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Message'},
                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'QueryParserMessages'},
                                                                                                                                                                                                                                     {'IdentifierName': 'EMPTY_MESSAGE'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'node'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {'name': {'identifier': 'node'}},
                                                      'type': {'name': {'identifier': 'WildcardQueryNode'}}},
                                             'operator': 'OR',
                                             'right': {'expression': {'name': {'identifier': 'node'}},
                                                       'type': {'name': {'identifier': 'FuzzyQueryNode'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'EMPTY_MESSAGE'},
                                                                                                         'scope': {'name': {'identifier': 'QueryParserMessages'}}}],
                                                                                          'type': {'name': {'identifier': 'MessageImpl'}}}],
                                                                           'type': {'name': {'identifier': 'QueryNodeException'}}}}]}},
                              {'expression': {'name': {'identifier': 'node'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'number'},
                                                                   {'IdentifierName': 'YyLength'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ZzScanError'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ZZ_PUSHBACK_2BIG'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SubtractAssignmentExpression': [{'IdentifierName': 'zzMarkedPos'},
                                                                                  {'IdentifierName': 'number'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'number'}},
                                             'operator': 'GREATER',
                                             'right': {'name': {'identifier': 'yylength'}}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'ZZ_PUSHBACK_2BIG'}}],
                                                           'name': {'identifier': 'zzScanError'}}}},
                              {'expression': {'operator': 'MINUS',
                                              'target': {'name': {'identifier': 'zzMarkedPos'}},
                                              'value': {'name': {'identifier': 'number'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'GeohashUtils'},
                                                                                                                                                                                          {'IdentifierName': 'GetSubGeohashes'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'Geohash'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Cell'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Cell'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'hashes'},
                                                                                                                                                                                                                              {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'hashes'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cells'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'GhCell'},
                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GeohashPrefixTree'},
                                                                                                                                                                                                                             {'IdentifierName': 'm_outerInstance'}]}]},
                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'hash'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'cells'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getGeohash'}}],
                                                                             'name': {'identifier': 'getSubGeohashes'},
                                                                             'scope': {'name': {'identifier': 'GeohashUtils'}}},
                                                             'name': {'identifier': 'hashes'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'length'},
                                                                                            'scope': {'name': {'identifier': 'hashes'}}}],
                                                                             'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'cells'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Cell'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'hash'}}],
                                                                                      'type': {'name': {'identifier': 'GhCell'}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'cells'}}}}]},
                               'iterable': {'name': {'identifier': 'hashes'}},
                               'variable': {'variables': [{'name': {'identifier': 'hash'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'name': {'identifier': 'cells'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'set'},
                                                                                                    {'IdentifierName': 'CompareAndSet'}]},
                                                                  {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                    {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                              {'IdentifierName': 'obj'}]},
                                                                                                            {'IdentifierName': 'obj'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AlreadySetException'},
                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'value': 'false'},
                                                           {'value': 'true'}],
                                             'name': {'identifier': 'compareAndSet'},
                                             'scope': {'name': {'identifier': 'set'}}},
                               'elseStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'AlreadySetException'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'obj'},
                                                                                      'scope': {}},
                                                                           'value': {'name': {'identifier': 'obj'}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'numBits'},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                  {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'bits'}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Bits2words'},
                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'numBits'}]}]}]}]}]}]}]},
                                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'long'},
                                                                                                                                          {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bits'},
                                                                                                                                                                                                                                      {'IdentifierName': 'GetBits'}]},
                                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                                                                   {'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'numWords'},
                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                                        {'IdentifierName': 'Length'}]}]},
                                                                                    {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'arr'},
                                                                                                                                                        {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                                                                                                    {'IdentifierName': 'Grow'}]},
                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'arr'}]},
                                                                                                                                                                                                    {'Argument': [{'AddExpression': [{'IdentifierName': 'numWords'},
                                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                                                                   {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Int64BitSet'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'arr'}]},
                                                                                                                                        {'Argument': [{'LeftShiftExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                                                                                                 {'IdentifierName': 'Length'}]},
                                                                                                                                                                               {'NumericLiteralExpression': '6'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'numBits'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'numBits'},
                                                       'scope': {'name': {'identifier': 'bits'}}}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'numBits'}}],
                                                                                                          'name': {'identifier': 'bits2words'}},
                                                                                          'name': {'identifier': 'numWords'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getBits'},
                                                                                                          'scope': {'name': {'identifier': 'bits'}}},
                                                                                          'name': {'identifier': 'arr'},
                                                                                          'type': {'componentType': {'type': 'LONG'},
                                                                                                   'origin': 'TYPE'}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'numWords'}},
                                                                          'operator': 'GREATER_EQUALS',
                                                                          'right': {'name': {'identifier': 'length'},
                                                                                    'scope': {'name': {'identifier': 'arr'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'arr'}},
                                                                                                        'value': {'arguments': [{'name': {'identifier': 'arr'}},
                                                                                                                                {'left': {'name': {'identifier': 'numWords'}},
                                                                                                                                 'operator': 'PLUS',
                                                                                                                                 'right': {'value': '1'}}],
                                                                                                                  'name': {'identifier': 'grow'},
                                                                                                                  'scope': {'name': {'identifier': 'ArrayUtil'}}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'arr'}},
                                                                                         {'left': {'expression': {'name': {'identifier': 'length'},
                                                                                                                  'scope': {'name': {'identifier': 'arr'}}},
                                                                                                   'type': {'type': 'LONG'}},
                                                                                          'operator': 'LEFT_SHIFT',
                                                                                          'right': {'value': '6'}}],
                                                                           'type': {'name': {'identifier': 'LongBitSet'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'bits'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'notLessThan'},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                     {'ArgumentList': '()'}]},
                                                                                                                           {'IdentifierName': 'Next'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'AMOUNT_OF_CHILD_DOCS'},
                                                                                                                                                 {'IdentifierName': 'notLessThan'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'notLessThan'}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'left': {'name': {'identifier': 'AMOUNT_OF_CHILD_DOCS'}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'name': {'identifier': 'notLessThan'}}}],
                                                        'name': {'identifier': 'nextInt'},
                                                        'scope': {'name': {'identifier': 'random'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'DateTools'},
                                                                                                        {'IdentifierName': 'DateToString'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]},
                                                                                        {'Argument': [{'IdentifierName': 'resolution'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'd'}},
                                                            {'name': {'identifier': 'resolution'}}],
                                              'name': {'identifier': 'dateToString'},
                                              'scope': {'name': {'identifier': 'DateTools'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'char'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'pos'},
                                                                                                                                                                                                                            {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'prev'},
                                                                                                    {'NumericLiteralExpression': '0x30A6'}]},
                                                                  {'LessThanOrEqualExpression': [{'IdentifierName': 'prev'},
                                                                                                 {'NumericLiteralExpression': '0x30FD'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'pos'},
                                                                                                                                                                                                       {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                         {'CastExpression': [{'PredefinedType': 'char'},
                                                                                                                             {'ParenthesizedExpression': [{'ConditionalExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'IdentifierName': 'ch'},
                                                                                                                                                                                                                                        {'NumericLiteralExpression': '0xFF9F'}]}]},
                                                                                                                                                                                     {'ElementAccessExpression': [{'IdentifierName': 'KANA_COMBINE_HALF_VOICED'},
                                                                                                                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'prev'},
                                                                                                                                                                                                                                                                                   {'NumericLiteralExpression': '0x30A6'}]}]}]}]},
                                                                                                                                                                                     {'ElementAccessExpression': [{'IdentifierName': 'KANA_COMBINE_VOICED'},
                                                                                                                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'prev'},
                                                                                                                                                                                                                                                                                   {'NumericLiteralExpression': '0x30A6'}]}]}]}]}]}]}]}]}]},
                                                   {'ReturnStatement': [{'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'pos'},
                                                                                                                                                                                               {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                 {'IdentifierName': 'prev'}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'left': {'name': {'identifier': 'pos'}},
                                                                                       'operator': 'MINUS',
                                                                                       'right': {'value': '1'}},
                                                                             'name': {'name': {'identifier': 'text'}}},
                                                             'name': {'identifier': 'prev'},
                                                             'type': {'type': 'CHAR'}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'prev'}},
                                                      'operator': 'GREATER_EQUALS',
                                                      'right': {'value': '0x30A6'}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'prev'}},
                                                       'operator': 'LESS_EQUALS',
                                                       'right': {'value': '0x30FD'}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'PLUS',
                                                                           'target': {'index': {'left': {'name': {'identifier': 'pos'}},
                                                                                                'operator': 'MINUS',
                                                                                                'right': {'value': '1'}},
                                                                                      'name': {'name': {'identifier': 'text'}}},
                                                                           'value': {'condition': {'inner': {'left': {'name': {'identifier': 'ch'}},
                                                                                                             'operator': 'EQUALS',
                                                                                                             'right': {'value': '0xFF9F'}}},
                                                                                     'elseExpr': {'index': {'left': {'name': {'identifier': 'prev'}},
                                                                                                            'operator': 'MINUS',
                                                                                                            'right': {'value': '0x30A6'}},
                                                                                                  'name': {'name': {'identifier': 'KANA_COMBINE_VOICED'}}},
                                                                                     'thenExpr': {'index': {'left': {'name': {'identifier': 'prev'}},
                                                                                                            'operator': 'MINUS',
                                                                                                            'right': {'value': '0x30A6'}},
                                                                                                  'name': {'name': {'identifier': 'KANA_COMBINE_HALF_VOICED'}}}}}},
                                                           {'expression': {'left': {'index': {'left': {'name': {'identifier': 'pos'}},
                                                                                              'operator': 'MINUS',
                                                                                              'right': {'value': '1'}},
                                                                                    'name': {'name': {'identifier': 'text'}}},
                                                                           'operator': 'NOT_EQUALS',
                                                                           'right': {'name': {'identifier': 'prev'}}}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BasicAutomata'},
                                                                                                        {'IdentifierName': 'MakeString'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}}],
                                              'name': {'identifier': 'makeString'},
                                              'scope': {'name': {'identifier': 'Automata'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenFilter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'HyphenationCompoundWordTokenFilter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'hyphenator'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'IdentifierName': 'filter'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                                           {'name': {'identifier': 'hyphenator'}}],
                                                                             'type': {'name': {'identifier': 'HyphenationCompoundWordTokenFilter'}}},
                                                             'name': {'identifier': 'filter'},
                                                             'type': {'name': {'identifier': 'TokenFilter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'name': {'identifier': 'filter'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'SwedishStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'SwedishStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_SINGLE_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'SINGLE_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'SINGLE_TOKEN_INCREMENTS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'SINGLE_TOKEN_TYPES'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '2'},
                                                            {'name': {'identifier': 'TEST_SINGLE_TOKEN'}},
                                                            {'name': {'identifier': 'SINGLE_TOKEN'}},
                                                            {'name': {'identifier': 'SINGLE_TOKEN_INCREMENTS'}},
                                                            {'name': {'identifier': 'SINGLE_TOKEN_TYPES'}},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'token'}]},
                                                                                {'IdentifierName': 'token'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'token'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'token'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'components'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'components'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'current'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                          {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                                                                                                      {'ArrayRankSpecifier': [{'IdentifierName': 'nextWrite'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Array'},
                                                                                                                                        {'IdentifierName': 'Copy'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'current'}]},
                                                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'lastBuffer'}]},
                                                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'nextWrite'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'blocks'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blocks'},
                                                                                                                                                                                                                                            {'IdentifierName': 'Count'}]},
                                                                                                                                                                                                          {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                            {'IdentifierName': 'lastBuffer'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'current'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'current'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'BYTE'},
                                                                                                          'levels': [{'dimension': {'name': {'identifier': 'nextWrite'}}}]},
                                                                                          'name': {'identifier': 'lastBuffer'},
                                                                                          'type': {'componentType': {'type': 'BYTE'},
                                                                                                   'origin': 'TYPE'}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'current'}},
                                                                                         {'value': '0'},
                                                                                         {'name': {'identifier': 'lastBuffer'}},
                                                                                         {'value': '0'},
                                                                                         {'name': {'identifier': 'nextWrite'}}],
                                                                           'name': {'identifier': 'arraycopy'},
                                                                           'scope': {'name': {'identifier': 'System'}}}},
                                                           {'expression': {'arguments': [{'left': {'name': {'identifier': 'size'},
                                                                                                   'scope': {'name': {'identifier': 'blocks'}}},
                                                                                          'operator': 'MINUS',
                                                                                          'right': {'value': '1'}},
                                                                                         {'name': {'identifier': 'lastBuffer'}}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'blocks'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'current'}},
                                                                           'value': {}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'r_check_vowel_harmony'},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_5'}]},
                                                                                                          {'Argument': [{'NumericLiteralExpression': '2'}]}]}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'r_check_vowel_harmony'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'a_5'}},
                                                                    {'value': '2'}],
                                                      'name': {'identifier': 'find_among_b'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'decoded'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                        {'IdentifierName': 'DecodeMetaData'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'decoded'},
                                                                                                            {'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'decoded'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'decodeMetaData'},
                                                                           'scope': {}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'decoded'}},
                                                                           'value': {'value': 'true'}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ReferenceEquals'},
                                                                  {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                    {'Argument': [{'IdentifierName': 'other'}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ReferenceEquals'},
                                                                  {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                    {'Argument': [{'IdentifierName': 'other'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'string'},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'FileName'}]},
                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                  {'IdentifierName': 'FileName'}]}]}]}]},
                                                                      {'EqualsExpression': [{'IdentifierName': 'Length'},
                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                              {'IdentifierName': 'Length'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'obj'}},
                                                                             'type': {'name': {'identifier': 'RevisionFile'}}},
                                                             'name': {'identifier': 'other'},
                                                             'type': {'name': {'identifier': 'RevisionFile'}}}]}},
                              {'expression': {'left': {'arguments': [{'name': {'identifier': 'fileName'},
                                                                      'scope': {'name': {'identifier': 'other'}}}],
                                                       'name': {'identifier': 'equals'},
                                                       'scope': {'name': {'identifier': 'fileName'}}},
                                              'operator': 'AND',
                                              'right': {'left': {'name': {'identifier': 'size'}},
                                                        'operator': 'EQUALS',
                                                        'right': {'name': {'identifier': 'size'},
                                                                  'scope': {'name': {'identifier': 'other'}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleTextStoredFieldsReader'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'directory'}]},
                                                                                            {'Argument': [{'IdentifierName': 'si'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fn'}]},
                                                                                            {'Argument': [{'IdentifierName': 'context'}]}]}]}]}]},
  'java_ast': {'statements': [{},
                              {'expression': {'arguments': [{'name': {'identifier': 'directory'}},
                                                            {'name': {'identifier': 'si'}},
                                                            {'name': {'identifier': 'fn'}},
                                                            {'name': {'identifier': 'context'}}],
                                              'type': {'name': {'identifier': 'SimpleTextStoredFieldsReader'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'NumericRangeQuery'},
                                                                                                        {'IdentifierName': 'NewDoubleRange'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldName'}]},
                                                                                        {'Argument': [{'IdentifierName': 'precisionStep'}]},
                                                                                        {'Argument': [{'IdentifierName': 'min'}]},
                                                                                        {'Argument': [{'IdentifierName': 'max'}]},
                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'hasPointVals'}},
                               'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'min'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'min'}},
                                                                                                        'value': {'name': {'identifier': 'NEGATIVE_INFINITY'},
                                                                                                                  'scope': {'name': {'identifier': 'Double'}}}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'max'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'max'}},
                                                                                                        'value': {'name': {'identifier': 'POSITIVE_INFINITY'},
                                                                                                                  'scope': {'name': {'identifier': 'Double'}}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'fieldName'}},
                                                                                         {'name': {'identifier': 'min'}},
                                                                                         {'name': {'identifier': 'max'}}],
                                                                           'name': {'identifier': 'newRangeQuery'},
                                                                           'scope': {'name': {'identifier': 'DoublePoint'}}}}]}},
                              {'expression': {'arguments': [{'value': 'An '
                                                                      'index '
                                                                      'is '
                                                                      'required '
                                                                      'for '
                                                                      'this '
                                                                      'operation.'}],
                                              'type': {'name': {'identifier': 'UnsupportedOperationException'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'characterDefinition'},
                                                                                                            {'IdentifierName': 'PutCharacterCategory'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'codePoint'}]},
                                                                                            {'Argument': [{'IdentifierName': 'characterClassName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'codePoint'}},
                                                            {'name': {'identifier': 'characterClassName'}}],
                                              'name': {'identifier': 'putCharacterCategory'},
                                              'scope': {'name': {'identifier': 'characterDefinition'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SpanNearQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'm_clauses'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SpanQuery'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'm_clauses'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'SpanQuery'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'SpanQuery'},
                                                                                                                                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'c'},
                                                                                                                                                                                                                                           {'IdentifierName': 'Rewrite'}]},
                                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'query'},
                                                                                              {'IdentifierName': 'c'}]},
                                                                     {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'clone'},
                                                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                                                 {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'clone'},
                                                                                                                                                                     {'CastExpression': [{'IdentifierName': 'SpanNearQuery'},
                                                                                                                                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                                                                     {'IdentifierName': 'Clone'}]},
                                                                                                                                                                                                                   {'ArgumentList': '()'}]}]}]}]}]}]},
                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clone'},
                                                                                                                                                                                                        {'IdentifierName': 'm_clauses'}]},
                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                         {'IdentifierName': 'query'}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'clone'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': 'false'},
                                                             'name': {'identifier': 'actuallyRewritten'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'rewrittenClauses'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SpanQuery'}}]}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'clauses'}}},
                                                                                      'name': {'identifier': 'c'},
                                                                                      'type': {'name': {'identifier': 'SpanQuery'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                                                                                                     'name': {'identifier': 'rewrite'},
                                                                                                                     'scope': {'name': {'identifier': 'c'}}},
                                                                                                      'type': {'name': {'identifier': 'SpanQuery'}}},
                                                                                      'name': {'identifier': 'query'},
                                                                                      'type': {'name': {'identifier': 'SpanQuery'}}}]}},
                                                       {'expression': {'operator': 'BINARY_OR',
                                                                       'target': {'name': {'identifier': 'actuallyRewritten'}},
                                                                       'value': {'left': {'name': {'identifier': 'query'}},
                                                                                 'operator': 'NOT_EQUALS',
                                                                                 'right': {'name': {'identifier': 'c'}}}}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'query'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'rewrittenClauses'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'clauses'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'condition': {'name': {'identifier': 'actuallyRewritten'}},
                               'thenStmt': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                                                      'type': {'name': {'identifier': 'AssertionError'}}}}]},
                                                                              'parameter': {'isVarArgs': 'false',
                                                                                            'name': {'identifier': 'e'},
                                                                                            'type': {'name': {'identifier': 'CloneNotSupportedException'}}}}],
                                                            'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'clone'}},
                                                                                                                                       'type': {'name': {'identifier': 'SpanNearQuery'}}},
                                                                                                                       'name': {'identifier': 'rewritten'},
                                                                                                                       'type': {'name': {'identifier': 'SpanNearQuery'}}}]}},
                                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                                        'target': {'name': {'identifier': 'clauses'},
                                                                                                                   'scope': {'name': {'identifier': 'rewritten'}}},
                                                                                                        'value': {'name': {'identifier': 'rewrittenClauses'}}}},
                                                                                        {'expression': {'name': {'identifier': 'rewritten'}}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'reader'}}],
                                              'name': {'identifier': 'rewrite'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'output'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                {'ParenthesizedExpression': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'long'},
                                                                                                                                                       {'IdentifierName': 'MaxValue'}]},
                                                                                                                     {'IdentifierName': 'output'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'output'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {}}},
                              {'expression': {'expression': {'inner': {'left': {'name': {'identifier': 'MAX_VALUE'},
                                                                                'scope': {'name': {'identifier': 'Long'}}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'name': {'identifier': 'output'}}}},
                                              'type': {'type': 'INT'}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Writer'},
                                                                                                                                         {'IdentifierName': 'AddDocument'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Document'},
                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Writer'},
                                                                                                                                         {'IdentifierName': 'Commit'}]},
                                                                                                       {'ArgumentList': '()'}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Snapshots'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'FinalI'}]}]}]},
                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Sdp'},
                                                                                                                                                                         {'IdentifierName': 'Snapshot'}]},
                                                                                                                                       {'ArgumentList': '()'}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                         {'IdentifierName': 'Message'}]}]},
                                                                                                                                         {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                         'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'await'},
                                                                           'scope': {'name': {'identifier': 'startingGun'}}}},
                                                           {'expression': {'arguments': [{'type': {'name': {'identifier': 'Document'}}}],
                                                                           'name': {'identifier': 'addDocument'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}},
                                                           {'expression': {'name': {'identifier': 'commit'},
                                                                           'scope': {'name': {'identifier': 'writer'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'index': {'name': {'identifier': 'finalI'}},
                                                                                      'name': {'name': {'identifier': 'snapshots'}}},
                                                                           'value': {'name': {'identifier': 'snapshot'},
                                                                                     'scope': {'name': {'identifier': 'sdp'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'cache'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'docid'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'name': {'identifier': 'docid'}},
                                              'name': {'name': {'identifier': 'cache'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'LessThanExpression': [{'PreIncrementExpression': [{'IdentifierName': 'Doc'}]},
                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'Scores'},
                                                                                                                                 {'IdentifierName': 'Length'}]}]},
                                                                       {'IdentifierName': 'Doc'},
                                                                       {'IdentifierName': 'NO_MORE_DOCS'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'expression': {'name': {'identifier': 'doc'}},
                                                                     'operator': 'PREFIX_INCREMENT'},
                                                            'operator': 'LESS',
                                                            'right': {'name': {'identifier': 'length'},
                                                                      'scope': {'name': {'identifier': 'scores'}}}},
                                              'elseExpr': {'name': {'identifier': 'NO_MORE_DOCS'}},
                                              'thenExpr': {'name': {'identifier': 'doc'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ModifierQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                                                                  {'IdentifierName': 'queryNode'}]}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'Query'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'IdentifierName': 'modifierNode'}]},
                                                                                                                                                                                        {'IdentifierName': 'GetChild'}]},
                                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                                            {'IdentifierName': 'GetTag'}]},
                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'QueryTreeBuilder'},
                                                                                                                                                            {'IdentifierName': 'QUERY_TREE_BUILDER_TAGID'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'queryNode'}},
                                                                             'type': {'name': {'identifier': 'ModifierQueryNode'}}},
                                                             'name': {'identifier': 'modifierNode'},
                                                             'type': {'name': {'identifier': 'ModifierQueryNode'}}}]}},
                              {'expression': {'expression': {'arguments': [{'name': {'identifier': 'QUERY_TREE_BUILDER_TAGID'},
                                                                            'scope': {'name': {'identifier': 'QueryTreeBuilder'}}}],
                                                             'name': {'identifier': 'getTag'},
                                                             'scope': {'name': {'identifier': 'getChild'},
                                                                       'scope': {'inner': {'name': {'identifier': 'modifierNode'}}}}},
                                              'type': {'name': {'identifier': 'Query'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'hitA'},
                                                                                                {'IdentifierName': 'Score'}]},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'hitB'},
                                                                                                {'IdentifierName': 'Score'}]}]},
                                        {'Block': [{'ReturnStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'hitA'},
                                                                                                                                     {'IdentifierName': 'Doc'}]},
                                                                                                   {'SimpleMemberAccessExpression': [{'IdentifierName': 'hitB'},
                                                                                                                                     {'IdentifierName': 'Doc'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'hitA'},
                                                                                                                                                  {'IdentifierName': 'Score'}]},
                                                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'hitB'},
                                                                                                                                                  {'IdentifierName': 'Score'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'score'},
                                                      'scope': {'name': {'identifier': 'hitA'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'score'},
                                                       'scope': {'name': {'identifier': 'hitB'}}}},
                               'elseStmt': {'expression': {'left': {'name': {'identifier': 'score'},
                                                                    'scope': {'name': {'identifier': 'hitA'}}},
                                                           'operator': 'LESS',
                                                           'right': {'name': {'identifier': 'score'},
                                                                     'scope': {'name': {'identifier': 'hitB'}}}}},
                               'thenStmt': {'expression': {'left': {'name': {'identifier': 'doc'},
                                                                    'scope': {'name': {'identifier': 'hitA'}}},
                                                           'operator': 'GREATER',
                                                           'right': {'name': {'identifier': 'doc'},
                                                                     'scope': {'name': {'identifier': 'hitB'}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pp'},
                                                                                                 {'IdentifierName': 'position'}]},
                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'pp'},
                                                                                                 {'IdentifierName': 'offset'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'position'},
                                                       'scope': {'name': {'identifier': 'pp'}}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'offset'},
                                                        'scope': {'name': {'identifier': 'pp'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzer'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzerNoPunct'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '500'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzerNoPunct'}},
                                                            {'left': {'value': '500'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzerNormalNBest'}},
                                                            {'left': {'value': '500'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAttr'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Stem'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                                               {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                        {'IdentifierName': 'newlen'}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAttr'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                                                                     {'name': {'identifier': 'length'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                                                                       'name': {'identifier': 'stem'},
                                                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}},
                                                                                                                       'name': {'identifier': 'newlen'},
                                                                                                                       'type': {'type': 'INT'}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'newlen'}}],
                                                                                                        'name': {'identifier': 'setLength'},
                                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'IdentifierName': 'type'},
                                                                                                                            {'IdentifierName': 'DIGIT'}]}]},
                                                                     {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'name': {'identifier': 'type'}},
                                                                 'operator': 'BINARY_AND',
                                                                 'right': {'name': {'identifier': 'DIGIT'}}}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Eq_S_B'},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                        {'IdentifierName': 'Length'}]}]},
                                                                                        {'Argument': [{'IdentifierName': 's'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 's'}}},
                                                            {'name': {'identifier': 's'}}],
                                              'name': {'identifier': 'eq_s_b'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_input'},
                                                                                                    {'IdentifierName': 'IncrementToken'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'keywordAttr'},
                                                                                                                                {'IdentifierName': 'IsKeyword'}]}]},
                                                                    {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stemmer'},
                                                                                                                                                                                                                                                  {'IdentifierName': 'Stem'}]},
                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Buffer'}]}]},
                                                                                                                                                                                                                                  {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                                                                               {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termAtt'},
                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                        {'IdentifierName': 'newlen'}]}]}]}]},
                                                   {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'incrementToken'},
                                             'scope': {'name': {'identifier': 'input'}}},
                               'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isKeyword'},
                                                                                         'scope': {'name': {'identifier': 'keywordAttr'}}},
                                                                          'operator': 'LOGICAL_COMPLEMENT'},
                                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'buffer'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}},
                                                                                                                                                     {'name': {'identifier': 'length'},
                                                                                                                                                      'scope': {'name': {'identifier': 'termAtt'}}}],
                                                                                                                                       'name': {'identifier': 'stem'},
                                                                                                                                       'scope': {'name': {'identifier': 'stemmer'}}},
                                                                                                                       'name': {'identifier': 'newlen'},
                                                                                                                       'type': {'type': 'INT'}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'newlen'}}],
                                                                                                        'name': {'identifier': 'setLength'},
                                                                                                        'scope': {'name': {'identifier': 'termAtt'}}}}]}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'ms'},
                                                          {'IdentifierName': 'IConcurrentMergeScheduler'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'IConcurrentMergeScheduler'},
                                                                                                                                                                                         {'IdentifierName': 'ms'}]}]},
                                                                                                                                        {'IdentifierName': 'Sync'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'ms'}},
                                             'type': {'name': {'identifier': 'ConcurrentMergeScheduler'}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'sync'},
                                                           'scope': {'inner': {'expression': {'name': {'identifier': 'ms'}},
                                                                               'type': {'name': {'identifier': 'ConcurrentMergeScheduler'}}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FreqProxPostingsArray'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'size'}]},
                                                                                            {'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'termFreqs'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]},
                                                                                            {'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'lastPositions'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]},
                                                                                            {'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'lastOffsets'},
                                                                                                                                   {'NullLiteralExpression': 'null'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'size'}},
                                                            {'left': {'name': {'identifier': 'termFreqs'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}},
                                                            {'left': {'name': {'identifier': 'lastPositions'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}},
                                                            {'left': {'name': {'identifier': 'lastOffsets'}},
                                                             'operator': 'NOT_EQUALS',
                                                             'right': {}}],
                                              'type': {'name': {'identifier': 'FreqProxPostingsArray'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'names'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'primaryExtensions'},
                                                                                                                                     {'IdentifierName': 'Contains'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetExtension'},
                                                                                                                                                             {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'primaryNames'},
                                                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]},
                                                                         {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'secondaryNames'},
                                                                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'primaryDir'},
                                                                                                            {'IdentifierName': 'Sync'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'primaryNames'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'secondaryDir'},
                                                                                                            {'IdentifierName': 'Sync'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'secondaryNames'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'primaryNames'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'secondaryNames'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'condition': {'arguments': [{'arguments': [{'name': {'identifier': 'name'}}],
                                                                     'name': {'identifier': 'getExtension'}}],
                                                      'name': {'identifier': 'contains'},
                                                      'scope': {'name': {'identifier': 'primaryExtensions'}}},
                                        'elseStmt': {'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                    'name': {'identifier': 'add'},
                                                                    'scope': {'name': {'identifier': 'secondaryNames'}}}},
                                        'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                    'name': {'identifier': 'add'},
                                                                    'scope': {'name': {'identifier': 'primaryNames'}}}}},
                               'iterable': {'name': {'identifier': 'names'}},
                               'variable': {'variables': [{'name': {'identifier': 'name'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'primaryNames'}}],
                                              'name': {'identifier': 'sync'},
                                              'scope': {'name': {'identifier': 'primaryDir'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'secondaryNames'}}],
                                              'name': {'identifier': 'sync'},
                                              'scope': {'name': {'identifier': 'secondaryDir'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                        {'IdentifierName': 'Max'}]},
                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                  {'IdentifierName': 'Correct'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentOff'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                            {'arguments': [{'name': {'identifier': 'currentOff'}}],
                                                             'name': {'identifier': 'correct'},
                                                             'scope': {}}],
                                              'name': {'identifier': 'max'},
                                              'scope': {'name': {'identifier': 'Math'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'IdentifierName': 'DeleteNewFiles'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'files'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'files'}}],
                                              'name': {'identifier': 'deleteNewFiles'},
                                              'scope': {'name': {'identifier': 'writer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'PredefinedType': 'string'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                            {'IdentifierName': 'chars'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'chars'},
                                                             'scope': {}}],
                                              'type': {'name': {'identifier': 'String'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'KpStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'KpStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'IterableAnonymousInnerClassHelper3'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'iterable'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                      'body': {'statements': [{'expression': {'anonymousClassBody': [{'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                                                                                                                     'scope': {'name': {'identifier': 'iterable'}}},
                                                                                                                                                     'name': {'identifier': 'in'},
                                                                                                                                                     'type': {'name': {'identifier': 'Iterator'},
                                                                                                                                                              'typeArguments': [{'name': {'identifier': 'Number'}}]}}]},
                                                                                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                      'body': {'statements': [{'expression': {'name': {'identifier': 'hasNext'},
                                                                                                                                                                              'scope': {'name': {'identifier': 'in'}}}}]},
                                                                                                                                      'name': {'identifier': 'hasNext'},
                                                                                                                                      'type': {'type': 'BOOLEAN'}},
                                                                                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                      'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'next'},
                                                                                                                                                                                                             'scope': {'name': {'identifier': 'in'}}},
                                                                                                                                                                                             'name': {'identifier': 'n'},
                                                                                                                                                                                             'type': {'name': {'identifier': 'Number'}}}]}},
                                                                                                                                                              {'expression': {'left': {'name': {'identifier': 'longValue'},
                                                                                                                                                                                       'scope': {'name': {'identifier': 'n'}}},
                                                                                                                                                                              'operator': 'PLUS',
                                                                                                                                                                              'right': {'value': '1'}}}]},
                                                                                                                                      'name': {'identifier': 'next'},
                                                                                                                                      'type': {'name': {'identifier': 'Number'}}},
                                                                                                                                     {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                                                      'body': {'statements': [{'expression': {'type': {'name': {'identifier': 'UnsupportedOperationException'}}}}]},
                                                                                                                                      'name': {'identifier': 'remove'},
                                                                                                                                      'type': {}}],
                                                                                                              'type': {'name': {'identifier': 'Iterator'},
                                                                                                                       'typeArguments': [{'name': {'identifier': 'Number'}}]}}}]},
                                                                      'name': {'identifier': 'iterator'},
                                                                      'type': {'name': {'identifier': 'Iterator'},
                                                                               'typeArguments': [{'name': {'identifier': 'Number'}}]}}],
                                              'type': {'name': {'identifier': 'Iterable'},
                                                       'typeArguments': [{'name': {'identifier': 'Number'}}]}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                {'IdentifierName': 'field'}]},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]},
                                        {'ElseClause': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                           {'IdentifierName': 'field'}]},
                                                                                                                                         {'IdentifierName': 'ToString'}]},
                                                                                                       {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'field'},
                                                      'scope': {}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'expression': {'name': {'identifier': 'toString'},
                                                           'scope': {'name': {'identifier': 'field'},
                                                                     'scope': {}}}},
                               'thenStmt': {'expression': {}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'TryStatement': [{'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'reader'},
                                                                                                                            {'NullLiteralExpression': 'null'}]},
                                                                                                   {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reader'},
                                                                                                                                                                                                                                {'IdentifierName': 'DecRef'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]},
                                                                                                                                {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'reader'},
                                                                                                                                                                                                                       {'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]},
                                                                       {'FinallyClause': [{'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'mergeReader'},
                                                                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                                                                      {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mergeReader'},
                                                                                                                                                                                                                                                   {'IdentifierName': 'DecRef'}]},
                                                                                                                                                                                                                 {'ArgumentList': '()'}]}]}]},
                                                                                                                                                   {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'mergeReader'},
                                                                                                                                                                                                                                          {'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DecRef'},
                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'reader'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'finallyBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                            'target': {'name': {'identifier': 'reader'}},
                                                                                                            'value': {}}}]},
                                                            'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'decRef'},
                                                                                                        'scope': {'name': {'identifier': 'reader'}}}}]}}]}},
                              {'expression': {'name': {'identifier': 'decRef'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                            {'IdentifierName': 'WriteVInt64'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'count'}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'fst'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fst'},
                                                                                                            {'IdentifierName': 'Save'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'output'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                            {'IdentifierName': 'WriteVInt32'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxAnalyzedPathsForOneInput'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                            {'IdentifierName': 'WriteByte'}]},
                                                                          {'ArgumentList': [{'Argument': [{'CastExpression': [{'PredefinedType': 'byte'},
                                                                                                                              {'ParenthesizedExpression': [{'ConditionalExpression': [{'IdentifierName': 'hasPayloads'},
                                                                                                                                                                                      {'NumericLiteralExpression': '1'},
                                                                                                                                                                                      {'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'count'}}],
                                              'name': {'identifier': 'writeVLong'},
                                              'scope': {'name': {'identifier': 'output'}}}},
                              {'condition': {'left': {'name': {'identifier': 'fst'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'output'}}],
                                              'name': {'identifier': 'save'},
                                              'scope': {'name': {'identifier': 'fst'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'maxAnalyzedPathsForOneInput'}}],
                                              'name': {'identifier': 'writeVInt'},
                                              'scope': {'name': {'identifier': 'output'}}}},
                              {'expression': {'arguments': [{'expression': {'inner': {'condition': {'name': {'identifier': 'hasPayloads'}},
                                                                                      'elseExpr': {'value': '0'},
                                                                                      'thenExpr': {'value': '1'}}},
                                                             'type': {'type': 'BYTE'}}],
                                              'name': {'identifier': 'writeByte'},
                                              'scope': {'name': {'identifier': 'output'}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'ValueSource'},
                                             {'IdentifierName': 'm_sources'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'source'},
                                                                                                                                             {'IdentifierName': 'CreateWeight'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'context'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'searcher'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'context'}},
                                                                                     {'name': {'identifier': 'searcher'}}],
                                                                       'name': {'identifier': 'createWeight'},
                                                                       'scope': {'name': {'identifier': 'source'}}}}]},
                               'iterable': {'name': {'identifier': 'sources'}},
                               'variable': {'variables': [{'name': {'identifier': 'source'},
                                                           'type': {'name': {'identifier': 'ValueSource'}}}]}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'files'},
                                             {'Block': [{'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'directory'},
                                                                                                                                                                          {'IdentifierName': 'DeleteFile'}]},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'file'}]}]}]}]}]},
                                                                          {'CatchClause': [{'Block': []}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                     {'name': {'identifier': 'file'}}],
                                                                       'name': {'identifier': 'deleteFilesIgnoringExceptions'},
                                                                       'scope': {'name': {'identifier': 'IOUtils'}}}}]},
                               'iterable': {'name': {'identifier': 'files'}},
                               'variable': {'variables': [{'name': {'identifier': 'file'},
                                                           'type': {'name': {'identifier': 'String'}}}]}}]}},
 {'cs_ast': {'Block': [{'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                      {'NumericLiteralExpression': '0'}]},
                                           {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'bufferPosition'},
                                                                                                         {'IdentifierName': 'bufferLength'}]},
                                                                       {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'currentBufferIndex'}]}]},
                                                                                  {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SwitchCurrentBuffer'},
                                                                                                                                     {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'IdentifierName': 'bufferLength'},
                                                                                                                                                                                     {'IdentifierName': 'bufferPosition'}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ConditionalExpression': [{'LessThanExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                                                                {'IdentifierName': 'remainInBuffer'}]},
                                                                                                                                                                                        {'IdentifierName': 'len'},
                                                                                                                                                                                        {'IdentifierName': 'remainInBuffer'}]}]}]}]}]},
                                                      {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'System'},
                                                                                                                                                                             {'IdentifierName': 'Array'}]},
                                                                                                                                           {'IdentifierName': 'Copy'}]},
                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentBuffer'}]},
                                                                                                                           {'Argument': [{'IdentifierName': 'bufferPosition'}]},
                                                                                                                           {'Argument': [{'IdentifierName': 'b'}]},
                                                                                                                           {'Argument': [{'IdentifierName': 'offset'}]},
                                                                                                                           {'Argument': [{'IdentifierName': 'bytesToCopy'}]}]}]}]},
                                                      {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'offset'},
                                                                                                            {'IdentifierName': 'bytesToCopy'}]}]},
                                                      {'ExpressionStatement': [{'SubtractAssignmentExpression': [{'IdentifierName': 'len'},
                                                                                                                 {'IdentifierName': 'bytesToCopy'}]}]},
                                                      {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'bufferPosition'},
                                                                                                            {'IdentifierName': 'bytesToCopy'}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'bufferPosition'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'bufferLength'}}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'nextBuffer'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'bufferLength'}},
                                                                                                      'operator': 'MINUS',
                                                                                                      'right': {'name': {'identifier': 'bufferPosition'}}},
                                                                                      'name': {'identifier': 'remainInBuffer'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'condition': {'left': {'name': {'identifier': 'len'}},
                                                                                                                    'operator': 'LESS',
                                                                                                                    'right': {'name': {'identifier': 'remainInBuffer'}}},
                                                                                                      'elseExpr': {'name': {'identifier': 'remainInBuffer'}},
                                                                                                      'thenExpr': {'name': {'identifier': 'len'}}},
                                                                                      'name': {'identifier': 'bytesToCopy'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'currentBuffer'}},
                                                                                     {'name': {'identifier': 'bufferPosition'}},
                                                                                     {'name': {'identifier': 'b'}},
                                                                                     {'name': {'identifier': 'offset'}},
                                                                                     {'name': {'identifier': 'bytesToCopy'}}],
                                                                       'name': {'identifier': 'arraycopy'},
                                                                       'scope': {'name': {'identifier': 'System'}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'offset'}},
                                                                       'value': {'name': {'identifier': 'bytesToCopy'}}}},
                                                       {'expression': {'operator': 'MINUS',
                                                                       'target': {'name': {'identifier': 'len'}},
                                                                       'value': {'name': {'identifier': 'bytesToCopy'}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'bufferPosition'}},
                                                                       'value': {'name': {'identifier': 'bytesToCopy'}}}}]},
                               'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'automaton'}]},
                                                                                {'InvocationExpression': [{'IdentifierName': 'BuildAutomaton'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'sorter'}]}]}]}]}]},
                       {'UsingStatement': [{'AsExpression': [{'IdentifierName': 'sorter'},
                                                             {'IdentifierName': 'IDisposable'}]},
                                           {'Block': []}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FSTCompletion'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'automaton'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'automaton'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'sorter'}}],
                                                        'name': {'identifier': 'buildAutomaton'}}}},
                              {'condition': {'expression': {'name': {'identifier': 'sorter'}},
                                             'type': {'name': {'identifier': 'Closeable'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                           'scope': {'inner': {'expression': {'name': {'identifier': 'sorter'}},
                                                                                               'type': {'name': {'identifier': 'Closeable'}}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'automaton'}}],
                                              'type': {'name': {'identifier': 'FSTCompletion'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                      {'IdentifierName': 'floatTestField'}]},
                                                                                                    {'IdentifierName': 'Equals'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StringComparison'},
                                                                                                                                    {'IdentifierName': 'Ordinal'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'FloatEncodingBoostSimilarity'},
                                                                                                      {'ArgumentList': '()'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'IdentifierName': '@delegate'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'field'}}],
                                             'name': {'identifier': 'equals'},
                                             'scope': {'name': {'identifier': 'FLOAT_TEST_FIELD'}}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'delegate'}}}]},
                               'thenStmt': {'statements': [{'expression': {'type': {'name': {'identifier': 'FloatEncodingBoostSimilarity'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '6'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '9'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RunPerformanceTest'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'minPrefixLen'}]},
                                                                                            {'Argument': [{'IdentifierName': 'maxPrefixLen'}]},
                                                                                            {'Argument': [{'IdentifierName': 'num'}]},
                                                                                            {'Argument': [{'IdentifierName': 'onlyMorePopular'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '6'},
                                                             'name': {'identifier': 'minPrefixLen'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '9'},
                                                             'name': {'identifier': 'maxPrefixLen'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'minPrefixLen'}},
                                                            {'name': {'identifier': 'maxPrefixLen'}},
                                                            {'name': {'identifier': 'num'}},
                                                            {'name': {'identifier': 'onlyMorePopular'}}],
                                              'name': {'identifier': 'runPerformanceTest'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'NullableType': [{'PredefinedType': 'int'}]},
                                                                               {'VariableDeclarator': 'prev'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queries'},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'query'}]},
                                                                                            {'Argument': [{'IdentifierName': 'prev'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'queries'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'query'}]}]}]},
                                                                                {'IdentifierName': 'docIDUpto'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'prev'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bytesUsed'},
                                                                                                                                        {'IdentifierName': 'AddAndGet'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'BYTES_PER_DEL_QUERY'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'query'}},
                                                                                           {'name': {'identifier': 'docIDUpto'}}],
                                                                             'name': {'identifier': 'put'},
                                                                             'scope': {'name': {'identifier': 'deleteQueries'}}},
                                                             'name': {'identifier': 'current'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'current'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'BYTES_PER_DEL_QUERY'}}],
                                                                           'name': {'identifier': 'addAndGet'},
                                                                           'scope': {'name': {'identifier': 'bytesUsed'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'UsingStatement': [{'VariableDeclaration': [{'IdentifierName': 'Stream'},
                                                                                                 {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FileStream'},
                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'serialObj'},
                                                                                                                                                                                                                                                {'IdentifierName': 'FullName'}]}]},
                                                                                                                                                                                                {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FileMode'},
                                                                                                                                                                                                                                                {'IdentifierName': 'Open'}]}]},
                                                                                                                                                                                                {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'FileAccess'},
                                                                                                                                                                                                                                                {'IdentifierName': 'Read'}]}]}]}]}]}]}]},
                                                                        {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'LoadFromObjectInputStream'},
                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
                                                    {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                                                                                                   {'IdentifierName': 'ToString'}]},
                                                                                                                                                                                 {'ArgumentList': '()'}]}]},
                                                                                                                                         {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'e'}}],
                                                                                         'type': {'name': {'identifier': 'RuntimeException'}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'serialObj'}}],
                                                                                          'name': {'identifier': 'newInputStream'},
                                                                                          'scope': {'name': {'identifier': 'Files'}}}],
                                                                           'name': {'identifier': 'loadFromObjectInputStream'}}},
                                                           {'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Index'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'SumAssociations'},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'index'}}},
                              {'expression': {'name': {'identifier': 'sumAssociations'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'NumericPayloadTokenFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'payload'}]},
                                                                                            {'Argument': [{'IdentifierName': 'typeMatch'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'payload'}},
                                                            {'name': {'identifier': 'typeMatch'}}],
                                              'type': {'name': {'identifier': 'NumericPayloadTokenFilter'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'o'},
                                                                                                                 {'IdentifierName': 'PhraseQuery'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'PhraseQuery'},
                                                                                                                                                  {'IdentifierName': 'o'}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'ParenthesizedExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                               {'IdentifierName': 'Boost'}]},
                                                                                                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                               {'IdentifierName': 'Boost'}]}]}]},
                                                                                                                          {'ParenthesizedExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                               {'IdentifierName': 'slop'}]},
                                                                                                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                                               {'IdentifierName': 'slop'}]}]}]}]},
                                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                              {'IdentifierName': 'terms'}]},
                                                                                                                                                            {'IdentifierName': 'Equals'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                            {'IdentifierName': 'terms'}]}]}]}]}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                    {'IdentifierName': 'positions'}]},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                  {'IdentifierName': 'positions'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'name': {'identifier': 'other'}}],
                                                       'name': {'identifier': 'sameClassAs'}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'arguments': [{'name': {'identifier': 'other'}}],
                                                                       'name': {'identifier': 'cast'},
                                                                       'scope': {'name': {'identifier': 'getClass'}}}],
                                                        'name': {'identifier': 'equalsTo'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'SnapshotCount'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'CommittedModelClock'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'LastId'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'SyncArr'},
                                                                                {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'object'},
                                                                                                                            {'ArrayRankSpecifier': [{'IdentifierName': 'ndocs'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'ndocs'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Model'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'UnaryMinusExpression': [{'NumericLiteralExpression': '1L'}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'SyncArr'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'ObjectCreationExpression': [{'PredefinedType': 'object'},
                                                                                                                                           {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CommittedModel'},
                                                                                                            {'IdentifierName': 'PutAll'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'Model'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'snapshotCount'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'committedModelClock'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'lastId'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'syncArr'}},
                                              'value': {'elementType': {'name': {'identifier': 'Object'}},
                                                        'levels': [{'dimension': {'name': {'identifier': 'ndocs'}}}]}}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'i'}},
                                                                                     {'expression': {'value': '1L'},
                                                                                      'operator': 'MINUS'}],
                                                                       'name': {'identifier': 'put'},
                                                                       'scope': {'name': {'identifier': 'model'}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'syncArr'}}},
                                                                       'value': {'type': {'name': {'identifier': 'Object'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'ndocs'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'arguments': [{'name': {'identifier': 'model'}}],
                                              'name': {'identifier': 'putAll'},
                                              'scope': {'name': {'identifier': 'committedModel'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Array'},
                                                                                                            {'IdentifierName': 'Copy'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'docs'}]},
                                                                                            {'Argument': [{'IdentifierName': 'i'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tmp'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'len'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'docs'}},
                                                            {'name': {'identifier': 'i'}},
                                                            {'name': {'identifier': 'tmp'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'len'}}],
                                              'name': {'identifier': 'arraycopy'},
                                              'scope': {'name': {'identifier': 'System'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'termsEnum'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                                                           {'VariableDeclarator': 'next'}]}]},
                                                   {'WhileStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'SimpleAssignmentExpression': [{'IdentifierName': 'next'},
                                                                                                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termsEnum'},
                                                                                                                                                                                                                         {'IdentifierName': 'Next'}]},
                                                                                                                                                                                       {'ArgumentList': '()'}]}]}]},
                                                                                                {'NullLiteralExpression': 'null'}]},
                                                                       {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'IsFrequent'},
                                                                                                                             {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'termsEnum'},
                                                                                                                                                                                               {'IdentifierName': 'DocFreq'}]}]}]}]},
                                                                                                   {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'freq'},
                                                                                                                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'termsEnum'},
                                                                                                                                                                                                         {'IdentifierName': 'DocFreq'}]}]}]},
                                                                                                              {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'spare'},
                                                                                                                                                                                                   {'IdentifierName': 'CopyBytes'}]},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'next'}]}]}]}]},
                                                                                                              {'ReturnStatement': [{'IdentifierName': 'spare'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'termsEnum'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'next'},
                                                                                          'type': {'name': {'identifier': 'BytesRef'}}}]}},
                                                           {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'docFreq'},
                                                                                                                  'scope': {'name': {'identifier': 'termsEnum'}}}],
                                                                                                   'name': {'identifier': 'isFrequent'}},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'freq'}},
                                                                                                                                 'value': {'name': {'identifier': 'docFreq'},
                                                                                                                                           'scope': {'name': {'identifier': 'termsEnum'}}}}},
                                                                                                                 {'expression': {'arguments': [{'name': {'identifier': 'next'}}],
                                                                                                                                 'name': {'identifier': 'copyBytes'},
                                                                                                                                 'scope': {'name': {'identifier': 'spare'}}}},
                                                                                                                 {'expression': {'name': {'identifier': 'get'},
                                                                                                                                 'scope': {'name': {'identifier': 'spare'}}}}]}}]},
                                                            'condition': {'left': {'inner': {'operator': 'ASSIGN',
                                                                                             'target': {'name': {'identifier': 'next'}},
                                                                                             'value': {'name': {'identifier': 'next'},
                                                                                                       'scope': {'name': {'identifier': 'termsEnum'}}}}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'map'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                                        {'IdentifierName': 'Name'}]}]}]}]},
                                                                                {'IdentifierName': 'field'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'field'}}},
                                                            {'name': {'identifier': 'field'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'map'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'bytesUsed'},
                                                                                                            {'IdentifierName': 'AddAndGet'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_blockSize'}]}]}]}]},
                       {'ReturnStatement': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                        {'ArrayRankSpecifier': [{'IdentifierName': 'm_blockSize'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'blockSize'}}],
                                              'name': {'identifier': 'addAndGet'},
                                              'scope': {'name': {'identifier': 'bytesUsed'}}}},
                              {'expression': {'elementType': {'type': 'BYTE'},
                                              'levels': [{'dimension': {'name': {'identifier': 'blockSize'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestMultiThreads'},
                                                                          {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': 'false'}],
                                              'name': {'identifier': 'doTestMultiThreads'}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                                                             {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ic'},
                                                                                                                                                                                              {'IdentifierName': 'Generation'}]}]}]}]}]},
                                                     {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                             {'VariableDeclarator': 'refCount'}]}]},
                                                     {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                             {'VariableDeclarator': 'refCountInt'}]}]},
                                                     {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'm_refCounts'},
                                                                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'gen'}]},
                                                                                                                                            {'Argument': [{'IdentifierName': 'refCount'}]}]}]}]},
                                                                      {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'm_indexCommits'},
                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'gen'}]}]}]},
                                                                                                                                          {'IdentifierName': 'm_lastCommit'}]}]},
                                                                                 {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'refCountInt'},
                                                                                                                                          {'NumericLiteralExpression': '0'}]}]}]},
                                                                      {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'refCountInt'},
                                                                                                                                                          {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                              {'IdentifierName': 'refCount'}]}]}]}]}]}]},
                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'm_refCounts'},
                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'gen'}]}]}]},
                                                                                                              {'AddExpression': [{'IdentifierName': 'refCountInt'},
                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getGeneration'},
                                                                             'scope': {'name': {'identifier': 'ic'}}},
                                                             'name': {'identifier': 'gen'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'gen'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'refCounts'}}},
                                                             'name': {'identifier': 'refCount'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'refCountInt'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'refCount'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'refCountInt'}},
                                                                           'value': {'name': {'identifier': 'intValue'},
                                                                                     'scope': {'name': {'identifier': 'refCount'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'gen'}},
                                                                                         {'name': {'identifier': 'lastCommit'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'indexCommits'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'refCountInt'}},
                                                                           'value': {'value': '0'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'gen'}},
                                                            {'left': {'name': {'identifier': 'refCountInt'}},
                                                             'operator': 'PLUS',
                                                             'right': {'value': '1'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'refCounts'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refCount'},
                                                                                                                                                                                          {'IdentifierName': 'IncrementAndGet'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'GreaterThanExpression': [{'IdentifierName': 'rc'},
                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'incrementAndGet'},
                                                                             'scope': {'name': {'identifier': 'refCount'}}},
                                                             'name': {'identifier': 'rc'},
                                                             'type': {'type': 'INT'}}]}},
                              {'check': {'left': {'name': {'identifier': 'rc'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '1'}},
                               'message': {'left': {'value': 'seg='},
                                           'operator': 'PLUS',
                                           'right': {'name': {'identifier': 'info'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'node'},
                                                          {'IdentifierName': 'ModifierQueryNode'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'ModifierQueryNode'},
                                                                                                                                                                                                           {'IdentifierName': 'node'}]}]}]}]}]}]},
                                                   {'SwitchStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'mNode'},
                                                                                                          {'IdentifierName': 'Modifier'}]},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Modifier'},
                                                                                                                                                  {'IdentifierName': 'MOD_REQ'}]}]},
                                                                                           {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Occur'},
                                                                                                                                                  {'IdentifierName': 'MUST'}]}]}]},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Modifier'},
                                                                                                                                                  {'IdentifierName': 'MOD_NOT'}]}]},
                                                                                           {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Occur'},
                                                                                                                                                  {'IdentifierName': 'MUST_NOT'}]}]}]},
                                                                        {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Modifier'},
                                                                                                                                                  {'IdentifierName': 'MOD_NONE'}]}]},
                                                                                           {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Occur'},
                                                                                                                                                  {'IdentifierName': 'SHOULD'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Occur'},
                                                                              {'IdentifierName': 'SHOULD'}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'node'}},
                                             'type': {'name': {'identifier': 'ModifierQueryNode'}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'inner': {'expression': {'name': {'identifier': 'node'}},
                                                                                                                    'type': {'name': {'identifier': 'ModifierQueryNode'}}}},
                                                                                          'name': {'identifier': 'mNode'},
                                                                                          'type': {'name': {'identifier': 'ModifierQueryNode'}}}]}},
                                                           {'entries': [{'label': {'name': {'identifier': 'MOD_REQ'}},
                                                                         'statements': [{'expression': {'name': {'identifier': 'MUST'},
                                                                                                        'scope': {'name': {'identifier': 'Occur'},
                                                                                                                  'scope': {'name': {'identifier': 'BooleanClause'}}}}}]},
                                                                        {'label': {'name': {'identifier': 'MOD_NOT'}},
                                                                         'statements': [{'expression': {'name': {'identifier': 'MUST_NOT'},
                                                                                                        'scope': {'name': {'identifier': 'Occur'},
                                                                                                                  'scope': {'name': {'identifier': 'BooleanClause'}}}}}]},
                                                                        {'label': {'name': {'identifier': 'MOD_NONE'}},
                                                                         'statements': [{'expression': {'name': {'identifier': 'SHOULD'},
                                                                                                        'scope': {'name': {'identifier': 'Occur'},
                                                                                                                  'scope': {'name': {'identifier': 'BooleanClause'}}}}}]}],
                                                            'selector': {'name': {'identifier': 'getModifier'},
                                                                         'scope': {'name': {'identifier': 'mNode'}}}}]}},
                              {'expression': {'name': {'identifier': 'SHOULD'},
                                              'scope': {'name': {'identifier': 'Occur'},
                                                        'scope': {'name': {'identifier': 'BooleanClause'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'values'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]},
                                                                                {'CastExpression': [{'PredefinedType': 'byte'},
                                                                                                    {'ParenthesizedExpression': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'len'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}},
                               'message': {'left': {'left': {'value': 'len '
                                                                      'must be '
                                                                      '> 0 '
                                                                      '(got '},
                                                    'operator': 'PLUS',
                                                    'right': {'name': {'identifier': 'len'}}},
                                           'operator': 'PLUS',
                                           'right': {'value': ')'}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'index'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'index'}},
                                                   'operator': 'LESS',
                                                   'right': {'name': {'identifier': 'valueCount'}}}}},
                              {'check': {'left': {'left': {'name': {'identifier': 'off'}},
                                                  'operator': 'PLUS',
                                                  'right': {'name': {'identifier': 'len'}}},
                                         'operator': 'LESS_EQUALS',
                                         'right': {'name': {'identifier': 'length'},
                                                   'scope': {'name': {'identifier': 'arr'}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'valueCount'}},
                                                                                            'operator': 'MINUS',
                                                                                            'right': {'name': {'identifier': 'index'}}},
                                                                                           {'name': {'identifier': 'len'}}],
                                                                             'name': {'identifier': 'min'},
                                                                             'scope': {'name': {'identifier': 'Math'}}},
                                                             'name': {'identifier': 'sets'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'values'}}},
                                                                       'value': {'expression': {'index': {'name': {'identifier': 'o'}},
                                                                                                'name': {'name': {'identifier': 'arr'}}},
                                                                                 'type': {'type': 'BYTE'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'index'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'name': {'identifier': 'off'}},
                                                                  'name': {'identifier': 'o'},
                                                                  'type': {'type': 'INT'}},
                                                                 {'initializer': {'left': {'name': {'identifier': 'index'}},
                                                                                  'operator': 'PLUS',
                                                                                  'right': {'name': {'identifier': 'sets'}}},
                                                                  'name': {'identifier': 'end'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'},
                                          {'expression': {'name': {'identifier': 'o'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'sets'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'currentBlockUpto'},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                {'IdentifierName': 'blockSize'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'NextBlock'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'byte'},
                                                                {'ElementAccessExpression': [{'IdentifierName': 'currentBlock'},
                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'currentBlockUpto'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'currentBlockUpto'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'blockSize'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'nextBlock'}}}]}},
                              {'expression': {'index': {'expression': {'name': {'identifier': 'currentBlockUpto'}},
                                                        'operator': 'POSTFIX_INCREMENT'},
                                              'name': {'name': {'identifier': 'currentBlock'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'TermsReader'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                    {'IdentifierName': 'index'}]},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'ramBytesUsed'},
                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                        {'IdentifierName': 'index'}]},
                                                                                                                                                                                                      {'IdentifierName': 'GetSizeInBytes'}]},
                                                                                                                                                                    {'ArgumentList': '()'}]}]}]},
                                                                                    {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'ramBytesUsed'},
                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                      {'IdentifierName': 'SizeOf'}]},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                      {'IdentifierName': 'metaBytesBlock'}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'ramBytesUsed'},
                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                      {'IdentifierName': 'SizeOf'}]},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                      {'IdentifierName': 'metaLongsBlock'}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'ramBytesUsed'},
                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                      {'IdentifierName': 'SizeOf'}]},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                      {'IdentifierName': 'skipInfo'}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'ramBytesUsed'},
                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                      {'IdentifierName': 'SizeOf'}]},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                      {'IdentifierName': 'statsBlock'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ramBytesUsed'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'ramBytesUsed'},
                                                                             'scope': {'name': {'identifier': 'postingsReader'}}},
                                                             'name': {'identifier': 'ramBytesUsed'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'ramBytesUsed'}},
                                                                       'value': {'name': {'identifier': 'ramBytesUsed'},
                                                                                 'scope': {'name': {'identifier': 'r'}}}}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'fields'}}},
                               'variable': {'variables': [{'name': {'identifier': 'r'},
                                                           'type': {'name': {'identifier': 'TermsReader'}}}]}},
                              {'expression': {'name': {'identifier': 'ramBytesUsed'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Random'}]},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'Random'},
                                                                                                              {'ArgumentList': [{'Argument': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                  {'IdentifierName': 'Seed'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'random'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'seed'}}],
                                                        'type': {'name': {'identifier': 'Random'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ElisionFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'articles'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'articles'}}],
                                              'type': {'name': {'identifier': 'ElisionFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'BooleanClause'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TermQuery'},
                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Term'},
                                                                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]}]}]},
                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Occur'},
                                                                                                                                                                                                          {'IdentifierName': 'SHOULD'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'arguments': [{'arguments': [{'name': {'identifier': 'name'}},
                                                                                                         {'name': {'identifier': 'value'}}],
                                                                                           'type': {'name': {'identifier': 'Term'}}}],
                                                                            'type': {'name': {'identifier': 'TermQuery'}}},
                                                                           {'name': {'identifier': 'SHOULD'},
                                                                            'scope': {'name': {'identifier': 'Occur'},
                                                                                      'scope': {'name': {'identifier': 'BooleanClause'}}}}],
                                                             'type': {'name': {'identifier': 'BooleanClause'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'q'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ReadingAttribute'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'ReadingAttribute'},
                                                                                                                                                  {'IdentifierName': 'target'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                            {'IdentifierName': 'SetToken'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'token'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'target'}},
                                                                             'type': {'name': {'identifier': 'ReadingAttribute'}}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'ReadingAttribute'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'token'}}],
                                              'name': {'identifier': 'setToken'},
                                              'scope': {'name': {'identifier': 't'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'HunspellStemFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'd'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'KeywordTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                                           {'name': {'identifier': 'd'}}],
                                                             'type': {'name': {'identifier': 'HunspellStemFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'DidClose'},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'IdentifierName': 'doWait'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MainWriter'},
                                                                                                                                        {'IdentifierName': 'WaitForMerges'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MainWriter'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doWait'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'didClose'}},
                                              'value': {'value': 'true'}}},
                              {'condition': {'name': {'identifier': 'doWait'}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'rollback'},
                                                                           'scope': {'name': {'identifier': 'mainWriter'}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                           'scope': {'name': {'identifier': 'mainWriter'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'numIterations'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestBinaryVsStoredFields'},
                                                                                                       {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                         {'Argument': [{'NumericLiteralExpression': '10'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '1'}],
                                              'name': {'identifier': 'doTestBinaryVariableLengthVsStoredFields'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'matchedFieldsTestCase'},
                                                                          {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                            {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fieldValue'}]},
                                                                                            {'Argument': [{'IdentifierName': 'expected'}]},
                                                                                            {'Argument': [{'IdentifierName': 'queryClauses'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Document'}}},
                                                             'name': {'identifier': 'doc'},
                                                             'type': {'name': {'identifier': 'Document'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'TYPE_STORED'},
                                                                                            'scope': {'name': {'identifier': 'TextField'}}}],
                                                                             'type': {'name': {'identifier': 'FieldType'}}},
                                                             'name': {'identifier': 'stored'},
                                                             'type': {'name': {'identifier': 'FieldType'}}}]}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectorOffsets'},
                                              'scope': {'name': {'identifier': 'stored'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectorPositions'},
                                              'scope': {'name': {'identifier': 'stored'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectors'},
                                              'scope': {'name': {'identifier': 'stored'}}}},
                              {'expression': {'name': {'identifier': 'freeze'},
                                              'scope': {'name': {'identifier': 'stored'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'TYPE_NOT_STORED'},
                                                                                            'scope': {'name': {'identifier': 'TextField'}}}],
                                                                             'type': {'name': {'identifier': 'FieldType'}}},
                                                             'name': {'identifier': 'matched'},
                                                             'type': {'name': {'identifier': 'FieldType'}}}]}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectorOffsets'},
                                              'scope': {'name': {'identifier': 'matched'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectorPositions'},
                                              'scope': {'name': {'identifier': 'matched'}}}},
                              {'expression': {'arguments': [{'value': 'true'}],
                                              'name': {'identifier': 'setStoreTermVectors'},
                                              'scope': {'name': {'identifier': 'matched'}}}},
                              {'expression': {'name': {'identifier': 'freeze'},
                                              'scope': {'name': {'identifier': 'matched'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field'},
                                                                           {'name': {'identifier': 'fieldValue'}},
                                                                           {'name': {'identifier': 'stored'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_exact'},
                                                                           {'name': {'identifier': 'fieldValue'}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_super_exact'},
                                                                           {'name': {'identifier': 'fieldValue'}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_characters'},
                                                                           {'name': {'identifier': 'fieldValue'}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_tripples'},
                                                                           {'name': {'identifier': 'fieldValue'}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_sliced'},
                                                                           {'arguments': [{'value': '0'},
                                                                                          {'arguments': [{'left': {'name': {'identifier': 'length'},
                                                                                                                   'scope': {'name': {'identifier': 'fieldValue'}}},
                                                                                                          'operator': 'MINUS',
                                                                                                          'right': {'value': '1'}},
                                                                                                         {'value': '10'}],
                                                                                           'name': {'identifier': 'min'},
                                                                                           'scope': {'name': {'identifier': 'Math'}}}],
                                                                            'name': {'identifier': 'substring'},
                                                                            'scope': {'name': {'identifier': 'fieldValue'}}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'arguments': [{'arguments': [{'value': 'field_der_red'},
                                                                           {'arguments': [{'arguments': [{'value': 'der'},
                                                                                                         {'value': '1'},
                                                                                                         {'value': '0'},
                                                                                                         {'value': '3'}],
                                                                                           'name': {'identifier': 'token'}},
                                                                                          {'arguments': [{'value': 'red'},
                                                                                                         {'value': '0'},
                                                                                                         {'value': '0'},
                                                                                                         {'value': '3'}],
                                                                                           'name': {'identifier': 'token'}}],
                                                                            'type': {'name': {'identifier': 'CannedTokenStream'}}},
                                                                           {'name': {'identifier': 'matched'}}],
                                                             'type': {'name': {'identifier': 'Field'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'doc'}}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'TreeMap'}}},
                                                             'name': {'identifier': 'fieldAnalyzers'},
                                                             'type': {'name': {'identifier': 'Map'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                        {'name': {'identifier': 'Analyzer'}}]}}]}},
                              {'expression': {'arguments': [{'value': 'field'},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'name': {'identifier': 'WHITESPACE'},
                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                           {'value': 'true'},
                                                                           {'name': {'identifier': 'ENGLISH_STOPSET'},
                                                                            'scope': {'name': {'identifier': 'MockTokenFilter'}}}],
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_exact'},
                                                            {'arguments': [{'name': {'identifier': 'random'}}],
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_super_exact'},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'name': {'identifier': 'WHITESPACE'},
                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                           {'value': 'false'}],
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_characters'},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'arguments': [{'name': {'identifier': 'toAutomaton'},
                                                                                           'scope': {'arguments': [{'value': '.'}],
                                                                                                     'type': {'name': {'identifier': 'RegExp'}}}}],
                                                                            'type': {'name': {'identifier': 'CharacterRunAutomaton'}}},
                                                                           {'value': 'true'}],
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_tripples'},
                                                            {'arguments': [{'name': {'identifier': 'random'}},
                                                                           {'arguments': [{'name': {'identifier': 'toAutomaton'},
                                                                                           'scope': {'arguments': [{'value': '...'}],
                                                                                                     'type': {'name': {'identifier': 'RegExp'}}}}],
                                                                            'type': {'name': {'identifier': 'CharacterRunAutomaton'}}},
                                                                           {'value': 'true'}],
                                                             'type': {'name': {'identifier': 'MockAnalyzer'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_sliced'},
                                                            {'arguments': [{'value': 'field'}],
                                                             'name': {'identifier': 'get'},
                                                             'scope': {'name': {'identifier': 'fieldAnalyzers'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'arguments': [{'value': 'field_der_red'},
                                                            {'arguments': [{'value': 'field'}],
                                                             'name': {'identifier': 'get'},
                                                             'scope': {'name': {'identifier': 'fieldAnalyzers'}}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'fieldAnalyzers'}}}},
                              {'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'fieldName'}}],
                                                                                                                                             'name': {'identifier': 'get'},
                                                                                                                                             'scope': {'name': {'identifier': 'fieldAnalyzers'}}}}]},
                                                                                                     'name': {'identifier': 'getWrappedAnalyzer'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'fieldName'},
                                                                                                                     'type': {'name': {'identifier': 'String'}}}],
                                                                                                     'type': {'name': {'identifier': 'Analyzer'}}}],
                                                                             'arguments': [{'name': {'identifier': 'PER_FIELD_REUSE_STRATEGY'},
                                                                                            'scope': {'name': {'identifier': 'Analyzer'}}}],
                                                                             'type': {'name': {'identifier': 'DelegatingAnalyzerWrapper'}}},
                                                             'name': {'identifier': 'analyzer'},
                                                             'type': {'name': {'identifier': 'Analyzer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'newDirectory'}},
                                                             'name': {'identifier': 'dir'},
                                                             'type': {'name': {'identifier': 'Directory'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                           {'arguments': [{'name': {'identifier': 'analyzer'}}],
                                                                                            'name': {'identifier': 'newIndexWriterConfig'}}],
                                                                             'type': {'name': {'identifier': 'IndexWriter'}}},
                                                             'name': {'identifier': 'writer'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'doc'}}],
                                              'name': {'identifier': 'addDocument'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'FastVectorHighlighter'}}},
                                                             'name': {'identifier': 'highlighter'},
                                                             'type': {'name': {'identifier': 'FastVectorHighlighter'}}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'SimpleFragListBuilder'}}},
                                                             'name': {'identifier': 'fragListBuilder'},
                                                             'type': {'name': {'identifier': 'FragListBuilder'}}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ScoreOrderFragmentsBuilder'}}},
                                                             'name': {'identifier': 'fragmentsBuilder'},
                                                             'type': {'name': {'identifier': 'FragmentsBuilder'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'writer'}}],
                                                                             'name': {'identifier': 'open'},
                                                                             'scope': {'name': {'identifier': 'DirectoryReader'}}},
                                                             'name': {'identifier': 'reader'},
                                                             'type': {'name': {'identifier': 'IndexReader'}}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'initializer': {'values': [{'value': '<b>'}]},
                                                                             'levels': [{}]},
                                                             'name': {'identifier': 'preTags'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'initializer': {'values': [{'value': '</b>'}]},
                                                                             'levels': [{}]},
                                                             'name': {'identifier': 'postTags'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'DefaultEncoder'}}},
                                                             'name': {'identifier': 'encoder'},
                                                             'type': {'name': {'identifier': 'Encoder'}}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'docId'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Builder'},
                                                                                      'scope': {'name': {'identifier': 'BooleanQuery'}}}},
                                                             'name': {'identifier': 'query'},
                                                             'type': {'name': {'identifier': 'Builder'},
                                                                      'scope': {'name': {'identifier': 'BooleanQuery'}}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'clause'}},
                                                                                     {'name': {'identifier': 'MUST'},
                                                                                      'scope': {'name': {'identifier': 'Occur'}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'query'}}}}]},
                               'iterable': {'name': {'identifier': 'queryClauses'}},
                               'variable': {'variables': [{'name': {'identifier': 'clause'},
                                                           'type': {'name': {'identifier': 'Query'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'build'},
                                                                                            'scope': {'name': {'identifier': 'query'}}},
                                                                                           {'name': {'identifier': 'reader'}},
                                                                                           {'value': 'true'},
                                                                                           {'name': {'identifier': 'fieldMatch'}}],
                                                                             'type': {'name': {'identifier': 'FieldQuery'}}},
                                                             'name': {'identifier': 'fieldQuery'},
                                                             'type': {'name': {'identifier': 'FieldQuery'}}}]}},
                              {'expression': {'variables': [{'name': {'identifier': 'bestFragments'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'condition': {'name': {'identifier': 'useMatchedFields'}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'bestFragments'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'fieldQuery'}},
                                                                                                   {'name': {'identifier': 'reader'}},
                                                                                                   {'name': {'identifier': 'docId'}},
                                                                                                   {'value': 'field'},
                                                                                                   {'value': '25'},
                                                                                                   {'value': '1'},
                                                                                                   {'name': {'identifier': 'fragListBuilder'}},
                                                                                                   {'name': {'identifier': 'fragmentsBuilder'}},
                                                                                                   {'name': {'identifier': 'preTags'}},
                                                                                                   {'name': {'identifier': 'postTags'}},
                                                                                                   {'name': {'identifier': 'encoder'}}],
                                                                                     'name': {'identifier': 'getBestFragments'},
                                                                                     'scope': {'name': {'identifier': 'highlighter'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashSet'}}},
                                                                                          'name': {'identifier': 'matchedFields'},
                                                                                          'type': {'name': {'identifier': 'Set'},
                                                                                                   'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                                                           {'expression': {'arguments': [{'value': 'field'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_exact'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_super_exact'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_characters'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_tripples'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_sliced'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'arguments': [{'value': 'field_der_red'}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'matchedFields'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'bestFragments'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'fieldQuery'}},
                                                                                                   {'name': {'identifier': 'reader'}},
                                                                                                   {'name': {'identifier': 'docId'}},
                                                                                                   {'value': 'field'},
                                                                                                   {'name': {'identifier': 'matchedFields'}},
                                                                                                   {'value': '25'},
                                                                                                   {'value': '1'},
                                                                                                   {'name': {'identifier': 'fragListBuilder'}},
                                                                                                   {'name': {'identifier': 'fragmentsBuilder'}},
                                                                                                   {'name': {'identifier': 'preTags'}},
                                                                                                   {'name': {'identifier': 'postTags'}},
                                                                                                   {'name': {'identifier': 'encoder'}}],
                                                                                     'name': {'identifier': 'getBestFragments'},
                                                                                     'scope': {'name': {'identifier': 'highlighter'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expected'}},
                                                            {'index': {'value': '0'},
                                                             'name': {'name': {'identifier': 'bestFragments'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'reader'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'writer'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'dir'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'GreaterThanExpression': [{'IdentifierName': 'NumArcs'},
                                                                                                                                     {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'label'},
                                                                                                                                {'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Arcs'},
                                                                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'NumArcs'},
                                                                                                                                                                                                                                                                {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                                                                                  {'IdentifierName': 'Label'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'target'},
                                                                                                                                {'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'Arcs'},
                                                                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'NumArcs'},
                                                                                                                                                                                                                                                                {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                                                                                  {'IdentifierName': 'Target'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'NumArcs'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'numArcs'}},
                                         'operator': 'GREATER',
                                         'right': {'value': '0'}}},
                              {'check': {'left': {'name': {'identifier': 'label'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'label'},
                                                   'scope': {'index': {'left': {'name': {'identifier': 'numArcs'}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'value': '1'}},
                                                             'name': {'name': {'identifier': 'arcs'}}}}}},
                              {'check': {'left': {'name': {'identifier': 'target'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'target'},
                                                   'scope': {'index': {'left': {'name': {'identifier': 'numArcs'}},
                                                                       'operator': 'MINUS',
                                                                       'right': {'value': '1'}},
                                                             'name': {'name': {'identifier': 'arcs'}}}}}},
                              {'expression': {'expression': {'name': {'identifier': 'numArcs'}},
                                              'operator': 'POSTFIX_DECREMENT'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'a'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'a'},
                                                                                                 {'ObjectCreationExpression': [{'IdentifierName': 'MockAnalyzer'},
                                                                                                                               {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                         {'ArgumentList': '()'}]}]},
                                                                                                                                                 {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                 {'IdentifierName': 'SIMPLE'}]}]},
                                                                                                                                                 {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StandardQueryParser'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StandardQueryParser'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'qp'},
                                                                                                                  {'IdentifierName': 'DefaultOperator'}]},
                                                                                {'ParenthesizedExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Operator'},
                                                                                                                                               {'IdentifierName': 'OR'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'qp'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'a'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'a'}},
                                                           'value': {'arguments': [{'name': {'identifier': 'random'}},
                                                                                   {'name': {'identifier': 'SIMPLE'},
                                                                                    'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                   {'value': 'true'}],
                                                                     'type': {'name': {'identifier': 'MockAnalyzer'}}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'a'}}],
                                                                             'type': {'name': {'identifier': 'StandardQueryParser'}}},
                                                             'name': {'identifier': 'qp'},
                                                             'type': {'name': {'identifier': 'StandardQueryParser'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'OR'},
                                                             'scope': {'name': {'identifier': 'Operator'}}}],
                                              'name': {'identifier': 'setDefaultOperator'},
                                              'scope': {'name': {'identifier': 'qp'}}}},
                              {'expression': {'name': {'identifier': 'qp'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recallPoints'},
                                                                                                        {'IdentifierName': 'ToArray'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'elementType': {'name': {'identifier': 'RecallPoint'}},
                                                             'levels': [{'dimension': {'value': '0'}}]}],
                                              'name': {'identifier': 'toArray'},
                                              'scope': {'name': {'identifier': 'recallPoints'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'groupMap'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'characterCategoryMap'},
                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'index': {'name': {'identifier': 'c'}},
                                                        'name': {'name': {'identifier': 'characterCategoryMap'}}},
                                              'name': {'name': {'identifier': 'groupMap'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'PostDecrementExpression': [{'IdentifierName': 'v'}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '1'}]}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '2'}]}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '4'}]}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '8'}]}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '16'}]}]}]},
                       {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'v'},
                                                                            {'RightShiftExpression': [{'IdentifierName': 'v'},
                                                                                                      {'NumericLiteralExpression': '32'}]}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'v'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'v'}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'v'}},
                                              'operator': 'POSTFIX_DECREMENT'}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '1'}}}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '2'}}}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '4'}}}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '8'}}}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '16'}}}},
                              {'expression': {'operator': 'BINARY_OR',
                                              'target': {'name': {'identifier': 'v'}},
                                              'value': {'left': {'name': {'identifier': 'v'}},
                                                        'operator': 'SIGNED_RIGHT_SHIFT',
                                                        'right': {'value': '32'}}}},
                              {'expression': {'expression': {'name': {'identifier': 'v'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'v'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'NewBuffer'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'newBuffer'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'byteBuf'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ByteBuffer'},
                                                                                                                                            {'IdentifierName': 'Wrap'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'newBuffer'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'newBuffer'}}],
                                              'name': {'identifier': 'newBuffer'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'byteBuf'}},
                                              'value': {'arguments': [{'name': {'identifier': 'newBuffer'}}],
                                                        'name': {'identifier': 'wrap'},
                                                        'scope': {'name': {'identifier': 'ByteBuffer'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FilterIteratorAnonymousInnerClassHelper'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                              {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Set'},
                                                                                                                                                                                                                                                        {'IdentifierName': 'GetEnumerator'}]},
                                                                                                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertNoMore'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'it'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'value': 'false'}}]},
                                                                                                     'name': {'identifier': 'predicateFunction'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 's'},
                                                                                                                     'type': {'name': {'identifier': 'String'}}}],
                                                                                                     'type': {'type': 'BOOLEAN'}}],
                                                                             'arguments': [{'name': {'identifier': 'iterator'},
                                                                                            'scope': {'name': {'identifier': 'set'}}}],
                                                                             'type': {'name': {'identifier': 'FilterIterator'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                        {'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'it'},
                                                             'type': {'name': {'identifier': 'Iterator'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'it'}}],
                                              'name': {'identifier': 'assertNoMore'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Term'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'RandomTerm'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'PhraseQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q1'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q1'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'PhraseQuery'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q2'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q2'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'NumericLiteralExpression': '10'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q1'},
                                                                                                                                               {'IdentifierName': 'Slop'}]},
                                                                                                             {'IdentifierName': 'i'}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'q2'},
                                                                                                                                               {'IdentifierName': 'Slop'}]},
                                                                                                             {'AddExpression': [{'IdentifierName': 'i'},
                                                                                                                                {'NumericLiteralExpression': '1'}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AssertSubsetOf'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'q1'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'q2'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'randomTerm'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Term'}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}},
                                                                                                                    {'name': {'identifier': 'field'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}},
                                                                                                                    {'name': {'identifier': 'bytes'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}},
                                                                                                                    {'name': {'identifier': 'bytes'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}}],
                                                                                                      'type': {'name': {'identifier': 'PhraseQuery'}}},
                                                                                      'name': {'identifier': 'q1'},
                                                                                      'type': {'name': {'identifier': 'PhraseQuery'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'PLUS',
                                                                                                                     'right': {'value': '1'}},
                                                                                                                    {'name': {'identifier': 'field'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}},
                                                                                                                    {'name': {'identifier': 'bytes'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}},
                                                                                                                    {'name': {'identifier': 'bytes'},
                                                                                                                     'scope': {'name': {'identifier': 't'}}}],
                                                                                                      'type': {'name': {'identifier': 'PhraseQuery'}}},
                                                                                      'name': {'identifier': 'q2'},
                                                                                      'type': {'name': {'identifier': 'PhraseQuery'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'q1'}},
                                                                                     {'name': {'identifier': 'q2'}}],
                                                                       'name': {'identifier': 'assertSubsetOf'}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'value': '10'}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'withTimeout'},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                        {'IdentifierName': 'DoTestTimeout'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outerInstance'},
                                                                                                                                                        {'IdentifierName': 'DoTestSearch'}]},
                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'LockStatement': [{'IdentifierName': 'success'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'success'},
                                                                                                                                          {'IdentifierName': 'Set'}]},
                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'num'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'withTimeout'}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'doTestSearch'}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'value': 'true'},
                                                                                         {'value': 'true'}],
                                                                           'name': {'identifier': 'doTestTimeout'}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'num'}}],
                                                                       'name': {'identifier': 'set'},
                                                                       'scope': {'name': {'identifier': 'success'}}}}]},
                               'expression': {'name': {'identifier': 'success'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'Scorer'},
                                             {'IdentifierName': 'TqsSet'},
                                             {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'doc'},
                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'scorer'},
                                                                                                                                 {'IdentifierName': 'DocID'}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'freq'},
                                                                                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'scorer'},
                                                                                                                                                                            {'IdentifierName': 'Freq'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'DocCounts'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'doc'},
                                                                                                                                                                         {'IdentifierName': 'DocBase'}]}]}]}]},
                                                                                {'IdentifierName': 'freq'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Collector'},
                                                                                                            {'IdentifierName': 'Collect'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'index': {'value': '0'},
                                                             'name': {'name': {'identifier': 'numHits'}}},
                                              'operator': 'POSTFIX_INCREMENT'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'token'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'token'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BasicOperations'},
                                                                                                        {'IdentifierName': 'Concatenate'}]},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Arrays'},
                                                                                                                                                                  {'IdentifierName': 'AsList'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': '@as'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'as'}}],
                                                             'name': {'identifier': 'asList'},
                                                             'scope': {'name': {'identifier': 'Arrays'}}}],
                                              'name': {'identifier': 'concatenate'},
                                              'scope': {'name': {'identifier': 'Operations'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Input'},
                                                                                                            {'IdentifierName': 'Mark'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'readAheadLimit'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'readAheadLimit'}}],
                                              'name': {'identifier': 'mark'},
                                              'scope': {'name': {'identifier': 'input'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'version'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'BlockTreeTermsWriter'},
                                                                                                            {'IdentifierName': 'VERSION_CHECKSUM'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CodecUtil'},
                                                                                                                                        {'IdentifierName': 'ChecksumEntireFile'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'postingsReader'},
                                                                                                                                        {'IdentifierName': 'CheckIntegrity'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'termsIn'}}],
                                              'name': {'identifier': 'checksumEntireFile'},
                                              'scope': {'name': {'identifier': 'CodecUtil'}}}},
                              {'expression': {'name': {'identifier': 'checkIntegrity'},
                                              'scope': {'name': {'identifier': 'postingsReader'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'among_var'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_ket'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'among_var'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'FindAmongB'},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a_0'}]},
                                                                                                                            {'Argument': [{'NumericLiteralExpression': '23'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'among_var'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'm_bra'},
                                                                                {'IdentifierName': 'm_cursor'}]}]},
                       {'SwitchStatement': [{'IdentifierName': 'among_var'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '0'}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'NumericLiteralExpression': '1'}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SliceDel'},
                                                                                                                  {'ArgumentList': '()'}]}]},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'among_var'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ket'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'among_var'}},
                                              'value': {'arguments': [{'name': {'identifier': 'a_0'}},
                                                                      {'value': '23'}],
                                                        'name': {'identifier': 'find_among_b'}}}},
                              {'condition': {'left': {'name': {'identifier': 'among_var'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bra'}},
                                              'value': {'name': {'identifier': 'cursor'}}}},
                              {'entries': [{'label': {'value': '0'},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'value': '1'},
                                            'statements': [{'expression': {'name': {'identifier': 'slice_del'}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'among_var'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DelimitedPayloadTokenFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'delimiter'}]},
                                                                                            {'Argument': [{'IdentifierName': 'encoder'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'delimiter'}},
                                                            {'name': {'identifier': 'encoder'}}],
                                              'type': {'name': {'identifier': 'DelimitedPayloadTokenFilter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'T'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'top'}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iter'},
                                                                                                    {'IdentifierName': 'MoveNext'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'top'},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'iter'},
                                                                                                                                              {'IdentifierName': 'Current'}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'top'},
                                                                                                                            {'DefaultExpression': [{'IdentifierName': 'T'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'currentTop'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'top'}},
                                                             'name': {'identifier': 'currentTop'},
                                                             'type': {'name': {'identifier': 'T'}}}]}},
                              {'condition': {'name': {'identifier': 'hasNext'},
                                             'scope': {'name': {'identifier': 'iter'}}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'top'}},
                                                                           'value': {}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'top'}},
                                                                           'value': {'name': {'identifier': 'next'},
                                                                                     'scope': {'name': {'identifier': 'iter'}}}}}]}},
                              {'expression': {'name': {'identifier': 'currentTop'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                        {'IdentifierName': 'RamBytesUsed'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'ramBytesUsed'},
                                                                             'scope': {'name': {'identifier': 'in'}}},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'check': {'left': {'name': {'identifier': 'v'}},
                                         'operator': 'GREATER_EQUALS',
                                         'right': {'value': '0'}}},
                              {'expression': {'name': {'identifier': 'v'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'var'},
                                             {'QueryExpression': [{'FromClause': [{'IdentifierName': '_usableBitSetSizes'}]},
                                                                  {'QueryBody': [{'LetClause': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                                                                    {'ParenthesizedExpression': [{'MultiplyExpression': [{'IdentifierName': 't'},
                                                                                                                                                                         {'IdentifierName': 'desiredSaturation'}]}]}]}]},
                                                                                 {'LetClause': [{'InvocationExpression': [{'IdentifierName': 'GetEstimatedNumberUniqueValuesAllowingForCollisions'},
                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]},
                                                                                                                                            {'Argument': [{'IdentifierName': 'numSetBitsAtDesiredSaturation'}]}]}]}]},
                                                                                 {'WhereClause': [{'GreaterThanExpression': [{'IdentifierName': 'estimatedNumUniqueValues'},
                                                                                                                             {'IdentifierName': 'maxNumberOfValuesExpected'}]}]},
                                                                                 {'SelectClause': [{'IdentifierName': 't'}]}]}]},
                                             {'Block': [{'ReturnStatement': [{'IdentifierName': 't'}]}]}]},
                       {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'inner': {'left': {'index': {'name': {'identifier': 'i'}},
                                                                                                                                        'name': {'name': {'identifier': 'usableBitSetSizes'}}},
                                                                                                                               'operator': 'MULTIPLY',
                                                                                                                               'right': {'name': {'identifier': 'desiredSaturation'}}}},
                                                                                                      'type': {'type': 'INT'}},
                                                                                      'name': {'identifier': 'numSetBitsAtDesiredSaturation'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                                                                                     'name': {'name': {'identifier': 'usableBitSetSizes'}}},
                                                                                                                    {'name': {'identifier': 'numSetBitsAtDesiredSaturation'}}],
                                                                                                      'name': {'identifier': 'getEstimatedNumberUniqueValuesAllowingForCollisions'}},
                                                                                      'name': {'identifier': 'estimatedNumUniqueValues'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'estimatedNumUniqueValues'}},
                                                                      'operator': 'GREATER',
                                                                      'right': {'name': {'identifier': 'maxNumberOfValuesExpected'}}},
                                                        'thenStmt': {'statements': [{'expression': {'index': {'name': {'identifier': 'i'}},
                                                                                                    'name': {'name': {'identifier': 'usableBitSetSizes'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'usableBitSetSizes'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'count'},
                                                                                                          {'ElementAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'EqualsExpression': [{'IdentifierName': 'count'},
                                                                  {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'count'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'count'}},
                                                                       'value': {'index': {'name': {'identifier': 'i'}},
                                                                                 'name': {'name': {'identifier': 'buffer'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'buffer'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'left': {'name': {'identifier': 'count'}},
                                              'operator': 'EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'points'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'points'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'char'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'NumericLiteralExpression': '0x10000'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'WhileStatement': [{'LessThanExpression': [{'IdentifierName': 'i'},
                                                                   {'NumericLiteralExpression': '3030'}]},
                                           {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'char'},
                                                                                                              {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'packed'},
                                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                      {'DoStatement': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'map'},
                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'j'}]}]}]}]},
                                                                                                                                {'IdentifierName': 'value'}]}]},
                                                                       {'GreaterThanExpression': [{'PreDecrementExpression': [{'IdentifierName': 'count'}]},
                                                                                                  {'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'map'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'CHAR'},
                                                                             'levels': [{'dimension': {'value': '0x110000'}}]},
                                                             'name': {'identifier': 'map'},
                                                             'type': {'componentType': {'type': 'CHAR'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'j'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'count'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'expression': {'name': {'identifier': 'i'}},
                                                                                                                     'operator': 'POSTFIX_INCREMENT'}],
                                                                                                      'name': {'identifier': 'charAt'},
                                                                                                      'scope': {'name': {'identifier': 'packed'}}},
                                                                                      'name': {'identifier': 'value'},
                                                                                      'type': {'type': 'CHAR'}}]}},
                                                       {'body': {'expression': {'operator': 'ASSIGN',
                                                                                'target': {'index': {'expression': {'name': {'identifier': 'j'}},
                                                                                                     'operator': 'POSTFIX_INCREMENT'},
                                                                                           'name': {'name': {'identifier': 'map'}}},
                                                                                'value': {'name': {'identifier': 'value'}}}},
                                                        'condition': {'left': {'expression': {'name': {'identifier': 'count'}},
                                                                               'operator': 'PREFIX_DECREMENT'},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}}}]},
                               'condition': {'left': {'name': {'identifier': 'i'}},
                                             'operator': 'LESS',
                                             'right': {'value': '3014'}}},
                              {'expression': {'name': {'identifier': 'map'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'make1dmfIndexB'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'biMVValues'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'biMVValues'}}],
                                              'name': {'identifier': 'make1dmfIndexB'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'KeywordTokenizer'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'KeywordTokenizer'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PersianAnalyzer'},
                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'type': {'name': {'identifier': 'PersianAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'DocStatus'},
                                                                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Status'},
                                                                                                                                                                  {'IdentifierName': 'STARTED'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'IdentifierName': 'FieldCount'},
                                                                                                                                {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                            {'IdentifierName': 'FinishDocument'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'DocStatus'},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'Status'},
                                                                                                                  {'IdentifierName': 'FINISHED'}]}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'docStatus'}},
                                         'operator': 'EQUALS',
                                         'right': {'name': {'identifier': 'STARTED'},
                                                   'scope': {'name': {'identifier': 'Status'}}}}},
                              {'expression': {'name': {'identifier': 'finishDocument'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'docStatus'}},
                                              'value': {'name': {'identifier': 'FINISHED'},
                                                        'scope': {'name': {'identifier': 'Status'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'DoFail'}]},
                                                                                {'FalseLiteralExpression': 'false'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'doFail'},
                                                         'scope': {}},
                                              'value': {'value': 'false'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LZ4HighCompressor'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'type': {'name': {'identifier': 'LZ4HighCompressor'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                            {'IdentifierName': 'WriteInt32'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'FOOTER_MAGIC'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                            {'IdentifierName': 'WriteInt32'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                            {'IdentifierName': 'WriteInt64'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@out'},
                                                                                                                                            {'IdentifierName': 'Checksum'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'FOOTER_MAGIC'}}],
                                              'name': {'identifier': 'writeInt'},
                                              'scope': {'name': {'identifier': 'out'}}}},
                              {'expression': {'arguments': [{'value': '0'}],
                                              'name': {'identifier': 'writeInt'},
                                              'scope': {'name': {'identifier': 'out'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'out'}}],
                                              'name': {'identifier': 'writeCRC'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                                                                          {'IdentifierName': 'LookupTerm'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'ord'},
                                                                          {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentOrd'},
                                                                                                            {'IdentifierName': 'ord'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                                                              {'IdentifierName': 'Offset'}]},
                                                                                                            {'NumericLiteralExpression': '0'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                                                              {'IdentifierName': 'Bytes'}]},
                                                                                                            {'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                                                        {'ArrayRankSpecifier': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'text'},
                                                                                                                                                                                                                  {'IdentifierName': 'Length'}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                                                        {'IdentifierName': 'CopyBytes'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'text'}]}]}]}]},
                                                   {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SeekStatus'},
                                                                                                          {'IdentifierName': 'FOUND'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentOrd'},
                                                                                                                            {'SubtractExpression': [{'UnaryMinusExpression': [{'IdentifierName': 'ord'}]},
                                                                                                                                                    {'NumericLiteralExpression': '1'}]}]}]},
                                                                   {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'currentOrd'},
                                                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                            {'IdentifierName': 'ValueCount'}]}]},
                                                                                    {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SeekStatus'},
                                                                                                                                                      {'IdentifierName': 'END'}]}]}]},
                                                                                    {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'values'},
                                                                                                                                                                                                    {'IdentifierName': 'LookupOrd'}]},
                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentOrd'}]},
                                                                                                                                                                                    {'Argument': [{'IdentifierName': 'term'}]}]}]}]},
                                                                                                               {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SeekStatus'},
                                                                                                                                                                      {'IdentifierName': 'NOT_FOUND'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'text'}}],
                                                                             'name': {'identifier': 'lookupTerm'},
                                                                             'scope': {'name': {'identifier': 'values'}}},
                                                             'name': {'identifier': 'ord'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'ord'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'currentOrd'}},
                                                                           'value': {'left': {'expression': {'name': {'identifier': 'ord'}},
                                                                                              'operator': 'MINUS'},
                                                                                     'operator': 'MINUS',
                                                                                     'right': {'value': '1'}}}},
                                                           {'condition': {'left': {'name': {'identifier': 'currentOrd'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'getValueCount'},
                                                                                    'scope': {'name': {'identifier': 'values'}}}},
                                                            'elseStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'currentOrd'}}],
                                                                                                                       'name': {'identifier': 'lookupOrd'},
                                                                                                                       'scope': {'name': {'identifier': 'values'}}}],
                                                                                                        'name': {'identifier': 'copyBytes'},
                                                                                                        'scope': {'name': {'identifier': 'scratch'}}}},
                                                                                        {'expression': {'name': {'identifier': 'NOT_FOUND'},
                                                                                                        'scope': {'name': {'identifier': 'SeekStatus'}}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'END'},
                                                                                                        'scope': {'name': {'identifier': 'SeekStatus'}}}}]}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'currentOrd'}},
                                                                           'value': {'name': {'identifier': 'ord'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'text'}}],
                                                                           'name': {'identifier': 'copyBytes'},
                                                                           'scope': {'name': {'identifier': 'scratch'}}}},
                                                           {'expression': {'name': {'identifier': 'FOUND'},
                                                                           'scope': {'name': {'identifier': 'SeekStatus'}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'valsArr'},
                                                                                                {'IdentifierName': 'Length'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0.0f'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'valsArr'},
                                                                                                                                                                                                                                {'IdentifierName': 'Select'}]},
                                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleLambdaExpression': [{'Parameter': 'vals'},
                                                                                                                                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'vals'},
                                                                                                                                                                                                                                                                                                                      {'IdentifierName': 'SingleVal'}]},
                                                                                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'doc'}]}]}]}]}]}]}]},
                                                                                                                                                                    {'IdentifierName': 'Concat'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ImplicitArrayCreationExpression': [{'ArrayInitializerExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'float'},
                                                                                                                                                                                                                                                                         {'IdentifierName': 'PositiveInfinity'}]}]}]}]}]}]},
                                                                                                        {'IdentifierName': 'Min'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'doc'}},
                                                                          {'name': {'identifier': 'valsArr'}}],
                                                            'name': {'identifier': 'exists'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': '0.0f'}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'POSITIVE_INFINITY'},
                                                                             'scope': {'name': {'identifier': 'Float'}}},
                                                             'name': {'identifier': 'val'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'doc'}}],
                                                                      'name': {'identifier': 'exists'},
                                                                      'scope': {'name': {'identifier': 'vals'}}},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'val'}},
                                                                                                    'value': {'arguments': [{'arguments': [{'name': {'identifier': 'doc'}}],
                                                                                                                             'name': {'identifier': 'floatVal'},
                                                                                                                             'scope': {'name': {'identifier': 'vals'}}},
                                                                                                                            {'name': {'identifier': 'val'}}],
                                                                                                              'name': {'identifier': 'min'},
                                                                                                              'scope': {'name': {'identifier': 'Math'}}}}}]}}]},
                               'iterable': {'name': {'identifier': 'valsArr'}},
                               'variable': {'variables': [{'name': {'identifier': 'vals'},
                                                           'type': {'name': {'identifier': 'FunctionValues'}}}]}},
                              {'expression': {'name': {'identifier': 'val'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'FieldIndexData'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'sizeInBytes'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                          {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'sizeInBytes'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'sizeInBytes'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'sizeInBytes'}},
                                                                       'value': {'name': {'identifier': 'ramBytesUsed'},
                                                                                 'scope': {'name': {'identifier': 'entry'}}}}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'fields'}}},
                               'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                           'type': {'name': {'identifier': 'FieldIndexData'}}}]}},
                              {'expression': {'name': {'identifier': 'sizeInBytes'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                                                                          {'IdentifierName': 'Oversize'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'size'},
                                                                                                                                                                                                           {'NumericLiteralExpression': '1'}]}]},
                                                                                                                                                                          {'Argument': [{'InvocationExpression': [{'IdentifierName': 'BytesPerPosting'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ParallelPostingsArray'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewInstance'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'newSize'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CopyTo'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'newArray'}]},
                                                                                            {'Argument': [{'IdentifierName': 'size'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'newArray'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'size'}},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'value': '1'}},
                                                                                           {'name': {'identifier': 'bytesPerPosting'}}],
                                                                             'name': {'identifier': 'oversize'},
                                                                             'scope': {'name': {'identifier': 'ArrayUtil'}}},
                                                             'name': {'identifier': 'newSize'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'newSize'}}],
                                                                             'name': {'identifier': 'newInstance'}},
                                                             'name': {'identifier': 'newArray'},
                                                             'type': {'name': {'identifier': 'ParallelPostingsArray'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'newArray'}},
                                                            {'name': {'identifier': 'size'}}],
                                              'name': {'identifier': 'copyTo'}}},
                              {'expression': {'name': {'identifier': 'newArray'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'segments'},
                                                                                                        {'IdentifierName': 'IndexOf'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'si'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'si'}}],
                                              'name': {'identifier': 'indexOf'},
                                              'scope': {'name': {'identifier': 'segments'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'HungarianAnalyzer'},
                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                              'scope': {'type': {'name': {'identifier': 'HungarianAnalyzer'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PhraseSlopQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'PhraseSlopQueryNode'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                                              {'IdentifierName': 'CloneTree'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clone'},
                                                                                                                  {'IdentifierName': 'value'}]},
                                                                                {'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'value'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'cloneTree'},
                                                                                            'scope': {}},
                                                                             'type': {'name': {'identifier': 'PhraseSlopQueryNode'}}},
                                                             'name': {'identifier': 'clone'},
                                                             'type': {'name': {'identifier': 'PhraseSlopQueryNode'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'value'},
                                                         'scope': {'name': {'identifier': 'clone'}}},
                                              'value': {'name': {'identifier': 'value'},
                                                        'scope': {}}}},
                              {'expression': {'name': {'identifier': 'clone'}}}]}},
 {'cs_ast': {'Block': [{'ThrowStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                            {'IdentifierName': 'NotSupportedException'}]},
                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'UNSUPPORTED_MSG'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'UNSUPPORTED_MSG'}}],
                                              'type': {'name': {'identifier': 'UnsupportedOperationException'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenOffsetPayloadTokenFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'TokenOffsetPayloadTokenFilter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                          {'IdentifierName': 'AlignObjectSize'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'BaseRamBytesUsed'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'bytesUsed'},
                                                                             {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                         {'IdentifierName': 'AlignObjectSize'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                            {'IdentifierName': 'NUM_BYTES_ARRAY_HEADER'}]},
                                                                                                                                                          {'MultiplyExpression': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                                                        {'IdentifierName': 'NUM_BYTES_OBJECT_REF'}]}]},
                                                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'subMutables'},
                                                                                                                                                                                                                    {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'QualifiedName': [{'IdentifierName': 'PackedInt32s'},
                                                                {'IdentifierName': 'Mutable'}]},
                                             {'IdentifierName': 'subMutables'},
                                             {'Block': [{'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'bytesUsed'},
                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gw'},
                                                                                                                                                                          {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'bytesUsed'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'baseRamBytesUsed'}}],
                                                                             'name': {'identifier': 'alignObjectSize'},
                                                                             'scope': {'name': {'identifier': 'RamUsageEstimator'}}},
                                                             'name': {'identifier': 'bytesUsed'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'operator': 'PLUS',
                                              'target': {'name': {'identifier': 'bytesUsed'}},
                                              'value': {'arguments': [{'arguments': [{'name': {'identifier': 'subMutables'}}],
                                                                       'name': {'identifier': 'shallowSizeOf'},
                                                                       'scope': {'name': {'identifier': 'RamUsageEstimator'}}}],
                                                        'name': {'identifier': 'alignObjectSize'},
                                                        'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}},
                              {'body': {'statements': [{'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'bytesUsed'}},
                                                                       'value': {'name': {'identifier': 'ramBytesUsed'},
                                                                                 'scope': {'name': {'identifier': 'gw'}}}}}]},
                               'iterable': {'name': {'identifier': 'subMutables'}},
                               'variable': {'variables': [{'name': {'identifier': 'gw'},
                                                           'type': {'name': {'identifier': 'Mutable'},
                                                                    'scope': {'name': {'identifier': 'PackedInts'}}}}]}},
                              {'expression': {'name': {'identifier': 'bytesUsed'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'QualifiedName': [{'IdentifierName': 'FunctionQuery'},
                                                                                             {'IdentifierName': 'FunctionWeight'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'searcher'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'searcher'}},
                                                            {'name': {'identifier': 'boost'}}],
                                              'type': {'name': {'identifier': 'FunctionWeight'},
                                                       'scope': {'name': {'identifier': 'FunctionQuery'}}}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'var'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'bundles'},
                                                                               {'IdentifierName': 'Keys'}]},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Type'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'bundles'},
                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ResourceManager'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'resourceManagerFactory'},
                                                                                                                                                                                                                           {'IdentifierName': 'Create'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'clazz'}]}]}]}]}]}]}]},
                                                        {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'resourceBundle'},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'Block': [{'TryStatement': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                                                                         {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'resourceBundle'},
                                                                                                                                                                                                                                                                                    {'IdentifierName': 'GetString'}]},
                                                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'messageKey'}]},
                                                                                                                                                                                                                                                                    {'Argument': [{'IdentifierName': 'locale'}]}]}]}]}]}]}]},
                                                                                                                 {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'obj'},
                                                                                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                                                                                  {'ReturnStatement': [{'IdentifierName': 'obj'}]}]}]},
                                                                                                      {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'MissingManifestResourceException'}]},
                                                                                                                       {'Block': []}]},
                                                                                                      {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'resourceManagerFactory'},
                                                                                                                                                                                                                         {'IdentifierName': 'Release'}]},
                                                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'resourceBundle'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'next'},
                                                                                                                     'scope': {'name': {'identifier': 'it'}}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'bundles'}}},
                                                                                      'name': {'identifier': 'clazz'},
                                                                                      'type': {'name': {'identifier': 'Class'},
                                                                                               'typeArguments': [{'extendedType': {'name': {'identifier': 'NLS'}}}]}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getName'},
                                                                                                                     'scope': {'name': {'identifier': 'clazz'}}},
                                                                                                                    {'name': {'identifier': 'locale'}}],
                                                                                                      'name': {'identifier': 'getBundle'},
                                                                                                      'scope': {'name': {'identifier': 'ResourceBundle'}}},
                                                                                      'name': {'identifier': 'resourceBundle'},
                                                                                      'type': {'name': {'identifier': 'ResourceBundle'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'resourceBundle'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'catchClauses': [{'body': {},
                                                                                                       'parameter': {'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'e'},
                                                                                                                     'type': {'name': {'identifier': 'MissingResourceException'}}}}],
                                                                                     'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'messageKey'}}],
                                                                                                                                                                'name': {'identifier': 'getObject'},
                                                                                                                                                                'scope': {'name': {'identifier': 'resourceBundle'}}},
                                                                                                                                                'name': {'identifier': 'obj'},
                                                                                                                                                'type': {'name': {'identifier': 'Object'}}}]}},
                                                                                                                 {'condition': {'left': {'name': {'identifier': 'obj'}},
                                                                                                                                'operator': 'NOT_EQUALS',
                                                                                                                                'right': {}},
                                                                                                                  'thenStmt': {'expression': {'name': {'identifier': 'obj'}}}}]}}]}}]},
                               'compare': {'name': {'identifier': 'hasNext'},
                                           'scope': {'name': {'identifier': 'it'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'iterator'},
                                                                                  'scope': {'name': {'identifier': 'keySet'},
                                                                                            'scope': {'name': {'identifier': 'bundles'}}}},
                                                                  'name': {'identifier': 'it'},
                                                                  'type': {'name': {'identifier': 'Iterator'},
                                                                           'typeArguments': [{'name': {'identifier': 'String'}}]}}]}]},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'DutchStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'DutchStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                            {'IdentifierName': 'shingleFilterTest'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '2'}]},
                                                                                            {'Argument': [{'IdentifierName': 'TEST_TOKEN'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TOKENS_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'IdentifierName': 'BI_GRAM_TYPES_WITHOUT_UNIGRAMS'}]},
                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'value': '2'},
                                                            {'name': {'identifier': 'TEST_TOKEN'}},
                                                            {'name': {'identifier': 'BI_GRAM_TOKENS_WITHOUT_UNIGRAMS'}},
                                                            {'name': {'identifier': 'BI_GRAM_POSITION_INCREMENTS_WITHOUT_UNIGRAMS'}},
                                                            {'name': {'identifier': 'BI_GRAM_TYPES_WITHOUT_UNIGRAMS'}},
                                                            {'value': 'false'}],
                                              'name': {'identifier': 'shingleFilterTest'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Search'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ctx'}]},
                                                                                            {'Argument': [{'IdentifierName': 'weight'}]},
                                                                                            {'Argument': [{'IdentifierName': 'collector'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ctx'}},
                                                            {'name': {'identifier': 'weight'}},
                                                            {'name': {'identifier': 'collector'}}],
                                              'name': {'identifier': 'search'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'HyperbolicTf'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'freq'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'freq'}}],
                                              'name': {'identifier': 'hyperbolicTf'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'size'},
                                                                {'IdentifierName': 'maxSize'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Add'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'element'}]}]}]}]},
                                                   {'ReturnStatement': [{'DefaultExpression': [{'IdentifierName': 'T'}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'size'},
                                                                                                                              {'NumericLiteralExpression': '0'}]},
                                                                                                   {'LogicalNotExpression': [{'InvocationExpression': [{'IdentifierName': 'LessThan'},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'element'}]},
                                                                                                                                                                         {'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'T'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'heap'},
                                                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]},
                                                                                                                                             {'IdentifierName': 'element'}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'UpdateTop'},
                                                                                                                                       {'ArgumentList': '()'}]}]},
                                                                                    {'ReturnStatement': [{'IdentifierName': 'ret'}]}]},
                                                                         {'ElseClause': [{'Block': [{'ReturnStatement': [{'IdentifierName': 'element'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'maxSize'}}},
                               'elseStmt': {'condition': {'left': {'left': {'name': {'identifier': 'size'}},
                                                                   'operator': 'GREATER',
                                                                   'right': {'value': '0'}},
                                                          'operator': 'AND',
                                                          'right': {'expression': {'arguments': [{'name': {'identifier': 'element'}},
                                                                                                 {'index': {'value': '1'},
                                                                                                  'name': {'name': {'identifier': 'heap'}}}],
                                                                                   'name': {'identifier': 'lessThan'}},
                                                                    'operator': 'LOGICAL_COMPLEMENT'}},
                                            'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'element'}}}]},
                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'value': '1'},
                                                                                                                       'name': {'name': {'identifier': 'heap'}}},
                                                                                                       'name': {'identifier': 'ret'},
                                                                                                       'type': {'name': {'identifier': 'T'}}}]}},
                                                                        {'expression': {'operator': 'ASSIGN',
                                                                                        'target': {'index': {'value': '1'},
                                                                                                   'name': {'name': {'identifier': 'heap'}}},
                                                                                        'value': {'name': {'identifier': 'element'}}}},
                                                                        {'expression': {'name': {'identifier': 'updateTop'}}},
                                                                        {'expression': {'name': {'identifier': 'ret'}}}]}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'element'}}],
                                                                           'name': {'identifier': 'add'}}},
                                                           {'expression': {}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'Current'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'RAMDoc'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'docID'}]},
                                                                                                                                {'Argument': [{'IdentifierName': 'freq'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Term'},
                                                                                                                                              {'IdentifierName': 'Docs'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'Current'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'PosUpto'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'current'}},
                                              'value': {'arguments': [{'name': {'identifier': 'docID'}},
                                                                      {'name': {'identifier': 'freq'}}],
                                                        'type': {'name': {'identifier': 'RAMDoc'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'current'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'docs'},
                                                        'scope': {'name': {'identifier': 'term'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'posUpto'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pending'},
                                                                                                                                                                                                             {'IdentifierName': 'RamBytesUsed'}]},
                                                                                                                                                                           {'ArgumentList': '()'}]},
                                                                                                                                                 {'InvocationExpression': [{'IdentifierName': 'DocsWithFieldBytesUsed'},
                                                                                                                                                                           {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iwBytesUsed'},
                                                                                                            {'IdentifierName': 'AddAndGet'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'IdentifierName': 'newBytesUsed'},
                                                                                                                                  {'IdentifierName': 'bytesUsed'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'bytesUsed'},
                                                                                {'IdentifierName': 'newBytesUsed'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'ramBytesUsed'},
                                                                                      'scope': {'name': {'identifier': 'pending'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'ramBytesUsed'},
                                                                                       'scope': {'name': {'identifier': 'docsWithField'}}}},
                                                             'name': {'identifier': 'newBytesUsed'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'arguments': [{'left': {'name': {'identifier': 'newBytesUsed'}},
                                                             'operator': 'MINUS',
                                                             'right': {'name': {'identifier': 'bytesUsed'}}}],
                                              'name': {'identifier': 'addAndGet'},
                                              'scope': {'name': {'identifier': 'iwBytesUsed'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'bytesUsed'}},
                                              'value': {'name': {'identifier': 'newBytesUsed'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'MappingCharFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'normMap'}]},
                                                                                            {'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'normMap'}},
                                                            {'name': {'identifier': 'reader'}}],
                                              'type': {'name': {'identifier': 'MappingCharFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'hasVectors'},
                                                                                {'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'writer'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                        {'IdentifierName': 'Abort'}]},
                                                                                                      {'ArgumentList': '()'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'writer'},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lastDocID'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Reset'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'hasVectors'}},
                                              'value': {'value': 'false'}}},
                              {'finallyBlock': {'statements': [{'condition': {'left': {'name': {'identifier': 'writer'}},
                                                                              'operator': 'NOT_EQUALS',
                                                                              'right': {}},
                                                                'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'writer'}}],
                                                                                                            'name': {'identifier': 'closeWhileHandlingException'},
                                                                                                            'scope': {'name': {'identifier': 'IOUtils'}}}},
                                                                                            {'expression': {'operator': 'ASSIGN',
                                                                                                            'target': {'name': {'identifier': 'writer'}},
                                                                                                            'value': {}}}]}},
                                                               {'expression': {'operator': 'ASSIGN',
                                                                               'target': {'name': {'identifier': 'lastDocID'}},
                                                                               'value': {'value': '0'}}},
                                                               {'expression': {'name': {'identifier': 'reset'}}}]},
                               'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'abort'},
                                                                           'scope': {}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'TryStatement': [{'Block': [{'ExpressionStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'EdgeNGramTokenizer'},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'TEST_VERSION_CURRENT'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'input'}]},
                                                                                                                             {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                             {'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                   {'IdentifierName': 'ArgumentException'}]}]},
                                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'gotException'},
                                                                                                                              {'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'assertTrue'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'gotException'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'IllegalArgumentException'}}},
                                                            {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                                                                                     'name': {'identifier': 'setReader'},
                                                                                                     'scope': {'arguments': [{'value': '0'},
                                                                                                                             {'value': '0'}],
                                                                                                               'type': {'name': {'identifier': 'EdgeNGramTokenizer'}}}}}]},
                                                             'isEnclosingParameters': 'true'}],
                                              'name': {'identifier': 'expectThrows'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TermsHashConsumer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TermVectorsConsumer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'documentsWriterPerThread'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TermsHashConsumer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'FreqProxTermsWriter'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'InvertedDocConsumer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TermsHash'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'documentsWriterPerThread'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'freqProxWriter'}]},
                                                                                                                                                                              {'Argument': [{'TrueLiteralExpression': 'true'}]},
                                                                                                                                                                              {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TermsHash'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'documentsWriterPerThread'}]},
                                                                                                                                                                                                                                            {'Argument': [{'IdentifierName': 'termVectorsWriter'}]},
                                                                                                                                                                                                                                            {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                                                                                                                                                                            {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'NormsConsumer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'NormsConsumer'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DocInverter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'DocInverter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'documentsWriterPerThread'},
                                                                                                                                                                                                                              {'IdentifierName': 'docState'}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'termsHash'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'normsWriter'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StoredFieldsConsumer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TwoStoredFieldsConsumers'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StoredFieldsProcessor'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'documentsWriterPerThread'}]}]}]}]},
                                                                                                                                                                              {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'DocValuesProcessor'},
                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'documentsWriterPerThread'},
                                                                                                                                                                                                                                                                                            {'IdentifierName': 'bytesUsed'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'DocFieldProcessor'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'documentsWriterPerThread'}]},
                                                                                            {'Argument': [{'IdentifierName': 'docInverter'}]},
                                                                                            {'Argument': [{'IdentifierName': 'storedFields'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'documentsWriterPerThread'}}],
                                              'type': {'name': {'identifier': 'DefaultIndexingChain'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Expression'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'JavascriptCompiler'},
                                                                                                                                                                                          {'IdentifierName': 'Compile'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'expression'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'PredefinedType': 'long'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'evaluator'},
                                                                                                                                                                                                              {'IdentifierName': 'Evaluate'}]},
                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                                                              {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AreEqual'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expected'}]},
                                                                                            {'Argument': [{'IdentifierName': 'actual'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'expression'}}],
                                                                             'name': {'identifier': 'compile'},
                                                                             'scope': {'name': {'identifier': 'JavascriptCompiler'}}},
                                                             'name': {'identifier': 'evaluator'},
                                                             'type': {'name': {'identifier': 'Expression'}}}]}},
                              {'expression': {'variables': [{'initializer': {'expression': {'arguments': [{}],
                                                                                            'name': {'identifier': 'evaluate'},
                                                                                            'scope': {'name': {'identifier': 'evaluator'}}},
                                                                             'type': {'type': 'LONG'}},
                                                             'name': {'identifier': 'actual'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expected'}},
                                                            {'name': {'identifier': 'actual'}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'expected'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CompareNull'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'actual'}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Compare'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'expected'}]}]},
                                                                                                                                                                                                                  {'IdentifierName': 'Utf8ToString'}]},
                                                                                                                                                                                {'ArgumentList': '()'}]}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'actual'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'expected'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'utf8ToString'},
                                                                                          'scope': {'inner': {'expression': {'name': {'identifier': 'expected'}},
                                                                                                              'type': {'name': {'identifier': 'BytesRef'}}}}},
                                                                                         {'name': {'identifier': 'actual'}}],
                                                                           'name': {'identifier': 'compare'}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'actual'}}],
                                                                           'name': {'identifier': 'compareNull'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'children'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'children'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BasicStats'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CreateStats'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'float'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'DivideExpression': [{'ParenthesizedExpression': [{'MultiplyExpression': [{'NumericLiteralExpression': '0.6f'},
                                                                                                                                                                                                         {'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                                                                           {'IdentifierName': 'NumberOfDocuments'}]}]}]},
                                                                                                                                                    {'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                      {'IdentifierName': 'DocFreq'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                  {'IdentifierName': 'TotalTermFreq'}]},
                                                                                {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                    {'ParenthesizedExpression': [{'MultiplyExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                           {'IdentifierName': 'TotalTermFreq'}]},
                                                                                                                                                         {'IdentifierName': 'mult'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                  {'IdentifierName': 'DocFreq'}]},
                                                                                {'CastExpression': [{'PredefinedType': 'int'},
                                                                                                    {'ParenthesizedExpression': [{'MultiplyExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stats'},
                                                                                                                                                                                           {'IdentifierName': 'NumberOfDocuments'}]},
                                                                                                                                                         {'NumericLiteralExpression': '0.6'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'UnitTestCore'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'stats'}]},
                                                                                            {'Argument': [{'IdentifierName': 'FREQ'}]},
                                                                                            {'Argument': [{'IdentifierName': 'DOC_LEN'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'createStats'}},
                                                             'name': {'identifier': 'stats'},
                                                             'type': {'name': {'identifier': 'BasicStats'}}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'inner': {'left': {'value': '0.6f'},
                                                                                                'operator': 'MULTIPLY',
                                                                                                'right': {'name': {'identifier': 'getNumberOfDocuments'},
                                                                                                          'scope': {'name': {'identifier': 'stats'}}}}},
                                                                             'operator': 'DIVIDE',
                                                                             'right': {'name': {'identifier': 'getDocFreq'},
                                                                                       'scope': {'name': {'identifier': 'stats'}}}},
                                                             'name': {'identifier': 'mult'},
                                                             'type': {'type': 'FLOAT'}}]}},
                              {'expression': {'arguments': [{'expression': {'inner': {'left': {'name': {'identifier': 'getTotalTermFreq'},
                                                                                               'scope': {'name': {'identifier': 'stats'}}},
                                                                                      'operator': 'MULTIPLY',
                                                                                      'right': {'name': {'identifier': 'mult'}}}},
                                                             'type': {'type': 'INT'}}],
                                              'name': {'identifier': 'setTotalTermFreq'},
                                              'scope': {'name': {'identifier': 'stats'}}}},
                              {'expression': {'arguments': [{'expression': {'inner': {'left': {'name': {'identifier': 'getNumberOfDocuments'},
                                                                                               'scope': {'name': {'identifier': 'stats'}}},
                                                                                      'operator': 'MULTIPLY',
                                                                                      'right': {'value': '0.6'}}},
                                                             'type': {'type': 'INT'}}],
                                              'name': {'identifier': 'setDocFreq'},
                                              'scope': {'name': {'identifier': 'stats'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stats'}},
                                                            {'name': {'identifier': 'FREQ'}},
                                                            {'name': {'identifier': 'DOC_LEN'}}],
                                              'name': {'identifier': 'unitTestCore'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IsExpression': [{'IdentifierName': 'cqpC'},
                                                                                                                            {'IdentifierName': 'StandardQueryParser'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StandardQueryParser'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'StandardQueryParser'},
                                                                                                                                                  {'IdentifierName': 'cqpC'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'qp'},
                                                                                                                                              {'IdentifierName': 'DateResolutionMap'}]},
                                                                                                            {'IdentifierName': 'Put'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                            {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'check': {'inner': {'expression': {'name': {'identifier': 'cqpC'}},
                                                   'type': {'name': {'identifier': 'StandardQueryParser'}}}}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'cqpC'}},
                                                                             'type': {'name': {'identifier': 'StandardQueryParser'}}},
                                                             'name': {'identifier': 'qp'},
                                                             'type': {'name': {'identifier': 'StandardQueryParser'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'field'}},
                                                            {'name': {'identifier': 'value'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'getDateResolutionMap'},
                                                        'scope': {'name': {'identifier': 'qp'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                         {'BracketedArgumentList': [{'Argument': [{'PostDecrementExpression': [{'IdentifierName': 'pos'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'index': {'expression': {'name': {'identifier': 'pos'}},
                                                        'operator': 'POSTFIX_DECREMENT'},
                                              'name': {'name': {'identifier': 'bytes'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DeletedQueryNode'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'DeletedQueryNode'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                                              {'IdentifierName': 'CloneTree'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'cloneTree'},
                                                                                            'scope': {}},
                                                                             'type': {'name': {'identifier': 'DeletedQueryNode'}}},
                                                             'name': {'identifier': 'clone'},
                                                             'type': {'name': {'identifier': 'DeletedQueryNode'}}}]}},
                              {'expression': {'name': {'identifier': 'clone'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'long'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'format'},
                                                                                                                                                                                          {'IdentifierName': 'ByteCount'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'packedIntsVersion'}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Lucene41PostingsFormat'},
                                                                                                                                                                                                                          {'IdentifierName': 'BLOCK_SIZE'}]}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'bitsPerValue'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'LogicalAndExpression': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'byteCount'},
                                                                                                                                                                      {'NumericLiteralExpression': '0'}]},
                                                                                                                                    {'LessThanOrEqualExpression': [{'IdentifierName': 'byteCount'},
                                                                                                                                                                   {'SimpleMemberAccessExpression': [{'PredefinedType': 'int'},
                                                                                                                                                                                                     {'IdentifierName': 'MaxValue'}]}]}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'byteCount'},
                                                                                                                                                                      {'IdentifierName': 'ToString'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'PredefinedType': 'int'},
                                                                {'IdentifierName': 'byteCount'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'packedIntsVersion'}},
                                                                                           {'name': {'identifier': 'BLOCK_SIZE'}},
                                                                                           {'name': {'identifier': 'bitsPerValue'}}],
                                                                             'name': {'identifier': 'byteCount'},
                                                                             'scope': {'name': {'identifier': 'format'}}},
                                                             'name': {'identifier': 'byteCount'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'check': {'left': {'left': {'name': {'identifier': 'byteCount'}},
                                                  'operator': 'GREATER_EQUALS',
                                                  'right': {'value': '0'}},
                                         'operator': 'AND',
                                         'right': {'left': {'name': {'identifier': 'byteCount'}},
                                                   'operator': 'LESS_EQUALS',
                                                   'right': {'name': {'identifier': 'MAX_VALUE'},
                                                             'scope': {'name': {'identifier': 'Integer'}}}}},
                               'message': {'name': {'identifier': 'byteCount'}}},
                              {'expression': {'expression': {'name': {'identifier': 'byteCount'}},
                                              'type': {'type': 'INT'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                        {'IdentifierName': 'ReadString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'name': {'identifier': 'readString'},
                                              'scope': {'name': {'identifier': 'delegate'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PorterStemFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'PorterStemFilter'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NextInt'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'minLength'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'maxLength'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                          {'IdentifierName': 'Next'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'BlockStarts'},
                                                                                                                                                                                                                          {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'end'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                                                         {'IdentifierName': 'AppendCodePoint'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'NextInt'},
                                                                                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]},
                                                                                                                                                                                   {'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'BlockStarts'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'block'}]}]}]}]},
                                                                                                                                                                                   {'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'BlockEnds'},
                                                                                                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'block'}]}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sb'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'r'}},
                                                                                           {'name': {'identifier': 'minLength'}},
                                                                                           {'name': {'identifier': 'maxLength'}}],
                                                                             'name': {'identifier': 'nextInt'}},
                                                             'name': {'identifier': 'end'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'length'},
                                                                                            'scope': {'name': {'identifier': 'blockStarts'}}}],
                                                                             'name': {'identifier': 'nextInt'},
                                                                             'scope': {'name': {'identifier': 'r'}}},
                                                             'name': {'identifier': 'block'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'sb'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'r'}},
                                                                                    {'index': {'name': {'identifier': 'block'}},
                                                                                     'name': {'name': {'identifier': 'blockStarts'}}},
                                                                                    {'index': {'name': {'identifier': 'block'}},
                                                                                     'name': {'name': {'identifier': 'blockEnds'}}}],
                                                                      'name': {'identifier': 'nextInt'}}],
                                                       'name': {'identifier': 'appendCodePoint'},
                                                       'scope': {'name': {'identifier': 'sb'}}}},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'end'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'sb'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'other'},
                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                 {'IsExpression': [{'IdentifierName': 'other'},
                                                                                   {'IdentifierName': 'AssertingBulkScorer'}]}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'other'}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AssertingBulkScorer'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                            {'Argument': [{'IdentifierName': 'other'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'other'}},
                                                      'operator': 'EQUALS',
                                                      'right': {}},
                                             'operator': 'OR',
                                             'right': {'expression': {'name': {'identifier': 'other'}},
                                                       'type': {'name': {'identifier': 'AssertingBulkScorer'}}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'other'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'other'}},
                                                            {'name': {'identifier': 'maxDoc'}},
                                                            {'name': {'identifier': 'scoreMode'}}],
                                              'type': {'name': {'identifier': 'AssertingBulkScorer'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'QueryPhraseMap'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetRootMap'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldName'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'rootMap'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'QueryPhraseMap'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rootMap'},
                                                                                                                                              {'IdentifierName': 'subMap'}]},
                                                                                                            {'IdentifierName': 'TryGetValue'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]},
                                                                                            {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'fieldName'}}],
                                                                             'name': {'identifier': 'getRootMap'}},
                                                             'name': {'identifier': 'rootMap'},
                                                             'type': {'name': {'identifier': 'QueryPhraseMap'}}}]}},
                              {'expression': {'condition': {'left': {'name': {'identifier': 'rootMap'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'arguments': [{'name': {'identifier': 'term'}}],
                                                           'name': {'identifier': 'get'},
                                                           'scope': {'name': {'identifier': 'subMap'},
                                                                     'scope': {'name': {'identifier': 'rootMap'}}}},
                                              'thenExpr': {}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ints'},
                                                                                                   {'IdentifierName': 'Length'}]},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'longs'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'ints'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'ElementAccessExpression': [{'IdentifierName': 'ints'},
                                                                                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                     {'NumericLiteralExpression': '0xFFFFFFFFL'}]}]},
                                                                                              {'ElementAccessExpression': [{'IdentifierName': 'longs'},
                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]},
                                                                     {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                      'scope': {'name': {'identifier': 'ints'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'longs'}}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'inner': {'left': {'index': {'name': {'identifier': 'i'}},
                                                                                                  'name': {'name': {'identifier': 'ints'}}},
                                                                                         'operator': 'BINARY_AND',
                                                                                         'right': {'value': '0xFFFFFFFFL'}}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {'index': {'name': {'identifier': 'i'}},
                                                                                'name': {'name': {'identifier': 'longs'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'ints'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'FieldIndexData'},
                                                                               {'VariableDeclarator': 'fieldData'}]}]},
                       {'IfStatement': [{'LogicalOrExpression': [{'LogicalOrExpression': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                                                                {'IdentifierName': 'TryGetValue'}]},
                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'fieldInfo'}]},
                                                                                                                                                                {'Argument': [{'IdentifierName': 'fieldData'}]}]}]}]},
                                                                                          {'EqualsExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                {'NullLiteralExpression': 'null'}]}]},
                                                                 {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                         {'IdentifierName': 'coreIndex'}]},
                                                                                       {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'IndexEnum'},
                                                                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldData'},
                                                                                                                                                                                        {'IdentifierName': 'coreIndex'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'name'},
                                                                            'scope': {'name': {'identifier': 'fieldInfo'}}}],
                                                             'name': {'identifier': 'get'},
                                                             'scope': {'name': {'identifier': 'fields'}}}],
                                              'type': {'name': {'identifier': 'IndexEnum'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'DataInput'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'InputStreamDataInput'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]}]}]},
                       {'TryStatement': [{'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Load'},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'dataIn'}]}]}]}]}]},
                                         {'FinallyClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IOUtils'},
                                                                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'input'}}],
                                                                             'type': {'name': {'identifier': 'InputStreamDataInput'}}},
                                                             'name': {'identifier': 'dataIn'},
                                                             'type': {'name': {'identifier': 'DataInput'}}}]}},
                              {'finallyBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                                                               'name': {'identifier': 'close'},
                                                                               'scope': {'name': {'identifier': 'IOUtils'}}}}]},
                               'tryBlock': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'dataIn'}}],
                                                                           'name': {'identifier': 'load'}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DoTestSearch'},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'doTestSearch'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'IdentifierName': 'FieldInfo'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clazz'},
                                                                                                                                                                                          {'IdentifierName': 'GetFields'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'fieldArray'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                      {'IdentifierName': 'FieldInfo'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                                   {'IdentifierName': 'FieldInfo'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'MultiplyExpression': [{'IdentifierName': 'len'},
                                                                                                                                                                                                                    {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'len'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'fields'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'fieldArray'},
                                                                                                                                                                                                                                                  {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                                     {'IdentifierName': 'Name'}]}]}]}]},
                                                                                                             {'ElementAccessExpression': [{'IdentifierName': 'fieldArray'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'LoadFieldValue'},
                                                                                                       {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'fieldArray'},
                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'clazz'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getDeclaredFields'},
                                                                             'scope': {'name': {'identifier': 'clazz'}}},
                                                             'name': {'identifier': 'fieldArray'},
                                                             'type': {'componentType': {'name': {'identifier': 'Field'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'fieldArray'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'len'}},
                                                                                            'operator': 'MULTIPLY',
                                                                                            'right': {'value': '2'}}],
                                                                             'type': {'name': {'identifier': 'HashMap'}}},
                                                             'name': {'identifier': 'fields'},
                                                             'type': {'name': {'identifier': 'Map'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                        {'name': {'identifier': 'Field'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getName'},
                                                                                      'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                'name': {'name': {'identifier': 'fieldArray'}}}},
                                                                                     {'index': {'name': {'identifier': 'i'}},
                                                                                      'name': {'name': {'identifier': 'fieldArray'}}}],
                                                                       'name': {'identifier': 'put'},
                                                                       'scope': {'name': {'identifier': 'fields'}}}},
                                                       {'expression': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                                                      'name': {'name': {'identifier': 'fieldArray'}}},
                                                                                     {'name': {'identifier': 'clazz'}}],
                                                                       'name': {'identifier': 'loadfieldValue'}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'len'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckRandomData'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'analyzer'}]},
                                                                                            {'Argument': [{'MultiplyExpression': [{'NumericLiteralExpression': '1000'},
                                                                                                                                  {'IdentifierName': 'RANDOM_MULTIPLIER'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'random'}},
                                                            {'name': {'identifier': 'analyzer'}},
                                                            {'left': {'value': '1000'},
                                                             'operator': 'MULTIPLY',
                                                             'right': {'name': {'identifier': 'RANDOM_MULTIPLIER'}}}],
                                              'name': {'identifier': 'checkRandomData'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'MultiplyExpression': [{'IdentifierName': '_arraySize'},
                                                                                                                                                                                                                          {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Array'},
                                                                                                            {'IdentifierName': 'Copy'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '_array'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': 'newArray'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'IdentifierName': '_arraySize'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': '_array'},
                                                                                {'IdentifierName': 'newArray'}]}]},
                       {'ExpressionStatement': [{'MultiplyAssignmentExpression': [{'IdentifierName': '_arraySize'},
                                                                                  {'NumericLiteralExpression': '2'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'INT'},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'arraySize'}},
                                                                                                       'operator': 'MULTIPLY',
                                                                                                       'right': {'value': '2'}}}]},
                                                             'name': {'identifier': 'newArray'},
                                                             'type': {'componentType': {'type': 'INT'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'array'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'newArray'}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'arraySize'}}],
                                              'name': {'identifier': 'arraycopy'},
                                              'scope': {'name': {'identifier': 'System'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'array'}},
                                              'value': {'name': {'identifier': 'newArray'}}}},
                              {'expression': {'operator': 'MULTIPLY',
                                              'target': {'name': {'identifier': 'arraySize'}},
                                              'value': {'value': '2'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'b'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0.0f'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'BitwiseAndExpression': [{'IdentifierName': 'b'},
                                                                                                                                                        {'NumericLiteralExpression': '7'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'BitwiseAndExpression': [{'ParenthesizedExpression': [{'RightShiftExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                               {'NumericLiteralExpression': '3'}]}]},
                                                                                                                                                        {'NumericLiteralExpression': '31'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'BitwiseOrExpression': [{'ParenthesizedExpression': [{'LeftShiftExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'IdentifierName': 'exponent'},
                                                                                                                                                                                                                                                             {'ParenthesizedExpression': [{'SubtractExpression': [{'NumericLiteralExpression': '63'},
                                                                                                                                                                                                                                                                                                                  {'NumericLiteralExpression': '15'}]}]}]}]},
                                                                                                                                                                                                             {'NumericLiteralExpression': '24'}]}]},
                                                                                                                                                       {'ParenthesizedExpression': [{'LeftShiftExpression': [{'IdentifierName': 'mantissa'},
                                                                                                                                                                                                             {'NumericLiteralExpression': '21'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Number'},
                                                                                                        {'IdentifierName': 'Int32BitsToSingle'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'bits'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'b'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'expression': {'value': '0.0f'}}},
                              {'expression': {'variables': [{'initializer': {'left': {'name': {'identifier': 'b'}},
                                                                             'operator': 'BINARY_AND',
                                                                             'right': {'value': '7'}},
                                                             'name': {'identifier': 'mantissa'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'inner': {'left': {'name': {'identifier': 'b'}},
                                                                                                'operator': 'SIGNED_RIGHT_SHIFT',
                                                                                                'right': {'value': '3'}}},
                                                                             'operator': 'BINARY_AND',
                                                                             'right': {'value': '31'}},
                                                             'name': {'identifier': 'exponent'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'left': {'inner': {'left': {'inner': {'left': {'name': {'identifier': 'exponent'}},
                                                                                                                   'operator': 'PLUS',
                                                                                                                   'right': {'inner': {'left': {'value': '63'},
                                                                                                                                       'operator': 'MINUS',
                                                                                                                                       'right': {'value': '15'}}}}},
                                                                                                'operator': 'LEFT_SHIFT',
                                                                                                'right': {'value': '24'}}},
                                                                             'operator': 'BINARY_OR',
                                                                             'right': {'inner': {'left': {'name': {'identifier': 'mantissa'}},
                                                                                                 'operator': 'LEFT_SHIFT',
                                                                                                 'right': {'value': '21'}}}},
                                                             'name': {'identifier': 'bits'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'bits'}}],
                                              'name': {'identifier': 'intBitsToFloat'},
                                              'scope': {'name': {'identifier': 'Float'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'BeforeClass'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'NUM_TEST_ITER'},
                                                                                {'InvocationExpression': [{'IdentifierName': 'AtLeast'},
                                                                                                          {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '20'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'NUM_TEST_ITER'}},
                                              'value': {'arguments': [{'value': '20'}],
                                                        'name': {'identifier': 'atLeast'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buffer'},
                                                                                                                                                                                        {'IdentifierName': 'GetInt16'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'wordId'}]}]}]},
                                                                                                                            {'IdentifierName': 'HAS_BASEFORM'}]}]},
                                                                     {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'arguments': [{'name': {'identifier': 'wordId'}}],
                                                                          'name': {'identifier': 'getShort'},
                                                                          'scope': {'name': {'identifier': 'buffer'}}},
                                                                 'operator': 'BINARY_AND',
                                                                 'right': {'name': {'identifier': 'HAS_BASEFORM'}}}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                {'IdentifierName': 'Boost'}]},
                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                {'IdentifierName': 'Boost'}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TermComp'},
                                                                                                                                    {'IdentifierName': 'Compare'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                    {'IdentifierName': 'Bytes'}]}]},
                                                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                    {'IdentifierName': 'Bytes'}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                      {'IdentifierName': 'Boost'}]},
                                                                                                                                                    {'IdentifierName': 'CompareTo'}]},
                                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                                    {'IdentifierName': 'Boost'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'boost'},
                                                      'scope': {}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'boost'},
                                                       'scope': {'name': {'identifier': 'other'}}}},
                               'elseStmt': {'expression': {'arguments': [{'name': {'identifier': 'boost'},
                                                                          'scope': {}},
                                                                         {'name': {'identifier': 'boost'},
                                                                          'scope': {'name': {'identifier': 'other'}}}],
                                                           'name': {'identifier': 'compare'},
                                                           'scope': {'name': {'identifier': 'Float'}}}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'get'},
                                                                          'scope': {'name': {'identifier': 'bytes'},
                                                                                    'scope': {}}}],
                                                           'name': {'identifier': 'compareTo'},
                                                           'scope': {'name': {'identifier': 'get'},
                                                                     'scope': {'name': {'identifier': 'bytes'},
                                                                               'scope': {'name': {'identifier': 'other'}}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'SplitFileNames'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'stopTypesFiles'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'files'},
                                                                                                                               {'IdentifierName': 'Count'}]},
                                                                                             {'ArgumentList': '()'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'stopTypes'},
                                                                                                            {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                          {'ArgumentList': '()'}]}]}]},
                                                   {'ForEachStatement': [{'PredefinedType': 'string'},
                                                                         {'IdentifierName': 'files'},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetLines'},
                                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'loader'}]},
                                                                                                                                                                                                                                       {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'file'},
                                                                                                                                                                                                                                                                                                                 {'IdentifierName': 'Trim'}]},
                                                                                                                                                                                                                                                                               {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stopTypes'},
                                                                                                                                                                         {'IdentifierName': 'UnionWith'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'typesLines'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'stopTypesFiles'}}],
                                                                             'name': {'identifier': 'splitFileNames'}},
                                                             'name': {'identifier': 'files'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'size'},
                                                      'scope': {'name': {'identifier': 'files'}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'stopTypes'}},
                                                                           'value': {'type': {'name': {'identifier': 'HashSet'}}}}},
                                                           {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'loader'}},
                                                                                                                                                 {'name': {'identifier': 'trim'},
                                                                                                                                                  'scope': {'name': {'identifier': 'file'}}}],
                                                                                                                                   'name': {'identifier': 'getLines'}},
                                                                                                                   'name': {'identifier': 'typesLines'},
                                                                                                                   'type': {'name': {'identifier': 'List'},
                                                                                                                            'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'typesLines'}}],
                                                                                                    'name': {'identifier': 'addAll'},
                                                                                                    'scope': {'name': {'identifier': 'stopTypes'}}}}]},
                                                            'iterable': {'name': {'identifier': 'files'}},
                                                            'variable': {'variables': [{'name': {'identifier': 'file'},
                                                                                        'type': {'name': {'identifier': 'String'}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'MockTokenizer'},
                                                                                                                                                                                                                              {'IdentifierName': 'WHITESPACE'}]}]},
                                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'false'}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'tokenizer'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tokenizer'}},
                                                            {'name': {'identifier': 'tokenizer'}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'INTS'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'LONGS'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'RANDOM_TEST_BYTES'},
                                                                                {'NullLiteralExpression': 'null'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'AfterClass'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'INTS'}},
                                              'value': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'LONGS'}},
                                              'value': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'RANDOM_TEST_BYTES'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexWriter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RunData'},
                                                                                                                                                                {'IdentifierName': 'IndexWriter'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'iw'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'InfoStream'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iw'},
                                                                                                                                                                                                                              {'IdentifierName': 'Config'}]},
                                                                                                                                                                                            {'IdentifierName': 'InfoStream'}]}]}]}]}]},
                                                   {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'infoStream'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'infoStream'},
                                                                                                                                                                    {'IdentifierName': 'Dispose'}]},
                                                                                                                                  {'ArgumentList': '()'}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iw'},
                                                                                                                                        {'IdentifierName': 'Dispose'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'doWait'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RunData'},
                                                                                                                                              {'IdentifierName': 'IndexWriter'}]},
                                                                                                            {'NullLiteralExpression': 'null'}]}]}]}]},
                       {'ReturnStatement': [{'NumericLiteralExpression': '1'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getIndexWriter'},
                                                                             'scope': {'name': {'identifier': 'getRunData'}}},
                                                             'name': {'identifier': 'iw'},
                                                             'type': {'name': {'identifier': 'IndexWriter'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'iw'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getInfoStream'},
                                                                                                          'scope': {'name': {'identifier': 'getConfig'},
                                                                                                                    'scope': {'name': {'identifier': 'iw'}}}},
                                                                                          'name': {'identifier': 'infoStream'},
                                                                                          'type': {'name': {'identifier': 'InfoStream'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'infoStream'}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                                                        'scope': {'name': {'identifier': 'infoStream'}}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'doWait'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'value': 'false'}},
                                                            'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'close'},
                                                                                                        'scope': {'name': {'identifier': 'iw'}}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'commit'},
                                                                                                        'scope': {'name': {'identifier': 'iw'}}}},
                                                                                        {'expression': {'name': {'identifier': 'rollback'},
                                                                                                        'scope': {'name': {'identifier': 'iw'}}}}]}},
                                                           {'expression': {'arguments': [{}],
                                                                           'name': {'identifier': 'setIndexWriter'},
                                                                           'scope': {'name': {'identifier': 'getRunData'}}}}]}},
                              {'expression': {'value': '1'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'comparer'},
                                                                                                        {'IdentifierName': 'Compare'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]},
                                                                                        {'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'arr'},
                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'j'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'index': {'name': {'identifier': 'i'}},
                                                             'name': {'name': {'identifier': 'arr'}}},
                                                            {'index': {'name': {'identifier': 'j'}},
                                                             'name': {'name': {'identifier': 'arr'}}}],
                                              'name': {'identifier': 'compare'},
                                              'scope': {'name': {'identifier': 'comparator'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'ParenthesizedExpression': [{'BitwiseAndExpression': [{'IdentifierName': 'type'},
                                                                                                                            {'IdentifierName': 'ALPHA'}]}]},
                                                                     {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'inner': {'left': {'name': {'identifier': 'type'}},
                                                                 'operator': 'BINARY_AND',
                                                                 'right': {'name': {'identifier': 'ALPHA'}}}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '0'}]}]},
  'java_ast': {'statements': [{'expression': {'value': '0'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'dval'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'dval'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'zzLexicalState'},
                                                                                {'IdentifierName': 'newState'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'zzLexicalState'}},
                                              'value': {'name': {'identifier': 'newState'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'byte'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'IdentifierName': 'length'}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'length'}]},
                                         {'PreIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'CastExpression': [{'PredefinedType': 'byte'},
                                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                                                                                       {'ArgumentList': '()'}]},
                                                                                                                                                                                             {'IdentifierName': 'Next'}]},
                                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'max'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'type': 'BYTE'},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'}}}]},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'componentType': {'type': 'BYTE'},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'result'}}},
                                                                       'value': {'expression': {'arguments': [{'name': {'identifier': 'max'}}],
                                                                                                'name': {'identifier': 'nextInt'},
                                                                                                'scope': {'name': {'identifier': 'random'}}},
                                                                                 'type': {'type': 'BYTE'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'PREFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewDirectory'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'DirectoryTaxonomyWriter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'indexDir'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'FillTaxonomy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tw'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tw'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'tw'},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'DirectoryTaxonomyWriter'},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'indexDir'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'FillTaxonomy'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tw'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                            {'IdentifierName': 'AreEqual'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ExpectedCategories'},
                                                                                                                                            {'IdentifierName': 'Length'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tw'},
                                                                                                                                            {'IdentifierName': 'Count'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tw'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'indexDir'},
                                                                                                            {'IdentifierName': 'Dispose'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'newDirectory'}},
                                                             'name': {'identifier': 'indexDir'},
                                                             'type': {'name': {'identifier': 'Directory'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'indexDir'}}],
                                                                             'type': {'name': {'identifier': 'DirectoryTaxonomyWriter'}}},
                                                             'name': {'identifier': 'tw'},
                                                             'type': {'name': {'identifier': 'TaxonomyWriter'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tw'}}],
                                              'name': {'identifier': 'fillTaxonomy'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'tw'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'tw'}},
                                              'value': {'arguments': [{'name': {'identifier': 'indexDir'}}],
                                                        'type': {'name': {'identifier': 'DirectoryTaxonomyWriter'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tw'}}],
                                              'name': {'identifier': 'fillTaxonomy'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'expectedCategories'}}},
                                                            {'name': {'identifier': 'getSize'},
                                                             'scope': {'name': {'identifier': 'tw'}}}],
                                              'name': {'identifier': 'assertEquals'}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'tw'}}}},
                              {'expression': {'name': {'identifier': 'close'},
                                              'scope': {'name': {'identifier': 'indexDir'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'IdentifierName': 'LowerCase'},
                                                                       {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Character'},
                                                                                                                                   {'IdentifierName': 'ToLower'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]},
                                                                       {'IdentifierName': 'c'}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'name': {'identifier': 'lowerCase'}},
                                              'elseExpr': {'name': {'identifier': 'c'}},
                                              'thenExpr': {'arguments': [{'name': {'identifier': 'c'}}],
                                                           'name': {'identifier': 'toLowerCase'},
                                                           'scope': {'name': {'identifier': 'Character'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'output'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RandomInts'},
                                                                                                        {'IdentifierName': 'RandomFrom'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'random'}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TimeZoneInfo'},
                                                                                                                                                                  {'IdentifierName': 'GetSystemTimeZones'}]},
                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getAvailableIDs'},
                                                                             'scope': {'name': {'identifier': 'TimeZone'}}},
                                                             'name': {'identifier': 'tzIds'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'NAME'}}]}},
                              {'expression': {'arguments': [{'index': {'arguments': [{'name': {'identifier': 'length'},
                                                                                      'scope': {'name': {'identifier': 'tzIds'}}}],
                                                                       'name': {'identifier': 'nextInt'},
                                                                       'scope': {'name': {'identifier': 'random'}}},
                                                             'name': {'name': {'identifier': 'tzIds'}}}],
                                              'name': {'identifier': 'getTimeZone'},
                                              'scope': {'name': {'identifier': 'TimeZone'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                           {'IdentifierName': 'AlignObjectSize'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'AddExpression': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                 {'IdentifierName': 'NUM_BYTES_OBJECT_HEADER'}]},
                                                                                                                                                               {'MultiplyExpression': [{'NumericLiteralExpression': '2'},
                                                                                                                                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                                                                         {'IdentifierName': 'NUM_BYTES_INT32'}]}]}]},
                                                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                                                                              {'IdentifierName': 'NUM_BYTES_OBJECT_REF'}]}]}]}]}]},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'RamUsageEstimator'},
                                                                                                                           {'IdentifierName': 'SizeOf'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'blocks'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'left': {'left': {'name': {'identifier': 'NUM_BYTES_OBJECT_HEADER'},
                                                                                        'scope': {'name': {'identifier': 'RamUsageEstimator'}}},
                                                                               'operator': 'PLUS',
                                                                               'right': {'left': {'value': '2'},
                                                                                         'operator': 'MULTIPLY',
                                                                                         'right': {'name': {'identifier': 'NUM_BYTES_INT'},
                                                                                                   'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}},
                                                                      'operator': 'PLUS',
                                                                      'right': {'name': {'identifier': 'NUM_BYTES_OBJECT_REF'},
                                                                                'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}],
                                                       'name': {'identifier': 'alignObjectSize'},
                                                       'scope': {'name': {'identifier': 'RamUsageEstimator'}}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'name': {'identifier': 'blocks'}}],
                                                        'name': {'identifier': 'sizeOf'},
                                                        'scope': {'name': {'identifier': 'RamUsageEstimator'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'zzAtEOF'},
                                                                                {'TrueLiteralExpression': 'true'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'zzEndRead'},
                                                                                {'IdentifierName': 'zzStartRead'}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'zzReader'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'zzReader'},
                                                                                                                                        {'IdentifierName': 'Dispose'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'zzAtEOF'}},
                                              'value': {'value': 'true'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'zzEndRead'}},
                                              'value': {'name': {'identifier': 'zzStartRead'}}}},
                              {'condition': {'left': {'name': {'identifier': 'zzReader'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'close'},
                                                           'scope': {'name': {'identifier': 'zzReader'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'other'},
                                                              {'ThisExpression': 'this'}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                                        {'ElseClause': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'other'},
                                                                                           {'IdentifierName': 'Pair'}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'Pair'},
                                                                                                                                                                                                               {'IdentifierName': 'other'}]}]}]}]}]},
                                                                                    {'ReturnStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Output1'},
                                                                                                                                                                                               {'IdentifierName': 'Equals'}]},
                                                                                                                                                             {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pair'},
                                                                                                                                                                                                                               {'IdentifierName': 'Output1'}]}]}]}]},
                                                                                                                                   {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Output2'},
                                                                                                                                                                                               {'IdentifierName': 'Equals'}]},
                                                                                                                                                             {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pair'},
                                                                                                                                                                                                                               {'IdentifierName': 'Output2'}]}]}]}]}]}]}]},
                                                                         {'ElseClause': [{'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'other'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'elseStmt': {'condition': {'expression': {'name': {'identifier': 'other'}},
                                                          'type': {'name': {'identifier': 'Pair'}}},
                                            'elseStmt': {'statements': [{'expression': {'value': 'false'}}]},
                                            'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'other'}},
                                                                                                                       'type': {'name': {'identifier': 'Pair'}}},
                                                                                                       'name': {'identifier': 'pair'},
                                                                                                       'type': {'name': {'identifier': 'Pair'}}}]}},
                                                                        {'expression': {'left': {'arguments': [{'name': {'identifier': 'output1'},
                                                                                                                'scope': {'name': {'identifier': 'pair'}}}],
                                                                                                 'name': {'identifier': 'equals'},
                                                                                                 'scope': {'name': {'identifier': 'output1'}}},
                                                                                        'operator': 'AND',
                                                                                        'right': {'arguments': [{'name': {'identifier': 'output2'},
                                                                                                                 'scope': {'name': {'identifier': 'pair'}}}],
                                                                                                  'name': {'identifier': 'equals'},
                                                                                                  'scope': {'name': {'identifier': 'output2'}}}}}]}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'th'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ThrowStatement': [{'IdentifierName': 'th'}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'th'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'condition': {'expression': {'name': {'identifier': 'th'}},
                                                                          'type': {'name': {'identifier': 'Error'}}},
                                                            'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'th'}},
                                                                                                        'type': {'name': {'identifier': 'Error'}}}}]}},
                                                           {'condition': {'expression': {'name': {'identifier': 'th'}},
                                                                          'type': {'name': {'identifier': 'RuntimeException'}}},
                                                            'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'th'}},
                                                                                                        'type': {'name': {'identifier': 'RuntimeException'}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'th'}}],
                                                                           'type': {'name': {'identifier': 'RuntimeException'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'MinWordLen'},
                                                                                             {'NumericLiteralExpression': '0'}]},
                                                                  {'LessThanExpression': [{'IdentifierName': 'len'},
                                                                                          {'IdentifierName': 'MinWordLen'}]}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'MaxWordLen'},
                                                                                             {'NumericLiteralExpression': '0'}]},
                                                                  {'GreaterThanExpression': [{'IdentifierName': 'len'},
                                                                                             {'IdentifierName': 'MaxWordLen'}]}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'StopWords'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StopWords'},
                                                                                                                                  {'IdentifierName': 'Contains'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'term'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'minWordLen'}},
                                                      'operator': 'GREATER',
                                                      'right': {'value': '0'}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'len'}},
                                                       'operator': 'LESS',
                                                       'right': {'name': {'identifier': 'minWordLen'}}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'maxWordLen'}},
                                                      'operator': 'GREATER',
                                                      'right': {'value': '0'}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'len'}},
                                                       'operator': 'GREATER',
                                                       'right': {'name': {'identifier': 'maxWordLen'}}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'stopWords'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'name': {'identifier': 'term'}}],
                                                        'name': {'identifier': 'contains'},
                                                        'scope': {'name': {'identifier': 'stopWords'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'GreaterThanExpression': [{'IdentifierName': 'inBODY'},
                                                                                             {'NumericLiteralExpression': '0'}]},
                                                                  {'EqualsExpression': [{'IdentifierName': 'suppressed'},
                                                                                        {'NumericLiteralExpression': '0'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'body'},
                                                                                                                                        {'IdentifierName': 'Append'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ch'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'start'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'length'}]}]}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'GreaterThanExpression': [{'IdentifierName': 'inTITLE'},
                                                                                                    {'NumericLiteralExpression': '0'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'title'},
                                                                                                                                                                         {'IdentifierName': 'Append'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'ch'}]},
                                                                                                                                                         {'Argument': [{'IdentifierName': 'start'}]},
                                                                                                                                                         {'Argument': [{'IdentifierName': 'length'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'inBODY'}},
                                                      'operator': 'GREATER',
                                                      'right': {'value': '0'}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'suppressed'}},
                                                       'operator': 'EQUALS',
                                                       'right': {'value': '0'}}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'inTITLE'}},
                                                          'operator': 'GREATER',
                                                          'right': {'value': '0'}},
                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ch'}},
                                                                                                      {'name': {'identifier': 'start'}},
                                                                                                      {'name': {'identifier': 'length'}}],
                                                                                        'name': {'identifier': 'append'},
                                                                                        'scope': {'name': {'identifier': 'title'}}}}]}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ch'}},
                                                                                         {'name': {'identifier': 'start'}},
                                                                                         {'name': {'identifier': 'length'}}],
                                                                           'name': {'identifier': 'append'},
                                                                           'scope': {'name': {'identifier': 'body'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                              {'IdentifierName': 'FrenchStemmer'}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'o'}},
                                              'type': {'name': {'identifier': 'FrenchStemmer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'EnsureOpen'},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'ListAll'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'm_directory'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ensureOpen'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'directory'}},
                                                            {'name': {'identifier': 'pendingDeletes'}}],
                                              'name': {'identifier': 'listAll'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Random'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Random'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'dvType'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'DocValuesType'},
                                                                                                   {'IdentifierName': 'NONE'}]}]},
                                        {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'random'},
                                                                                                                                {'IdentifierName': 'nextBoolean'}]},
                                                                                              {'ArgumentList': '()'}]},
                                                                    {'Block': [{'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'FunctionFirstPassGroupingCollector'},
                                                                                                                                                    {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRefFieldSource'},
                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]}]}]}]},
                                                                                                                                                                      {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Hashtable'},
                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                                      {'Argument': [{'IdentifierName': 'groupSort'}]},
                                                                                                                                                                      {'Argument': [{'IdentifierName': 'topNGroups'}]}]}]},
                                                                                                                      {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IComparable'}]}]}]}]}]},
                                                                    {'ElseClause': [{'Block': [{'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'TermFirstPassGroupingCollector'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'groupSort'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'topNGroups'}]}]}]},
                                                                                                                                      {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IComparable'}]}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'random'},
                                                                                                                                                {'IdentifierName': 'nextBoolean'}]},
                                                                                                              {'ArgumentList': '()'}]},
                                                                                    {'Block': [{'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'FunctionFirstPassGroupingCollector'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRefFieldSource'},
                                                                                                                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]}]}]}]},
                                                                                                                                                                                      {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Hashtable'},
                                                                                                                                                                                                                                  {'ArgumentList': '()'}]}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'groupSort'}]},
                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'topNGroups'}]}]}]},
                                                                                                                                      {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IComparable'}]}]}]}]}]},
                                                                                    {'ElseClause': [{'Block': [{'ReturnStatement': [{'AsExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'TermFirstPassGroupingCollector'},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'groupField'}]},
                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'groupSort'}]},
                                                                                                                                                                                                      {'Argument': [{'IdentifierName': 'topNGroups'}]}]}]},
                                                                                                                                                      {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'IComparable'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'random'}},
                                                             'name': {'identifier': 'random'},
                                                             'type': {'name': {'identifier': 'Random'}}}]}},
                              {'condition': {'name': {'identifier': 'nextBoolean'},
                                             'scope': {'name': {'identifier': 'random'}}},
                               'elseStmt': {'statements': [{'expression': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'groupField'}}],
                                                                                                         'type': {'name': {'identifier': 'TermGroupSelector'}}},
                                                                                                        {'name': {'identifier': 'groupSort'}},
                                                                                                        {'name': {'identifier': 'topNGroups'}}],
                                                                                          'type': {'name': {'identifier': 'FirstPassGroupingCollector'}}},
                                                                           'type': {'name': {'identifier': 'FirstPassGroupingCollector'},
                                                                                    'typeArguments': [{'name': {'identifier': 'T'}}]}}}]},
                               'thenStmt': {'statements': [{'expression': {'expression': {'arguments': [{'arguments': [{'arguments': [{'name': {'identifier': 'groupField'}}],
                                                                                                                        'type': {'name': {'identifier': 'BytesRefFieldSource'}}},
                                                                                                                       {'type': {'name': {'identifier': 'HashMap'}}}],
                                                                                                         'type': {'name': {'identifier': 'ValueSourceGroupSelector'}}},
                                                                                                        {'name': {'identifier': 'groupSort'}},
                                                                                                        {'name': {'identifier': 'topNGroups'}}],
                                                                                          'type': {'name': {'identifier': 'FirstPassGroupingCollector'}}},
                                                                           'type': {'name': {'identifier': 'FirstPassGroupingCollector'},
                                                                                    'typeArguments': [{'name': {'identifier': 'T'}}]}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TermStatistics'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'term'},
                                                                                                                                            {'IdentifierName': 'Bytes'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'context'},
                                                                                                                                            {'IdentifierName': 'DocFreq'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'context'},
                                                                                                                                            {'IdentifierName': 'TotalTermFreq'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'docFreq'},
                                                      'scope': {'name': {'identifier': 'context'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bytes'},
                                                                                          'scope': {'name': {'identifier': 'term'}}},
                                                                                         {'name': {'identifier': 'docFreq'},
                                                                                          'scope': {'name': {'identifier': 'context'}}},
                                                                                         {'name': {'identifier': 'totalTermFreq'},
                                                                                          'scope': {'name': {'identifier': 'context'}}}],
                                                                           'type': {'name': {'identifier': 'TermStatistics'}}}}]},
                               'thenStmt': {'statements': [{'expression': {}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ComplexPhraseQuery'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ComplexPhraseQuery'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'queryText'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'slop'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'InOrder'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'complexPhrases'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'cpq'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'cpq'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}},
                                                                                           {'name': {'identifier': 'queryText'}},
                                                                                           {'name': {'identifier': 'slop'}},
                                                                                           {'name': {'identifier': 'inOrder'}}],
                                                                             'type': {'name': {'identifier': 'ComplexPhraseQuery'}}},
                                                             'name': {'identifier': 'cpq'},
                                                             'type': {'name': {'identifier': 'ComplexPhraseQuery'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'cpq'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'complexPhrases'}}}},
                              {'expression': {'name': {'identifier': 'cpq'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'word'},
                                                                                                                                                                {'IdentifierName': 'Length'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'len'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                                                           {'IdentifierName': 'IsDigit'}]},
                                                                                                                         {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'word'},
                                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pat'},
                                                                                                                                                                     {'IdentifierName': 'Append'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'word'},
                                                                                                                                                                                                {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pat'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'pat'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'length'},
                                                                             'scope': {'name': {'identifier': 'word'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                    'name': {'identifier': 'charAt'},
                                                                                                    'scope': {'name': {'identifier': 'word'}}}],
                                                                                     'name': {'identifier': 'isDigit'},
                                                                                     'scope': {'name': {'identifier': 'Character'}}},
                                                                      'operator': 'LOGICAL_COMPLEMENT'},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                   'name': {'identifier': 'charAt'},
                                                                                                                   'scope': {'name': {'identifier': 'word'}}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'pat'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'len'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'pat'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'numSnapshots'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IndexCommit'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'Snapshots'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckMaxDoc'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'snapshot'}]},
                                                                                                                         {'Argument': [{'AddExpression': [{'IdentifierName': 'i'},
                                                                                                                                                          {'NumericLiteralExpression': '1'}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckSnapshotExists'},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'dir'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'snapshot'}]}]}]}]},
                                                    {'IfStatement': [{'IdentifierName': 'checkIndexCommitSame'},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                                                     {'IdentifierName': 'AreSame'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'snapshot'}]},
                                                                                                                                                     {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sdp'},
                                                                                                                                                                                                                               {'IdentifierName': 'GetIndexCommit'}]},
                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'snapshot'},
                                                                                                                                                                                                                                                               {'IdentifierName': 'Generation'}]}]}]}]}]}]}]}]}]},
                                                                     {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Assert'},
                                                                                                                                                                                     {'IdentifierName': 'AreEqual'}]},
                                                                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'snapshot'},
                                                                                                                                                                                                                     {'IdentifierName': 'Generation'}]}]},
                                                                                                                                                                     {'Argument': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'sdp'},
                                                                                                                                                                                                                                                                                 {'IdentifierName': 'GetIndexCommit'}]},
                                                                                                                                                                                                                                               {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'snapshot'},
                                                                                                                                                                                                                                                                                                                 {'IdentifierName': 'Generation'}]}]}]}]},
                                                                                                                                                                                                                     {'IdentifierName': 'Generation'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'snapshots'}}},
                                                                                      'name': {'identifier': 'snapshot'},
                                                                                      'type': {'name': {'identifier': 'IndexCommit'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'snapshot'}},
                                                                                     {'left': {'name': {'identifier': 'i'}},
                                                                                      'operator': 'PLUS',
                                                                                      'right': {'value': '1'}}],
                                                                       'name': {'identifier': 'checkMaxDoc'}}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'dir'}},
                                                                                     {'name': {'identifier': 'snapshot'}}],
                                                                       'name': {'identifier': 'checkSnapshotExists'}}},
                                                       {'condition': {'name': {'identifier': 'checkIndexCommitSame'}},
                                                        'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getGeneration'},
                                                                                                                   'scope': {'name': {'identifier': 'snapshot'}}},
                                                                                                                  {'name': {'identifier': 'getGeneration'},
                                                                                                                   'scope': {'arguments': [{'name': {'identifier': 'getGeneration'},
                                                                                                                                            'scope': {'name': {'identifier': 'snapshot'}}}],
                                                                                                                             'name': {'identifier': 'getIndexCommit'},
                                                                                                                             'scope': {'name': {'identifier': 'sdp'}}}}],
                                                                                                    'name': {'identifier': 'assertEquals'}}}]},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'snapshot'}},
                                                                                                                  {'arguments': [{'name': {'identifier': 'getGeneration'},
                                                                                                                                  'scope': {'name': {'identifier': 'snapshot'}}}],
                                                                                                                   'name': {'identifier': 'getIndexCommit'},
                                                                                                                   'scope': {'name': {'identifier': 'sdp'}}}],
                                                                                                    'name': {'identifier': 'assertSame'}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'numSnapshots'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'WhileStatement': [{'TrueLiteralExpression': 'true'},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'IdentifierName': 'MergePolicy'},
                                                                                                                                                               {'IdentifierName': 'OneMerge'}]},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                                                                                                                                       {'IdentifierName': 'NextMerge'}]},
                                                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                                                    {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'merge'},
                                                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                                                     {'Block': [{'BreakStatement': 'break;'}]}]},
                                                                                    {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                      {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                                                                              {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'merge'},
                                                                                                                                                                                                  {'IdentifierName': 'Segments'}]},
                                                                                                                                                                {'IdentifierName': 'Count'}]}]},
                                                                                                      {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                                                                                      {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                                                                                                                      {'IdentifierName': 'Assert'}]},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'merge'},
                                                                                                                                                                                                                                                                                                                                                               {'IdentifierName': 'Segments'}]},
                                                                                                                                                                                                                                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                                                                                                                {'IdentifierName': 'Info'}]},
                                                                                                                                                                                                                                                              {'IdentifierName': 'DocCount'}]},
                                                                                                                                                                                                                            {'NumericLiteralExpression': '20'}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'writer'},
                                                                                                                                                                         {'IdentifierName': 'Merge'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'merge'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getNextMerge'},
                                                                                                      'scope': {'name': {'identifier': 'writer'}}},
                                                                                      'name': {'identifier': 'merge'},
                                                                                      'type': {'name': {'identifier': 'OneMerge'},
                                                                                               'scope': {'name': {'identifier': 'MergePolicy'}}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'merge'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{}]}},
                                                       {'expression': {'variables': [{'initializer': {'value': '0'},
                                                                                      'name': {'identifier': 'numDocs'},
                                                                                      'type': {'type': 'INT'}}]}},
                                                       {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'maxDoc'},
                                                                                                                               'scope': {'name': {'identifier': 'info'},
                                                                                                                                         'scope': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                                                   'name': {'identifier': 'get'},
                                                                                                                                                   'scope': {'name': {'identifier': 'segments'},
                                                                                                                                                             'scope': {'name': {'identifier': 'merge'}}}}}},
                                                                                                               'name': {'identifier': 'maxDoc'},
                                                                                                               'type': {'type': 'INT'}}]}},
                                                                                {'expression': {'operator': 'PLUS',
                                                                                                'target': {'name': {'identifier': 'numDocs'}},
                                                                                                'value': {'name': {'identifier': 'maxDoc'}}}},
                                                                                {'expression': {'arguments': [{'left': {'name': {'identifier': 'maxDoc'}},
                                                                                                               'operator': 'LESS',
                                                                                                               'right': {'value': '20'}}],
                                                                                                'name': {'identifier': 'assertTrue'}}}]},
                                                        'compare': {'left': {'name': {'identifier': 'i'}},
                                                                    'operator': 'LESS',
                                                                    'right': {'name': {'identifier': 'size'},
                                                                              'scope': {'name': {'identifier': 'segments'},
                                                                                        'scope': {'name': {'identifier': 'merge'}}}}},
                                                        'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                                           'name': {'identifier': 'i'},
                                                                                           'type': {'type': 'INT'}}]}],
                                                        'update': [{'expression': {'name': {'identifier': 'i'}},
                                                                    'operator': 'POSTFIX_INCREMENT'}]},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'merge'}}],
                                                                       'name': {'identifier': 'merge'},
                                                                       'scope': {'name': {'identifier': 'writer'}}}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'numDocs'}},
                                                                                     {'name': {'identifier': 'maxDoc'},
                                                                                      'scope': {'name': {'identifier': 'info'},
                                                                                                'scope': {'name': {'identifier': 'getMergeInfo'},
                                                                                                          'scope': {'name': {'identifier': 'merge'}}}}}],
                                                                       'name': {'identifier': 'assertEquals'}}}]},
                               'condition': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'topReader'},
                                                                                                        {'IdentifierName': 'GetSortedSetDocValues'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'field'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'map'},
                                                             'type': {'name': {'identifier': 'OrdinalMap'}}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'map'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                                 'name': {'identifier': 'get'},
                                                                                 'scope': {'name': {'identifier': 'cachedOrdMaps'}}}}},
                                                       {'condition': {'left': {'name': {'identifier': 'map'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'reader'}},
                                                                                                                                                 {'name': {'identifier': 'field'}}],
                                                                                                                                   'name': {'identifier': 'getSortedSetValues'},
                                                                                                                                   'scope': {'name': {'identifier': 'MultiDocValues'}}},
                                                                                                                   'name': {'identifier': 'dv'},
                                                                                                                   'type': {'name': {'identifier': 'SortedSetDocValues'}}}]}},
                                                                                    {'condition': {'expression': {'name': {'identifier': 'dv'}},
                                                                                                   'type': {'name': {'identifier': 'MultiSortedSetDocValues'},
                                                                                                            'scope': {'name': {'identifier': 'MultiDocValues'}}}},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'map'}},
                                                                                                                                 'value': {'name': {'identifier': 'mapping'},
                                                                                                                                           'scope': {'inner': {'expression': {'name': {'identifier': 'dv'}},
                                                                                                                                                               'type': {'name': {'identifier': 'MultiSortedSetDocValues'},
                                                                                                                                                                        'scope': {'name': {'identifier': 'MultiDocValues'}}}}}}}},
                                                                                                                 {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getReaderCacheHelper'},
                                                                                                                                                                'scope': {'name': {'identifier': 'reader'}}},
                                                                                                                                                'name': {'identifier': 'cacheHelper'},
                                                                                                                                                'type': {'name': {'identifier': 'CacheHelper'},
                                                                                                                                                         'scope': {'name': {'identifier': 'IndexReader'}}}}]}},
                                                                                                                 {'condition': {'left': {'left': {'name': {'identifier': 'cacheHelper'}},
                                                                                                                                         'operator': 'NOT_EQUALS',
                                                                                                                                         'right': {}},
                                                                                                                                'operator': 'AND',
                                                                                                                                'right': {'left': {'name': {'identifier': 'owner'},
                                                                                                                                                   'scope': {'name': {'identifier': 'map'}}},
                                                                                                                                          'operator': 'EQUALS',
                                                                                                                                          'right': {'name': {'identifier': 'getKey'},
                                                                                                                                                    'scope': {'name': {'identifier': 'cacheHelper'}}}}},
                                                                                                                  'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'field'}},
                                                                                                                                                                            {'name': {'identifier': 'map'}}],
                                                                                                                                                              'name': {'identifier': 'put'},
                                                                                                                                                              'scope': {'name': {'identifier': 'cachedOrdMaps'}}}}]}}]}},
                                                                                    {'expression': {'name': {'identifier': 'dv'}}}]}}]},
                               'expression': {'name': {'identifier': 'cachedOrdMaps'}}},
                              {'check': {'left': {'name': {'identifier': 'map'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'size'},
                                                                             'scope': {'name': {'identifier': 'leaves'},
                                                                                       'scope': {'name': {'identifier': 'reader'}}}},
                                                             'name': {'identifier': 'size'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'SortedSetDocValues'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'size'}}}]},
                                                             'name': {'identifier': 'values'},
                                                             'type': {'componentType': {'name': {'identifier': 'SortedSetDocValues'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'type': 'INT'},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'size'}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'starts'},
                                                             'type': {'componentType': {'type': 'INT'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'cost'},
                                                             'type': {'type': 'LONG'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'leaves'},
                                                                                                                'scope': {'name': {'identifier': 'reader'}}}},
                                                                                      'name': {'identifier': 'context'},
                                                                                      'type': {'name': {'identifier': 'LeafReaderContext'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'name': {'identifier': 'reader'},
                                                                                                      'scope': {'name': {'identifier': 'context'}}},
                                                                                      'name': {'identifier': 'reader'},
                                                                                      'type': {'name': {'identifier': 'LeafReader'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                      'name': {'identifier': 'fieldInfo'},
                                                                                                      'scope': {'name': {'identifier': 'getFieldInfos'},
                                                                                                                'scope': {'name': {'identifier': 'reader'}}}},
                                                                                      'name': {'identifier': 'fieldInfo'},
                                                                                      'type': {'name': {'identifier': 'FieldInfo'}}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'fieldInfo'}},
                                                                               'operator': 'NOT_EQUALS',
                                                                               'right': {}},
                                                                      'operator': 'AND',
                                                                      'right': {'left': {'name': {'identifier': 'getDocValuesType'},
                                                                                         'scope': {'name': {'identifier': 'fieldInfo'}}},
                                                                                'operator': 'NOT_EQUALS',
                                                                                'right': {'name': {'identifier': 'SORTED_SET'},
                                                                                          'scope': {'name': {'identifier': 'DocValuesType'}}}}},
                                                        'thenStmt': {'statements': [{'expression': {}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'field'}}],
                                                                                                      'name': {'identifier': 'getSortedSetDocValues'},
                                                                                                      'scope': {'name': {'identifier': 'reader'}}},
                                                                                      'name': {'identifier': 'v'},
                                                                                      'type': {'name': {'identifier': 'SortedSetDocValues'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'v'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'v'}},
                                                                                                    'value': {'name': {'identifier': 'emptySortedSet'},
                                                                                                              'scope': {'name': {'identifier': 'DocValues'}}}}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'values'}}},
                                                                       'value': {'name': {'identifier': 'v'}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'starts'}}},
                                                                       'value': {'name': {'identifier': 'docBase'},
                                                                                 'scope': {'name': {'identifier': 'context'}}}}},
                                                       {'expression': {'operator': 'PLUS',
                                                                       'target': {'name': {'identifier': 'cost'}},
                                                                       'value': {'name': {'identifier': 'cost'},
                                                                                 'scope': {'name': {'identifier': 'v'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'name': {'identifier': 'size'}},
                                                         'name': {'name': {'identifier': 'starts'}}},
                                              'value': {'name': {'identifier': 'maxDoc'},
                                                        'scope': {'name': {'identifier': 'reader'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'values'}},
                                                            {'name': {'identifier': 'starts'}},
                                                            {'name': {'identifier': 'map'}},
                                                            {'name': {'identifier': 'cost'}}],
                                              'type': {'name': {'identifier': 'MultiSortedSetDocValues'}}}}]}},
 {'cs_ast': {'Block': [{'LockStatement': [{'ThisExpression': 'this'},
                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'IncTickets'},
                                                                                                        {'ArgumentList': '()'}]}]},
                                                     {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                                                             {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                                                     {'TryStatement': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'queue'},
                                                                                                                                                                       {'IdentifierName': 'AddLast'}]},
                                                                                                                                     {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'GlobalDeletesTicket'},
                                                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'deleteQueue'},
                                                                                                                                                                                                                                                                                               {'IdentifierName': 'FreezeGlobalBuffer'}]},
                                                                                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]}]}]}]},
                                                                                  {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'success'},
                                                                                                                                           {'TrueLiteralExpression': 'true'}]}]}]},
                                                                       {'FinallyClause': [{'Block': [{'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'success'}]},
                                                                                                                      {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DecTickets'},
                                                                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'name': {'identifier': 'incTickets'}}},
                                                       {'expression': {'variables': [{'initializer': {'value': 'false'},
                                                                                      'name': {'identifier': 'success'},
                                                                                      'type': {'type': 'BOOLEAN'}}]}},
                                                       {'finallyBlock': {'statements': [{'condition': {'expression': {'name': {'identifier': 'success'}},
                                                                                                       'operator': 'LOGICAL_COMPLEMENT'},
                                                                                         'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'decTickets'}}}]}}]},
                                                        'tryBlock': {'statements': [{'expression': {'arguments': [{'arguments': [{'arguments': [{}],
                                                                                                                                  'name': {'identifier': 'freezeGlobalBuffer'},
                                                                                                                                  'scope': {'name': {'identifier': 'deleteQueue'}}}],
                                                                                                                   'type': {'name': {'identifier': 'GlobalDeletesTicket'}}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'queue'}}}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'success'}},
                                                                                                    'value': {'value': 'true'}}}]}}]},
                               'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Token'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'term'}]},
                                                                                            {'Argument': [{'IdentifierName': 'start'}]},
                                                                                            {'Argument': [{'IdentifierName': 'offset'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'term'}},
                                                            {'name': {'identifier': 'start'}},
                                                            {'name': {'identifier': 'offset'}}],
                                              'type': {'name': {'identifier': 'Token'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'BytesRef'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'IIndexableField'},
                                             {'IdentifierName': 'fields'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                       {'IdentifierName': 'Name'}]},
                                                                                                                                     {'IdentifierName': 'Equals'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                     {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'StringComparison'},
                                                                                                                                                                     {'IdentifierName': 'Ordinal'}]}]}]}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'field'},
                                                                                                                                                                                                                                                       {'IdentifierName': 'GetBinaryValue'}]},
                                                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                                                    {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'bytes'},
                                                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                                                                                     {'IdentifierName': 'Add'}]},
                                                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytes'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                        {'IdentifierName': 'ToArray'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'}}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'BytesRef'}}]}}]}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'name'},
                                                                                'scope': {'name': {'identifier': 'field'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'binaryValue'},
                                                                                                                                   'scope': {'name': {'identifier': 'field'}}},
                                                                                                                   'name': {'identifier': 'bytes'},
                                                                                                                   'type': {'name': {'identifier': 'BytesRef'}}}]}},
                                                                                    {'condition': {'left': {'name': {'identifier': 'bytes'}},
                                                                                                   'operator': 'NOT_EQUALS',
                                                                                                   'right': {}},
                                                                                     'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'bytes'}}],
                                                                                                                                 'name': {'identifier': 'add'},
                                                                                                                                 'scope': {'name': {'identifier': 'result'}}}}]}}]}}]},
                               'iterable': {'name': {'identifier': 'fields'}},
                               'variable': {'variables': [{'name': {'identifier': 'field'},
                                                           'type': {'name': {'identifier': 'IndexableField'}}}]}},
                              {'expression': {'arguments': [{'elementType': {'name': {'identifier': 'BytesRef'}},
                                                             'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                       'scope': {'name': {'identifier': 'result'}}}}]}],
                                              'name': {'identifier': 'toArray'},
                                              'scope': {'name': {'identifier': 'result'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Tokenizer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'SimpleCJKTokenizer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'reader'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenStreamComponents'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'MockCJKSynonymFilter'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenizer'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'WHITESPACE'},
                                                                                            'scope': {'name': {'identifier': 'MockTokenizer'}}},
                                                                                           {'value': 'true'}],
                                                                             'type': {'name': {'identifier': 'MockTokenizer'}}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'Tokenizer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'result'}},
                                                            {'arguments': [{'name': {'identifier': 'result'}}],
                                                             'type': {'name': {'identifier': 'FoldingFilter'}}}],
                                              'type': {'name': {'identifier': 'TokenStreamComponents'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Expression'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'JavascriptCompiler'},
                                                                                                                                                                                          {'IdentifierName': 'Compile'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'expression'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'double'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'evaluator'},
                                                                                                                                                                                          {'IdentifierName': 'Evaluate'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                                                          {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AreEqual'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'expected'}]},
                                                                                            {'Argument': [{'IdentifierName': 'actual'}]},
                                                                                            {'Argument': [{'IdentifierName': 'DELTA'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'expression'}}],
                                                                             'name': {'identifier': 'compile'},
                                                                             'scope': {'name': {'identifier': 'JavascriptCompiler'}}},
                                                             'name': {'identifier': 'evaluator'},
                                                             'type': {'name': {'identifier': 'Expression'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                             'name': {'identifier': 'evaluate'},
                                                                             'scope': {'name': {'identifier': 'evaluator'}}},
                                                             'name': {'identifier': 'actual'},
                                                             'type': {'type': 'DOUBLE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'expected'}},
                                                            {'name': {'identifier': 'actual'}},
                                                            {'name': {'identifier': 'DELTA'}}],
                                              'name': {'identifier': 'assertEquals'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Int64sRef'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Int64sRef'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'clone'},
                                                                                                            {'IdentifierName': 'CopyInt64s'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'other'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'clone'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'longs'},
                                                                            'scope': {'name': {'identifier': 'other'}}},
                                                                           {'name': {'identifier': 'offset'},
                                                                            'scope': {'name': {'identifier': 'other'}}},
                                                                           {'left': {'name': {'identifier': 'offset'},
                                                                                     'scope': {'name': {'identifier': 'other'}}},
                                                                            'operator': 'PLUS',
                                                                            'right': {'name': {'identifier': 'length'},
                                                                                      'scope': {'name': {'identifier': 'other'}}}}],
                                                             'name': {'identifier': 'copyOfRange'},
                                                             'scope': {'name': {'identifier': 'Arrays'}}},
                                                            {'value': '0'},
                                                            {'name': {'identifier': 'length'},
                                                             'scope': {'name': {'identifier': 'other'}}}],
                                              'type': {'name': {'identifier': 'LongsRef'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BooleanClause'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'q'}]},
                                                                                            {'Argument': [{'IdentifierName': 'occur'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'q'}},
                                                            {'name': {'identifier': 'occur'}}],
                                              'type': {'name': {'identifier': 'BooleanClause'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ParenthesizedExpression': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                                                                                                                                     {'EqualsExpression': [{'ModuloExpression': [{'IdentifierName': 'count'},
                                                                                                                                                                                                                                 {'IdentifierName': 'modCount'}]},
                                                                                                                                                                                                           {'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'count'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'b'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'left': {'name': {'identifier': 'count'}},
                                                                                      'operator': 'REMAINDER',
                                                                                      'right': {'name': {'identifier': 'modCount'}}},
                                                                             'operator': 'EQUALS',
                                                                             'right': {'value': '0'}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'expression': {'name': {'identifier': 'count'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'b'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'Length'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'bytes'},
                                                                                                            {'IdentifierName': 'Length'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'bytes'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ArrayUtil'},
                                                                                                                                                                        {'IdentifierName': 'Grow'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'bytes'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'bytes'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'PostIncrementExpression': [{'IdentifierName': 'Length'}]}]}]}]},
                                                                                {'IdentifierName': 'b'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'length'},
                                                       'scope': {'name': {'identifier': 'bytes'}}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'bytes'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'bytes'}}],
                                                                                     'name': {'identifier': 'grow'},
                                                                                     'scope': {'name': {'identifier': 'ArrayUtil'}}}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'expression': {'name': {'identifier': 'length'}},
                                                                   'operator': 'POSTFIX_INCREMENT'},
                                                         'name': {'name': {'identifier': 'bytes'}}},
                                              'value': {'name': {'identifier': 'b'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'count'}]}]},
                       {'WhileStatement': [{'GreaterThanExpression': [{'ParenthesizedExpression': [{'SimpleAssignmentExpression': [{'IdentifierName': 'count'},
                                                                                                                                   {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refCount'},
                                                                                                                                                                                               {'IdentifierName': 'Get'}]},
                                                                                                                                                             {'ArgumentList': '()'}]}]}]},
                                                                      {'NumericLiteralExpression': '0'}]},
                                           {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refCount'},
                                                                                                                                   {'IdentifierName': 'CompareAndSet'}]},
                                                                                                 {'ArgumentList': [{'Argument': [{'IdentifierName': 'count'}]},
                                                                                                                   {'Argument': [{'AddExpression': [{'IdentifierName': 'count'},
                                                                                                                                                    {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                       {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'count'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'count'}},
                                                                                    {'left': {'name': {'identifier': 'count'}},
                                                                                     'operator': 'PLUS',
                                                                                     'right': {'value': '1'}}],
                                                                      'name': {'identifier': 'compareAndSet'},
                                                                      'scope': {'name': {'identifier': 'refCount'}}},
                                                        'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}}]},
                               'condition': {'left': {'inner': {'operator': 'ASSIGN',
                                                                'target': {'name': {'identifier': 'count'}},
                                                                'value': {'name': {'identifier': 'get'},
                                                                          'scope': {'name': {'identifier': 'refCount'}}}}},
                                             'operator': 'GREATER',
                                             'right': {'value': '0'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                                                          {'IdentifierName': 'ReadVInt32'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'len'},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'NO_OUTPUT'}]}]},
                                        {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BytesRef'},
                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BytesRef'},
                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'len'}]}]}]}]}]}]}]},
                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                                                        {'IdentifierName': 'ReadBytes'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                                                                                                        {'IdentifierName': 'Bytes'}]}]},
                                                                                                                                        {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                                        {'Argument': [{'IdentifierName': 'len'}]}]}]}]},
                                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                                                                              {'IdentifierName': 'Length'}]},
                                                                                                                            {'IdentifierName': 'len'}]}]},
                                                                   {'ReturnStatement': [{'IdentifierName': 'output'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'readVInt'},
                                                                             'scope': {'name': {'identifier': 'in'}}},
                                                             'name': {'identifier': 'len'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'len'}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'len'}}],
                                                                                                          'type': {'name': {'identifier': 'BytesRef'}}},
                                                                                          'name': {'identifier': 'output'},
                                                                                          'type': {'name': {'identifier': 'BytesRef'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'bytes'},
                                                                                          'scope': {'name': {'identifier': 'output'}}},
                                                                                         {'value': '0'},
                                                                                         {'name': {'identifier': 'len'}}],
                                                                           'name': {'identifier': 'readBytes'},
                                                                           'scope': {'name': {'identifier': 'in'}}}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'length'},
                                                                                      'scope': {'name': {'identifier': 'output'}}},
                                                                           'value': {'name': {'identifier': 'len'}}}},
                                                           {'expression': {'name': {'identifier': 'output'}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'NO_OUTPUT'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'CreateSpan'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'slop'}]},
                                                                                        {'Argument': [{'IdentifierName': 'ordered'}]},
                                                                                        {'Argument': [{'ArrayCreationExpression': [{'ArrayType': [{'IdentifierName': 'SpanQuery'},
                                                                                                                                                  {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                                                                                   {'ArrayInitializerExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateSpan'},
                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'IdentifierName': 'term1'}]}]}]},
                                                                                                                                                                   {'InvocationExpression': [{'IdentifierName': 'CreateSpan'},
                                                                                                                                                                                             {'ArgumentList': [{'Argument': [{'IdentifierName': 'term2'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'slop'}},
                                                            {'name': {'identifier': 'ordered'}},
                                                            {'elementType': {'name': {'identifier': 'SpanQuery'}},
                                                             'initializer': {'values': [{'arguments': [{'name': {'identifier': 'term1'}}],
                                                                                         'name': {'identifier': 'createSpan'}},
                                                                                        {'arguments': [{'name': {'identifier': 'term2'}}],
                                                                                         'name': {'identifier': 'createSpan'}}]},
                                                             'levels': [{}]}],
                                              'name': {'identifier': 'createSpan'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ApostropheFilter'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'type': {'name': {'identifier': 'ApostropheFilter'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'var'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                          {'IdentifierName': 'Bytes'}]},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                                                                                      {'IdentifierName': 'Offset'}]},
                                                                                                                                                                                                                                                    {'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'bx'},
                                                                                                                    {'IdentifierName': 'NEWLINE'}]},
                                                                                              {'EqualsExpression': [{'IdentifierName': 'bx'},
                                                                                                                    {'IdentifierName': 'ESCAPE'}]}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                                                                                     {'IdentifierName': 'WriteByte'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'ESCAPE'}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'output'},
                                                                                                                                         {'IdentifierName': 'WriteByte'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'bx'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'left': {'name': {'identifier': 'offset'},
                                                                                                                         'scope': {'name': {'identifier': 'b'}}},
                                                                                                                'operator': 'PLUS',
                                                                                                                'right': {'name': {'identifier': 'i'}}},
                                                                                                      'name': {'name': {'identifier': 'bytes'},
                                                                                                               'scope': {'name': {'identifier': 'b'}}}},
                                                                                      'name': {'identifier': 'bx'},
                                                                                      'type': {'type': 'BYTE'}}]}},
                                                       {'condition': {'left': {'left': {'name': {'identifier': 'bx'}},
                                                                               'operator': 'EQUALS',
                                                                               'right': {'name': {'identifier': 'NEWLINE'}}},
                                                                      'operator': 'OR',
                                                                      'right': {'left': {'name': {'identifier': 'bx'}},
                                                                                'operator': 'EQUALS',
                                                                                'right': {'name': {'identifier': 'ESCAPE'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ESCAPE'}}],
                                                                                                    'name': {'identifier': 'writeByte'},
                                                                                                    'scope': {'name': {'identifier': 'out'}}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'bx'}}],
                                                                       'name': {'identifier': 'writeByte'},
                                                                       'scope': {'name': {'identifier': 'out'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'b'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'IdentifierName': 'codepoint'},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'CharacterLiteralExpression': 