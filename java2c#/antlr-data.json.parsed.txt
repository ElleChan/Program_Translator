[{'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                               {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'StructDecl'},
                                                                                                                                                                      {'PredefinedType': 'string'},
                                                                                                                                                                      {'IdentifierName': 'TokenPropertyRef'}]}]}]},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'tokenPropToModelMap'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'y'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TokenPropertyRef'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'c'},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'nodeContext'}]},
                                                                                                                                                                                                       {'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetTokenLabel'},
                                                                                                                                                                                                                                               {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                                                                                                                                                                                                                                 {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]}]}]}]},
                                                    {'ReturnStatement': [{'IdentifierName': '@ref'}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'Exception'}]},
                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                                                                                                                                          {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                                                                                                                                        {'ArgumentList': '()'}]},
                                                                                                                                                                                                                              {'IdentifierName': 'tool'}]},
                                                                                                                                                                                            {'IdentifierName': 'errMgr'}]},
                                                                                                                                                          {'IdentifierName': 'ToolError'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                                          {'IdentifierName': 'INTERNAL_ERROR'}]}]},
                                                                                                                                          {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'INTERNAL_ERROR'},
                                                                                                        'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                       {'name': {'identifier': 'e'}}],
                                                                                         'name': {'identifier': 'toolError'},
                                                                                         'scope': {'name': {'identifier': 'errMgr'},
                                                                                                   'scope': {'name': {'identifier': 'tool'},
                                                                                                             'scope': {'name': {'identifier': 'getGrammar'},
                                                                                                                       'scope': {'name': {'identifier': 'factory'}}}}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'e'},
                                                               'type': {'name': {'identifier': 'Exception'}}}}],
                               'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                         'scope': {'name': {'identifier': 'y'}}}],
                                                                                                          'name': {'identifier': 'get'},
                                                                                                          'scope': {'name': {'identifier': 'tokenPropToModelMap'}}},
                                                                                          'name': {'identifier': 'c'},
                                                                                          'type': {'name': {'identifier': 'Class'},
                                                                                                   'typeArguments': [{'extendedType': {'name': {'identifier': 'TokenPropertyRef'}}}]}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'StructDecl'}}},
                                                                                                                        {'type': {'name': {'identifier': 'String'}}}],
                                                                                                          'name': {'identifier': 'getConstructor'},
                                                                                                          'scope': {'name': {'identifier': 'c'}}},
                                                                                          'name': {'identifier': 'ctor'},
                                                                                          'type': {'name': {'identifier': 'Constructor'},
                                                                                                   'typeArguments': [{'extendedType': {'name': {'identifier': 'TokenPropertyRef'}}}]}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'nodeContext'}},
                                                                                                                        {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                        'scope': {'name': {'identifier': 'x'}}}],
                                                                                                                         'name': {'identifier': 'getTokenLabel'}}],
                                                                                                          'name': {'identifier': 'newInstance'},
                                                                                                          'scope': {'name': {'identifier': 'ctor'}}},
                                                                                          'name': {'identifier': 'ref'},
                                                                                          'type': {'name': {'identifier': 'TokenPropertyRef'}}}]}},
                                                           {'expression': {'name': {'identifier': 'ref'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ToolMessage'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ToolMessage'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'errorType'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'e'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Emit'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'errorType'}]},
                                                                                            {'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'errorType'}},
                                                                                           {'name': {'identifier': 'e'}},
                                                                                           {'name': {'identifier': 'args'}}],
                                                                             'type': {'name': {'identifier': 'ToolMessage'}}},
                                                             'name': {'identifier': 'msg'},
                                                             'type': {'name': {'identifier': 'ToolMessage'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'errorType'}},
                                                            {'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'emit'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'channelDefs'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ID'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'channelDefs'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                        {'IdentifierName': 'GetGrammar'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getGrammar'},
                                              'scope': {'name': {'identifier': 'delegate'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'r'},
                                                          {'IdentifierName': 'LeftRecursiveRule'}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftRecursiveRuleFunction'},
                                                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                        {'Argument': [{'CastExpression': [{'IdentifierName': 'LeftRecursiveRule'},
                                                                                                                                                          {'IdentifierName': 'r'}]}]}]}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                       {'IdentifierName': 'name'}]},
                                                                                                                                     {'IdentifierName': 'Contains'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ATNSimulator'},
                                                                                                                                                                     {'IdentifierName': 'RuleLfVariantMarker'}]}]}]}]},
                                                                         {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftFactoredRuleFunction'},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                         {'Argument': [{'IdentifierName': 'r'}]}]}]}]}]},
                                                                         {'ElseClause': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                        {'IdentifierName': 'name'}]},
                                                                                                                                                                      {'IdentifierName': 'Contains'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ATNSimulator'},
                                                                                                                                                                                                      {'IdentifierName': 'RuleNolfVariantMarker'}]}]}]}]},
                                                                                                          {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftUnfactoredRuleFunction'},
                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                                          {'Argument': [{'IdentifierName': 'r'}]}]}]}]}]},
                                                                                                          {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RuleFunction'},
                                                                                                                                                                                             {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RuleFunction'},
                                                                                                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                                                                                                                                            {'Argument': [{'IdentifierName': 'r'}]}]}]}]}]}]}]},
                                                                                                                                     {'ReturnStatement': [{'IdentifierName': 'rf'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'r'}},
                                             'type': {'name': {'identifier': 'LeftRecursiveRule'}}},
                               'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{},
                                                                                                                        {'name': {'identifier': 'r'}}],
                                                                                                          'type': {'name': {'identifier': 'RuleFunction'}}},
                                                                                          'name': {'identifier': 'rf'},
                                                                                          'type': {'name': {'identifier': 'RuleFunction'}}}]}},
                                                           {'expression': {'name': {'identifier': 'rf'}}}]},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{},
                                                                                         {'expression': {'name': {'identifier': 'r'}},
                                                                                          'type': {'name': {'identifier': 'LeftRecursiveRule'}}}],
                                                                           'type': {'name': {'identifier': 'LeftRecursiveRuleFunction'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                                         {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                {'PredefinedType': 'int'}]}]}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                                                                                                                      {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                                                                                             {'PredefinedType': 'int'}]}]}]}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': '_SplitArgumentList'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                            {'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                            {'Argument': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'separatorChar'}]},
                                                                                            {'Argument': [{'IdentifierName': 'args'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'args'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'Pair'},
                                                                                                         'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                                           {'name': {'identifier': 'Integer'}}]}]}},
                                                             'name': {'identifier': 'args'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Pair'},
                                                                                         'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                           {'name': {'identifier': 'Integer'}}]}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 's'}},
                                                            {'value': '0'},
                                                            {'expression': {'value': '1'},
                                                             'operator': 'MINUS'},
                                                            {'name': {'identifier': 'separatorChar'}},
                                                            {'name': {'identifier': 'args'}}],
                                              'name': {'identifier': '_splitArgumentList'}}},
                              {'expression': {'name': {'identifier': 'args'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                            {'IdentifierName': 'DefineActionInAlt'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]},
                                                                                            {'Argument': [{'IdentifierName': 'action'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                  {'IdentifierName': 'resolver'}]},
                                                                                {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                               {'IdentifierName': 'alt'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'currentOuterAltNumber'}},
                                                            {'name': {'identifier': 'action'}}],
                                              'name': {'identifier': 'defineActionInAlt'},
                                              'scope': {'name': {'identifier': 'currentRule'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'resolver'},
                                                         'scope': {'name': {'identifier': 'action'}}},
                                              'value': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                        'name': {'name': {'identifier': 'alt'},
                                                                 'scope': {'name': {'identifier': 'currentRule'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]},
                                         {'LessThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                        {'IdentifierName': 'numberOfAlts'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refs'},
                                                                                                                                         {'IdentifierName': 'UnionWith'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                           {'IdentifierName': 'labelDefs'}]},
                                                                                                                                                                         {'IdentifierName': 'Keys'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refs'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'refs'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashSet'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'refs'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'keySet'},
                                                                                      'scope': {'name': {'identifier': 'labelDefs'},
                                                                                                'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                          'name': {'name': {'identifier': 'alt'}}}}}],
                                                                       'name': {'identifier': 'addAll'},
                                                                       'scope': {'name': {'identifier': 'refs'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'numberOfAlts'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '1'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'condition': {'name': {'identifier': 'isEmpty'},
                                             'scope': {'name': {'identifier': 'refs'}}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'name': {'identifier': 'refs'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recOpAlts'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recOpAlts'},
                                                                                                                                                                                                                                                       {'IdentifierName': 'Count'}]},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'LeftRecursiveRuleAltInfo'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'recOpAlts'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alts'},
                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]}]}]},
                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'altInfo'},
                                                                                                                                                   {'IdentifierName': 'altNum'}]}]}]},
                                                        {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'alt'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'alts'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'},
                                                      'scope': {'name': {'identifier': 'recOpAlts'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'type': 'INT'},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'size'},
                                                                                                                'scope': {'name': {'identifier': 'recOpAlts'}}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'alts'},
                                                             'type': {'componentType': {'type': 'INT'},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '1'},
                                                             'name': {'identifier': 'alt'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'alt'}},
                                                                                  'name': {'name': {'identifier': 'alts'}}},
                                                                       'value': {'name': {'identifier': 'altNum'},
                                                                                 'scope': {'name': {'identifier': 'altInfo'}}}}},
                                                       {'expression': {'expression': {'name': {'identifier': 'alt'}},
                                                                       'operator': 'POSTFIX_INCREMENT'}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'recOpAlts'}}},
                               'variable': {'variables': [{'name': {'identifier': 'altInfo'},
                                                           'type': {'name': {'identifier': 'LeftRecursiveRuleAltInfo'}}}]}},
                              {'expression': {'name': {'identifier': 'alts'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'maxTokenType'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'maxTokenType'}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'maxTokenType'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'maxTokenType'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                          {'IdentifierName': 'type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                          {'IdentifierName': 'TOKEN_LABEL'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'},
                                                                'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'TOKEN_LABEL'},
                                                                 'scope': {'name': {'identifier': 'LabelType'}}}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Antlr4'},
                                                                                                                                                  {'IdentifierName': 'Runtime'}]},
                                                                                                                {'IdentifierName': 'Lexer'}]},
                                                                              {'IdentifierName': 'MaxCharValue'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'MAX_CHAR_VALUE'},
                                              'scope': {'name': {'identifier': 'Lexer'},
                                                        'scope': {'name': {'identifier': 'runtime'},
                                                                  'scope': {'name': {'identifier': 'v4'},
                                                                            'scope': {'name': {'identifier': 'antlr'},
                                                                                      'scope': {'name': {'identifier': 'org'}}}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'TokenRef'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'label'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                             {'IdentifierName': 'TokenRef'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'label'}},
                                                                                           {'name': {'identifier': 'args'}}],
                                                                             'name': {'identifier': 'tokenRef'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'ops'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                                 'name': {'identifier': 'tokenRef'},
                                                                                 'scope': {'name': {'identifier': 'ext'}}}}}]},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'RangeAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'RangeAST'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'prev'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenNameToTypeMap'},
                                                                                                    {'IdentifierName': 'TryGetValue'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                    {'Argument': [{'IdentifierName': 'prev'}]}]}]},
                                        {'ReturnStatement': [{'IdentifierName': 'prev'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tokenNameToTypeMap'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                                {'IdentifierName': 'ttype'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetTokenForType'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ttype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'name'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'maxTokenType'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                            {'IdentifierName': 'Max'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxTokenType'}]},
                                                                                                                            {'Argument': [{'IdentifierName': 'ttype'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ttype'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'tokenNameToTypeMap'}}},
                                                             'name': {'identifier': 'prev'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'prev'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'prev'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'}},
                                                            {'name': {'identifier': 'ttype'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'tokenNameToTypeMap'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ttype'}},
                                                            {'name': {'identifier': 'name'}}],
                                              'name': {'identifier': 'setTokenForType'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'maxTokenType'}},
                                              'value': {'arguments': [{'name': {'identifier': 'maxTokenType'}},
                                                                      {'name': {'identifier': 'ttype'}}],
                                                        'name': {'identifier': 'max'},
                                                        'scope': {'name': {'identifier': 'Math'}}}}},
                              {'expression': {'name': {'identifier': 'ttype'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'GrammarError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'SourceName'}]},
                                                                                            {'Argument': [{'IdentifierName': 'token'}]},
                                                                                            {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'etype'}},
                                                            {'name': {'identifier': 'getSourceName'}},
                                                            {'name': {'identifier': 'token'}},
                                                            {'name': {'identifier': 'args'}}],
                                              'name': {'identifier': 'grammarError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRStringStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ANTLRStringStream'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                                                                                                                              {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'Line'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'Line'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionSplitter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ActionSplitter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]},
                                                                                                                                                                              {'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                  {'IdentifierName': 'chunks'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'splitter'},
                                                                                                                                            {'IdentifierName': 'GetActionTokens'}]},
                                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'actionToken'}}}],
                                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getCharPositionInLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setCharPositionInLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'in'}},
                                                                                           {}],
                                                                             'type': {'name': {'identifier': 'ActionSplitter'}}},
                                                             'name': {'identifier': 'splitter'},
                                                             'type': {'name': {'identifier': 'ActionSplitter'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'chunks'},
                                                         'scope': {'name': {'identifier': 'node'}}},
                                              'value': {'name': {'identifier': 'getActionTokens'},
                                                        'scope': {'name': {'identifier': 'splitter'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetRecognizerFileName'},
                                                                      {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'getRecognizerFileName'},
                                              'scope': {'name': {'identifier': 'getTarget'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                        {'IdentifierName': 'GetCurrentRuleFunction'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getCurrentRuleFunction'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'COMMON_CONSTANTS'},
                                                                              {'IdentifierName': 'Keys'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'keySet'},
                                              'scope': {'name': {'identifier': 'COMMON_CONSTANTS'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'ParenthesizedExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'RULE_LIST_LABEL'}]}]},
                                                                                                                            {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'TOKEN_LIST_LABEL'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'inner': {'left': {'left': {'name': {'identifier': 'type'},
                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                           'operator': 'EQUALS',
                                                                           'right': {'name': {'identifier': 'RULE_LIST_LABEL'},
                                                                                     'scope': {'name': {'identifier': 'LabelType'}}}},
                                                                  'operator': 'OR',
                                                                  'right': {'left': {'name': {'identifier': 'type'},
                                                                                     'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                            'operator': 'EQUALS',
                                                                            'right': {'name': {'identifier': 'TOKEN_LIST_LABEL'},
                                                                                      'scope': {'name': {'identifier': 'LabelType'}}}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'RulePostamble'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'function'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'r'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'RulePostamble'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'function'}},
                                                                                           {'name': {'identifier': 'r'}}],
                                                                             'name': {'identifier': 'rulePostamble'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'ops'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                 'name': {'identifier': 'rulePostamble'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'retvals'},
                                                                                {'IdentifierName': 't'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'retvals'}},
                                              'value': {'name': {'identifier': 't'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'int'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                                                                                                                                                                                                       {'IdentifierName': 'Count'}]},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LeftRecursiveRuleAltInfo'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alts'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'AddExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]}]},
                                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'altInfo'},
                                                                                                                                               {'IdentifierName': 'altNum'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'alts'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'},
                                                      'scope': {'name': {'identifier': 'recPrimaryAlts'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'type': 'INT'},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'size'},
                                                                                                                'scope': {'name': {'identifier': 'recPrimaryAlts'}}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'alts'},
                                                             'type': {'componentType': {'type': 'INT'},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'recPrimaryAlts'}}},
                                                                                      'name': {'identifier': 'altInfo'},
                                                                                      'type': {'name': {'identifier': 'LeftRecursiveRuleAltInfo'}}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'left': {'name': {'identifier': 'i'}},
                                                                                            'operator': 'PLUS',
                                                                                            'right': {'value': '1'}},
                                                                                  'name': {'name': {'identifier': 'alts'}}},
                                                                       'value': {'name': {'identifier': 'altNum'},
                                                                                 'scope': {'name': {'identifier': 'altInfo'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'recPrimaryAlts'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'alts'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleID'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'SourceName'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                              {'IdentifierName': 'IsLexer'}]},
                                                                                            {'ArgumentList': '()'}]},
                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                              {'IdentifierName': 'IsLower'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleID'},
                                                                                                                                                                                           {'IdentifierName': 'Text'}]},
                                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'PARSER_RULE_REF_IN_LEXER_RULE'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'ruleID'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleID'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'currentRuleName'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'ruleID'}}}},
                                                             'name': {'identifier': 'fileName'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'isLexer'},
                                                      'scope': {'name': {'identifier': 'g'}}},
                                             'operator': 'AND',
                                             'right': {'arguments': [{'arguments': [{'value': '0'}],
                                                                      'name': {'identifier': 'charAt'},
                                                                      'scope': {'name': {'identifier': 'getText'},
                                                                                'scope': {'name': {'identifier': 'ruleID'}}}}],
                                                       'name': {'identifier': 'isLowerCase'},
                                                       'scope': {'name': {'identifier': 'Character'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'PARSER_RULE_REF_IN_LEXER_RULE'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'ruleID'}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'ruleID'}}},
                                                                                         {'name': {'identifier': 'currentRuleName'}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rulerefs'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@ref'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'currentRule'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                                                                                         {'IdentifierName': 'alt'}]},
                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]},
                                                                                                                                                                          {'IdentifierName': 'ruleRefs'}]},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': '@ref'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ref'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'rulerefs'}}}},
                              {'condition': {'left': {'name': {'identifier': 'currentRule'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'ref'}}},
                                                                                         {'name': {'identifier': 'ref'}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'ruleRefs'},
                                                                                     'scope': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                                               'name': {'name': {'identifier': 'alt'},
                                                                                                        'scope': {'name': {'identifier': 'currentRule'}}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                              {'IdentifierName': 'IsLexer'}]},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'MODE_NOT_IN_LEXER'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                        {'IdentifierName': 'fileName'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                        {'IdentifierName': 'Token'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                          {'IdentifierName': 'Token'}]},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'g'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isLexer'},
                                                            'scope': {'name': {'identifier': 'g'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'MODE_NOT_IN_LEXER'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'},
                                                                                          'scope': {'name': {'identifier': 'g'}}},
                                                                                         {'name': {'identifier': 'token'},
                                                                                          'scope': {'name': {'identifier': 'ID'}}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'token'},
                                                                                                    'scope': {'name': {'identifier': 'ID'}}}},
                                                                                         {'name': {'identifier': 'g'}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNumRules'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'rules'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'rules'}}],
                                              'name': {'identifier': 'checkNumRules'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LexerFile'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'name': {'identifier': 'fileName'}}],
                                              'type': {'name': {'identifier': 'LexerFile'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LabelElementPair'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'element'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'op'},
                                                                                                                                                                                                                              {'IdentifierName': 'Type'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                                                             {'IdentifierName': 'alt'}]},
                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]},
                                                                                                                                              {'IdentifierName': 'labelDefs'}]},
                                                                                                            {'IdentifierName': 'Map'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'lp'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'g'}},
                                                                                           {'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'element'}},
                                                                                           {'name': {'identifier': 'getType'},
                                                                                            'scope': {'name': {'identifier': 'op'}}}],
                                                                             'type': {'name': {'identifier': 'LabelElementPair'}}},
                                                             'name': {'identifier': 'lp'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'ID'}}},
                                                            {'name': {'identifier': 'lp'}}],
                                              'name': {'identifier': 'map'},
                                              'scope': {'name': {'identifier': 'labelDefs'},
                                                        'scope': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                  'name': {'name': {'identifier': 'alt'},
                                                                           'scope': {'name': {'identifier': 'currentRule'}}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeBlockForAlt'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Epsilon'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'outerMost'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'blk'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Epsilon'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'blk'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'alt'}},
                                                                                           {'name': {'identifier': 'outerMost'}}],
                                                                             'name': {'identifier': 'epsilon'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'blk'},
                                                             'type': {'name': {'identifier': 'CodeBlockForAlt'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'blk'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'blk'}}],
                                                                 'name': {'identifier': 'epsilon'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ast'},
                                                                                                        {'IdentifierName': 'GetOptionString'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                              'name': {'identifier': 'getOptionString'},
                                              'scope': {'name': {'identifier': 'ast'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenListDecl'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetTarget'},
                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                      {'IdentifierName': 'GetListLabel'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'label'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'arguments': [{'name': {'identifier': 'label'}}],
                                                             'name': {'identifier': 'getListLabel'},
                                                             'scope': {'name': {'identifier': 'getTarget'},
                                                                       'scope': {'name': {'identifier': 'gen'}}}}],
                                              'type': {'name': {'identifier': 'TokenListDecl'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'currentOuterMostAlt'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'currentOuterMostAlt'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'literal'},
                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                 {'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'literal'},
                                                                                                                           {'IdentifierName': 'Length'}]},
                                                                                         {'NumericLiteralExpression': '3'}]}]},
                                        {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetCharValueFromCharInGrammarLiteral'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'literal'},
                                                                                                                                                                  {'IdentifierName': 'Substring'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]},
                                                                                                                                                  {'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'literal'},
                                                                                                                                                                                                                          {'IdentifierName': 'Length'}]},
                                                                                                                                                                                        {'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'literal'}},
                                                      'operator': 'EQUALS',
                                                      'right': {}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'length'},
                                                                'scope': {'name': {'identifier': 'literal'}}},
                                                       'operator': 'LESS',
                                                       'right': {'value': '3'}}},
                               'thenStmt': {'expression': {'expression': {'value': '1'},
                                                           'operator': 'MINUS'}}},
                              {'expression': {'arguments': [{'arguments': [{'value': '1'},
                                                                           {'left': {'name': {'identifier': 'length'},
                                                                                     'scope': {'name': {'identifier': 'literal'}}},
                                                                            'operator': 'MINUS',
                                                                            'right': {'value': '1'}}],
                                                             'name': {'identifier': 'substring'},
                                                             'scope': {'name': {'identifier': 'literal'}}}],
                                              'name': {'identifier': 'getCharValueFromCharInGrammarLiteral'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ResolvesToToken'},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                    {'Argument': [{'IdentifierName': 'node'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleRefs'},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                  {'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'ruleRefs'},
                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                          {'IdentifierName': 'type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                          {'IdentifierName': 'RULE_LABEL'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'x'}},
                                                           {'name': {'identifier': 'node'}}],
                                             'name': {'identifier': 'resolvesToToken'}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'x'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'ruleRefs'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'},
                                                                'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                 'scope': {'name': {'identifier': 'LabelType'}}}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'gen'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'gen'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Lexer'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'IdentifierName': 'file'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'name': {'identifier': 'file'}}],
                                              'type': {'name': {'identifier': 'Lexer'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'retvals'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Attribute'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'retvals'},
                                                                                                                                                                                                                      {'IdentifierName': 'Get'}]},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'y'}]}]}]}]}]}]}]},
                                                   {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'a'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                    {'ReturnStatement': [{'IdentifierName': 'a'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AttributeDict'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetPredefinedScope'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                                                          {'IdentifierName': 'RULE_LABEL'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                        {'IdentifierName': 'Get'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'y'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'retvals'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'y'}}],
                                                                                                          'name': {'identifier': 'get'},
                                                                                                          'scope': {'name': {'identifier': 'retvals'}}},
                                                                                          'name': {'identifier': 'a'},
                                                                                          'type': {'name': {'identifier': 'Attribute'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'a'}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'expression': {'name': {'identifier': 'a'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'RULE_LABEL'},
                                                                                            'scope': {'name': {'identifier': 'LabelType'}}}],
                                                                             'name': {'identifier': 'getPredefinedScope'}},
                                                             'name': {'identifier': 'd'},
                                                             'type': {'name': {'identifier': 'AttributeDict'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'y'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'd'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'options'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                             {'IdentifierName': 'GrammarAST'}]}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'options'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'options'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'emptyMap'},
                                                                           'scope': {'name': {'identifier': 'Collections'}}}}]}},
                              {'expression': {'name': {'identifier': 'options'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'Attribute'},
                                             {'IdentifierName': 'attrList'},
                                             {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddDecl'},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'expression': {'arguments': [{'name': {'identifier': 'a'}}],
                                                       'name': {'identifier': 'addDecl'}}},
                               'iterable': {'name': {'identifier': 'attrList'}},
                               'variable': {'variables': [{'name': {'identifier': 'a'},
                                                           'type': {'name': {'identifier': 'Attribute'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringCollector'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringCollector'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                                                            {'IdentifierName': 'VisitGrammar'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                              {'IdentifierName': 'strings'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'LinkedHashSet'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'strings'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                                            'scope': {'name': {'identifier': 'ref'}}}],
                                                                                                                                             'name': {'identifier': 'add'},
                                                                                                                                             'scope': {'name': {'identifier': 'strings'}}}}]},
                                                                                                     'name': {'identifier': 'stringRef'},
                                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                                     'name': {'identifier': 'ref'},
                                                                                                                     'type': {'name': {'identifier': 'TerminalAST'}}}],
                                                                                                     'type': {}},
                                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                                     'body': {'statements': [{'expression': {'name': {'identifier': 'errMgr'},
                                                                                                                                             'scope': {'name': {'identifier': 'tool'}}}}]},
                                                                                                     'name': {'identifier': 'getErrorManager'},
                                                                                                     'type': {'name': {'identifier': 'ErrorManager'}}}],
                                                                             'type': {'name': {'identifier': 'GrammarTreeVisitor'}}},
                                                             'name': {'identifier': 'collector'},
                                                             'type': {'name': {'identifier': 'GrammarTreeVisitor'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ast'}}],
                                              'name': {'identifier': 'visitGrammar'},
                                              'scope': {'name': {'identifier': 'collector'}}}},
                              {'expression': {'name': {'identifier': 'strings'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IntervalSet'},
                                                                                                        {'IdentifierName': 'Of'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Lexer'},
                                                                                                                                        {'IdentifierName': 'MinCharValue'}]}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetMaxCharValue'},
                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'MIN_CHAR_VALUE'},
                                                             'scope': {'name': {'identifier': 'Lexer'}}},
                                                            {'name': {'identifier': 'getMaxCharValue'}}],
                                              'name': {'identifier': 'of'},
                                              'scope': {'name': {'identifier': 'IntervalSet'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'StringRef'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'label'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                             {'IdentifierName': 'StringRef'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'label'}}],
                                                                             'name': {'identifier': 'stringRef'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'ops'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                                 'name': {'identifier': 'stringRef'},
                                                                                 'scope': {'name': {'identifier': 'ext'}}}}}]},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                                      {'IdentifierName': 'resolver'}]},
                                                                                                    {'IdentifierName': 'ResolvesToLabel'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                    {'Argument': [{'IdentifierName': 'node'}]}]}]},
                                        {'ReturnStatement': [{'IdentifierName': 'x'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                    {'IdentifierName': 'GetTarget'}]},
                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                        {'IdentifierName': 'GetImplicitRuleLabel'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'x'}},
                                                           {'name': {'identifier': 'node'}}],
                                             'name': {'identifier': 'resolvesToLabel'},
                                             'scope': {'name': {'identifier': 'resolver'},
                                                       'scope': {'name': {'identifier': 'node'}}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'x'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'getImplicitRuleLabel'},
                                              'scope': {'name': {'identifier': 'getTarget'},
                                                        'scope': {'name': {'identifier': 'getGenerator'},
                                                                  'scope': {'name': {'identifier': 'factory'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeBlockForAlt'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Alternative'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'outerMost'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'IdentifierName': 'outerMost'},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentOuterMostAlternativeBlock'},
                                                                                                            {'CastExpression': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                                                                                {'IdentifierName': 'blk'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'blk'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Alternative'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'blk'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'outerMost'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'alt'}},
                                                                                           {'name': {'identifier': 'outerMost'}}],
                                                                             'name': {'identifier': 'alternative'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'blk'},
                                                             'type': {'name': {'identifier': 'CodeBlockForAlt'}}}]}},
                              {'condition': {'name': {'identifier': 'outerMost'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'currentOuterMostAlternativeBlock'}},
                                                                           'value': {'expression': {'name': {'identifier': 'blk'}},
                                                                                     'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'blk'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'blk'}},
                                                                               {'name': {'identifier': 'outerMost'}}],
                                                                 'name': {'identifier': 'alternative'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                           {'IdentifierName': 'ToLower'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                           {'IdentifierName': 'Substring'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'arguments': [{'value': '0'}],
                                                                      'name': {'identifier': 'charAt'},
                                                                      'scope': {'name': {'identifier': 's'}}}],
                                                       'name': {'identifier': 'toLowerCase'},
                                                       'scope': {'name': {'identifier': 'Character'}}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'value': '1'}],
                                                        'name': {'identifier': 'substring'},
                                                        'scope': {'name': {'identifier': 's'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                          {'IdentifierName': 'GetTokenType'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                                                                                                                          {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'left'},
                                                                                                            {'IdentifierName': 'AddTransition'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'AtomTransition'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'right'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'ttype'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                  {'IdentifierName': 'atnState'}]},
                                                                                {'IdentifierName': 'left'}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Handle'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'left'}]},
                                                                                            {'Argument': [{'IdentifierName': 'right'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'node'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'left'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'node'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'right'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'node'}}}],
                                                                             'name': {'identifier': 'getTokenType'},
                                                                             'scope': {'name': {'identifier': 'g'}}},
                                                             'name': {'identifier': 'ttype'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'right'}},
                                                                           {'name': {'identifier': 'ttype'}}],
                                                             'type': {'name': {'identifier': 'AtomTransition'}}}],
                                              'name': {'identifier': 'addTransition'},
                                              'scope': {'name': {'identifier': 'left'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'atnState'},
                                                         'scope': {'name': {'identifier': 'node'}}},
                                              'value': {'name': {'identifier': 'left'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'left'}},
                                                            {'name': {'identifier': 'right'}}],
                                              'type': {'name': {'identifier': 'Handle'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReportError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'reportError'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'ATNState'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'atn'},
                                                                                                                                                                {'IdentifierName': 'states'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'states'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'states'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'state'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                     {'Block': [{'ContinueStatement': 'continue;'}]}]},
                                                    {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'i'},
                                                                                              {'IdentifierName': 'current'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'state'},
                                                                                                                                                                           {'IdentifierName': 'stateNumber'}]},
                                                                                                                                         {'IdentifierName': 'current'}]}]},
                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'states'},
                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'current'}]}]}]},
                                                                                                                                         {'IdentifierName': 'state'}]}]},
                                                                                {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'states'},
                                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                         {'NullLiteralExpression': 'null'}]}]}]}]},
                                                    {'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'current'}]}]}]}]},
                       {'WhileStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'states'},
                                                                                                        {'IdentifierName': 'Count'}]},
                                                                      {'IdentifierName': 'current'}]},
                                           {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'states'},
                                                                                                                                {'IdentifierName': 'RemoveAt'}]},
                                                                                              {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'states'},
                                                                                                                                                                                        {'IdentifierName': 'Count'}]},
                                                                                                                                                      {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'ATNState'}}]}},
                                                             'name': {'identifier': 'compressed'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'ATNState'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 's'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'compressed'}}}},
                                                                                    {'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'stateNumber'},
                                                                                                               'scope': {'name': {'identifier': 's'}}},
                                                                                                    'value': {'name': {'identifier': 'i'}}}},
                                                                                    {'expression': {'expression': {'name': {'identifier': 'i'}},
                                                                                                    'operator': 'POSTFIX_INCREMENT'}}]}}]},
                               'iterable': {'name': {'identifier': 'states'},
                                            'scope': {'name': {'identifier': 'atn'}}},
                               'variable': {'variables': [{'name': {'identifier': 's'},
                                                           'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'states'},
                                                        'scope': {'name': {'identifier': 'atn'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'compressed'}}],
                                              'name': {'identifier': 'addAll'},
                                              'scope': {'name': {'identifier': 'states'},
                                                        'scope': {'name': {'identifier': 'atn'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                          {'IdentifierName': 'GetTokenName'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ttype'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                      {'IdentifierName': 'INVALID_TOKEN_NAME'}]},
                                                                                                    {'IdentifierName': 'Equals'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ttype'},
                                                                                                                                    {'IdentifierName': 'ToString'}]},
                                                                                                  {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'name'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ttype'}}],
                                                                             'name': {'identifier': 'getTokenName'},
                                                                             'scope': {'name': {'identifier': 'g'}}},
                                                             'name': {'identifier': 'name'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'arguments': [{'name': {'identifier': 'name'}}],
                                             'name': {'identifier': 'equals'},
                                             'scope': {'name': {'identifier': 'INVALID_TOKEN_NAME'},
                                                       'scope': {'name': {'identifier': 'Grammar'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ttype'}}],
                                                                           'name': {'identifier': 'valueOf'},
                                                                           'scope': {'name': {'identifier': 'String'}}}}]}},
                              {'expression': {'name': {'identifier': 'name'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'inFragmentRule'},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'Token'}]},
                                                                                                                                                                                                                              {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                                            {'IdentifierName': 'SourceName'}]}]}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'currentRuleName'}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'FRAGMENT_ACTION_IGNORED'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                                                                        {'IdentifierName': 'Token'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'ruleName'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'inFragmentRule'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                                                          'scope': {'name': {'identifier': 'getInputStream'},
                                                                                                                    'scope': {'name': {'identifier': 'token'},
                                                                                                                              'scope': {'name': {'identifier': 'action'}}}}},
                                                                                          'name': {'identifier': 'fileName'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentRuleName'}},
                                                                                          'name': {'identifier': 'ruleName'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'FRAGMENT_ACTION_IGNORED'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'token'},
                                                                                          'scope': {'name': {'identifier': 'action'}}},
                                                                                         {'name': {'identifier': 'ruleName'}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'preamble'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'preamble'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckImport'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkImport'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'LabelElementPair'}]}]},
                                                                               {'VariableDeclarator': 'labels'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetElementLabelDefs'},
                                                                                                                                                        {'ArgumentList': '()'}]},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'labels'}]}]}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'labels'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'labels'},
                                                                                          {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'getElementLabelDefs'}}},
                                                             'name': {'identifier': 'labels'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'LabelElementPair'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'labels'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'arguments': [{'value': '0'}],
                                                           'name': {'identifier': 'get'},
                                                           'scope': {'name': {'identifier': 'labels'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTErrorNode'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]},
                                                                                            {'Argument': [{'IdentifierName': 'start'}]},
                                                                                            {'Argument': [{'IdentifierName': 'stop'}]},
                                                                                            {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'input'}},
                                                            {'name': {'identifier': 'start'}},
                                                            {'name': {'identifier': 'stop'}},
                                                            {'name': {'identifier': 'e'}}],
                                              'type': {'name': {'identifier': 'GrammarASTErrorNode'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'iteration'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'iteration'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iteration'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'iteration'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'iteration'}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'iteration'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'decisionDFAs'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'decision'}]}]}]},
                                                                                {'IdentifierName': 'lookaheadDFA'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'decision'}},
                                                            {'name': {'identifier': 'lookaheadDFA'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'decisionDFAs'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Wildcard'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'labelAST'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                             {'IdentifierName': 'Wildcard'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ast'}},
                                                                                           {'name': {'identifier': 'labelAST'}}],
                                                                             'name': {'identifier': 'wildcard'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'ops'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                                 'name': {'identifier': 'wildcard'},
                                                                                 'scope': {'name': {'identifier': 'ext'}}}}}]},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetBaseListenerFileName'},
                                                                      {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'getBaseListenerFileName'},
                                              'scope': {'name': {'identifier': 'getTarget'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'target'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'LoadLanguageTarget'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'language'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'target'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'target'}},
                                                      'operator': 'EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'arguments': [{'name': {'identifier': 'language'}}],
                                                       'name': {'identifier': 'targetExists'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'language'}}],
                                                                           'name': {'identifier': 'loadLanguageTarget'}}}]}},
                              {'expression': {'name': {'identifier': 'target'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetNonImportDependenciesFileList'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Grammar'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                          {'IdentifierName': 'GetAllImportedGrammars'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'imports'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ForEachStatement': [{'IdentifierName': 'Grammar'},
                                                                         {'IdentifierName': 'imports'},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                                                                                                             {'IdentifierName': 'libDirectory'}]}]}]}]}]},
                                                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GroomQualifiedFileName'},
                                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'libdir'}]},
                                                                                                                                                                                                                                       {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                                                                                       {'IdentifierName': 'fileName'}]}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'files'},
                                                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'files'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'files'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getNonImportDependenciesFileList'}},
                                                             'name': {'identifier': 'files'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'File'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getAllImportedGrammars'},
                                                                             'scope': {'name': {'identifier': 'g'}}},
                                                             'name': {'identifier': 'imports'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Grammar'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'imports'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'libDirectory'},
                                                                                                                                   'scope': {'name': {'identifier': 'tool'}}},
                                                                                                                   'name': {'identifier': 'libdir'},
                                                                                                                   'type': {'name': {'identifier': 'String'}}}]}},
                                                                                    {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'libdir'}},
                                                                                                                                                 {'name': {'identifier': 'fileName'},
                                                                                                                                                  'scope': {'name': {'identifier': 'g'}}}],
                                                                                                                                   'name': {'identifier': 'groomQualifiedFileName'}},
                                                                                                                   'name': {'identifier': 'fileName'},
                                                                                                                   'type': {'name': {'identifier': 'String'}}}]}},
                                                                                    {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'fileName'}}],
                                                                                                                   'type': {'name': {'identifier': 'File'}}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'files'}}}}]},
                                                            'iterable': {'name': {'identifier': 'imports'}},
                                                            'variable': {'variables': [{'name': {'identifier': 'g'},
                                                                                        'type': {'name': {'identifier': 'Grammar'}}}]}}]}},
                              {'condition': {'name': {'identifier': 'isEmpty'},
                                             'scope': {'name': {'identifier': 'files'}}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'expression': {'name': {'identifier': 'files'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarRootAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'GrammarRootAST'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IdentifierName': 'outerMost'},
                                        {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                                           {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                             {'Argument': [{'IdentifierName': 'alt'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'CodeBlockForAlt'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'outerMost'}},
                               'thenStmt': {'expression': {'arguments': [{},
                                                                         {'name': {'identifier': 'alt'}}],
                                                           'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}}},
                              {'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'CodeBlockForAlt'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'RecognitionException'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                            {'IdentifierName': 'GetCause'}]},
                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'getCause'},
                                                             'scope': {}},
                                              'type': {'name': {'identifier': 'RecognitionException'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CheckOptions'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                          {'IdentifierName': 'ast'}]}]},
                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                                          {'IdentifierName': 'Token'}]}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ast'},
                                                                                            'scope': {'name': {'identifier': 'g'}}},
                                                                                           {'name': {'identifier': 'token'},
                                                                                            'scope': {'name': {'identifier': 'ID'}}},
                                                                                           {'name': {'identifier': 'valueAST'}}],
                                                                             'name': {'identifier': 'checkOptions'}},
                                                             'name': {'identifier': 'ok'},
                                                             'type': {'type': 'BOOLEAN'}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ActionAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'ActionAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetVisitorFileName'},
                                                                      {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'getVisitorFileName'},
                                              'scope': {'name': {'identifier': 'getTarget'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'ParenthesizedExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'RULE_LIST_LABEL'}]}]},
                                                                                                                            {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'TOKEN_LIST_LABEL'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'inner': {'left': {'left': {'name': {'identifier': 'type'},
                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                           'operator': 'EQUALS',
                                                                           'right': {'name': {'identifier': 'RULE_LIST_LABEL'},
                                                                                     'scope': {'name': {'identifier': 'LabelType'}}}},
                                                                  'operator': 'OR',
                                                                  'right': {'left': {'name': {'identifier': 'type'},
                                                                                     'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                            'operator': 'EQUALS',
                                                                            'right': {'name': {'identifier': 'TOKEN_LIST_LABEL'},
                                                                                      'scope': {'name': {'identifier': 'LabelType'}}}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Rule'},
                                                                               {'VariableDeclarator': 'rule'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rules'},
                                                                                                    {'IdentifierName': 'TryGetValue'}]},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                    {'IdentifierName': 'name'}]}]},
                                                                                    {'Argument': [{'IdentifierName': 'rule'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'rules'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                        {'IdentifierName': 'name'}]}]}]}]},
                                                                                {'IdentifierName': 'r'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'index'}]},
                                                                                {'PostIncrementExpression': [{'IdentifierName': 'ruleNumber'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'indexToRule'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'name'},
                                                                     'scope': {'name': {'identifier': 'r'}}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'rules'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'r'}}},
                                                            {'name': {'identifier': 'r'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'rules'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'index'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'expression': {'name': {'identifier': 'ruleNumber'}},
                                                        'operator': 'POSTFIX_INCREMENT'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'r'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'indexToRule'}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineMax'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'combineMin'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}}],
                                                             'name': {'identifier': 'combineMax'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}}],
                                                             'name': {'identifier': 'combineMin'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'cmdLineOptions'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cmdLineOptions'},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'cmdLineOptions'},
                                                                                                     {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                                          {'IdentifierName': 'GetOptionString'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'value'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'defaultOptions'},
                                                                                                                                        {'IdentifierName': 'TryGetValue'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'value'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'cmdLineOptions'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'arguments': [{'name': {'identifier': 'key'}}],
                                                       'name': {'identifier': 'containsKey'},
                                                       'scope': {'name': {'identifier': 'cmdLineOptions'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                           'name': {'identifier': 'get'},
                                                                           'scope': {'name': {'identifier': 'cmdLineOptions'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                             'name': {'identifier': 'getOptionString'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'value'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'value'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'value'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'defaultOptions'}}}}}]}},
                              {'expression': {'name': {'identifier': 'value'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stringLiteralToTypeMap'},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'lit'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'stringLiteralToTypeMap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'lit'}]}]}]},
                                                                                                            {'IdentifierName': 'ttype'}]}]},
                                                   {'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'ttype'},
                                                                                                      {'SimpleMemberAccessExpression': [{'IdentifierName': 'typeToStringLiteralList'},
                                                                                                                                        {'IdentifierName': 'Count'}]}]},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Utils'},
                                                                                                                                                                    {'IdentifierName': 'SetSize'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'typeToStringLiteralList'}]},
                                                                                                                                                    {'Argument': [{'AddExpression': [{'IdentifierName': 'ttype'},
                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'typeToStringLiteralList'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'ttype'}]}]}]},
                                                                                                            {'IdentifierName': 'lit'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetTokenForType'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ttype'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'lit'}]}]}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'ttype'}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TokenConstants'},
                                                                              {'IdentifierName': 'InvalidType'}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'lit'}}],
                                                            'name': {'identifier': 'containsKey'},
                                                            'scope': {'name': {'identifier': 'stringLiteralToTypeMap'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'lit'}},
                                                                                         {'name': {'identifier': 'ttype'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'stringLiteralToTypeMap'}}}},
                                                           {'condition': {'left': {'name': {'identifier': 'ttype'}},
                                                                          'operator': 'GREATER_EQUALS',
                                                                          'right': {'name': {'identifier': 'size'},
                                                                                    'scope': {'name': {'identifier': 'typeToStringLiteralList'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'typeToStringLiteralList'}},
                                                                                                                      {'left': {'name': {'identifier': 'ttype'}},
                                                                                                                       'operator': 'PLUS',
                                                                                                                       'right': {'value': '1'}}],
                                                                                                        'name': {'identifier': 'setSize'},
                                                                                                        'scope': {'name': {'identifier': 'Utils'}}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'ttype'}},
                                                                                         {'name': {'identifier': 'lit'}}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'typeToStringLiteralList'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'ttype'}},
                                                                                         {'name': {'identifier': 'lit'}}],
                                                                           'name': {'identifier': 'setTokenForType'}}},
                                                           {'expression': {'name': {'identifier': 'ttype'}}}]}},
                              {'expression': {'name': {'identifier': 'INVALID_TYPE'},
                                              'scope': {'name': {'identifier': 'Token'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OptimizeSets'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                            {'Argument': [{'IdentifierName': 'atn'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'OptimizeStates'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'atn'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'g'}},
                                                            {'name': {'identifier': 'atn'}}],
                                              'name': {'identifier': 'optimizeSets'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'atn'}}],
                                              'name': {'identifier': 'optimizeStates'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenID'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'SourceName'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                              {'IdentifierName': 'IsTokenName'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenID'},
                                                                                                                                                              {'IdentifierName': 'Text'}]}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'TOKEN_NAMES_MUST_START_UPPER'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'tokenID'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenID'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'tokenID'}}}},
                                                             'name': {'identifier': 'fileName'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                           'scope': {'name': {'identifier': 'tokenID'}}}],
                                                            'name': {'identifier': 'isTokenName'},
                                                            'scope': {'name': {'identifier': 'Grammar'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'TOKEN_NAMES_MUST_START_UPPER'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'tokenID'}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'tokenID'}}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Parser'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'file'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'file'}}],
                                              'type': {'name': {'identifier': 'Parser'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'blk'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                            {'IdentifierName': 'FinishAlternative'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'blk'}]},
                                                                                                                            {'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'blk'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'FinishAlternative'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'blk'}]},
                                                                                                                                                  {'Argument': [{'IdentifierName': 'outerMost'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'blk'}},
                                              'value': {'arguments': [{'name': {'identifier': 'blk'}},
                                                                      {'name': {'identifier': 'ops'}}],
                                                        'name': {'identifier': 'finishAlternative'},
                                                        'scope': {'name': {'identifier': 'delegate'}}}}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'blk'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'blk'}},
                                                                               {'name': {'identifier': 'outerMost'}}],
                                                                 'name': {'identifier': 'finishAlternative'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Alternative'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetCurrentOuterMostAlt'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentOuterMostAlt'},
                                                                                                                                                                                                                            {'IdentifierName': 'tokenRefsInActions'}]},
                                                                                                                                                                                          {'IdentifierName': 'ContainsKey'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                                          {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentOuterMostAlt'},
                                                                                                                                                                                                                            {'IdentifierName': 'ruleRefsInActions'}]},
                                                                                                                                                                                          {'IdentifierName': 'ContainsKey'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                                          {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'op'},
                                                                                                                                                                                          {'IdentifierName': 'GetLabels'}]},
                                                                                                                                                        {'ArgumentList': '()'}]},
                                                                                                                              {'IdentifierName': 'Count'}]},
                                                                                            {'NumericLiteralExpression': '0'}]},
                                                                      {'ParenthesizedExpression': [{'LogicalOrExpression': [{'IdentifierName': 'actionRefsAsToken'},
                                                                                                                            {'IdentifierName': 'actionRefsAsRule'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getCurrentOuterMostAlt'}},
                                                             'name': {'identifier': 'currentOuterMostAlt'},
                                                             'type': {'name': {'identifier': 'Alternative'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'ID'}}}],
                                                                             'name': {'identifier': 'containsKey'},
                                                                             'scope': {'name': {'identifier': 'tokenRefsInActions'},
                                                                                       'scope': {'name': {'identifier': 'currentOuterMostAlt'}}}},
                                                             'name': {'identifier': 'actionRefsAsToken'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'ID'}}}],
                                                                             'name': {'identifier': 'containsKey'},
                                                                             'scope': {'name': {'identifier': 'ruleRefsInActions'},
                                                                                       'scope': {'name': {'identifier': 'currentOuterMostAlt'}}}},
                                                             'name': {'identifier': 'actionRefsAsRule'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'left': {'name': {'identifier': 'isEmpty'},
                                                       'scope': {'name': {'identifier': 'getLabels'},
                                                                 'scope': {'name': {'identifier': 'op'}}}},
                                              'operator': 'AND',
                                              'right': {'inner': {'left': {'name': {'identifier': 'actionRefsAsToken'}},
                                                                  'operator': 'OR',
                                                                  'right': {'name': {'identifier': 'actionRefsAsRule'}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                         {'IdentifierName': 'Type'}]},
                                                                                       {'IdentifierName': 'CLOSURE'}]},
                                                                 {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                         {'IdentifierName': 'Type'}]},
                                                                                       {'IdentifierName': 'POSITIVE_CLOSURE'}]}]},
                                        {'Block': [{'ForEachStatement': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'}]}]}]}]},
                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                     {'IdentifierName': 'Peek'}]},
                                                                                                   {'ArgumentList': '()'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                                 {'IdentifierName': 'Value'}]},
                                                                                                                                                                               {'IdentifierName': 'Value'}]},
                                                                                                                                             {'NumericLiteralExpression': '2'}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                {'IdentifierName': 'Type'}]},
                                                              {'IdentifierName': 'CLOSURE'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                    {'IdentifierName': 'Peek'}]},
                                                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                                                        {'IdentifierName': 'Clear'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'getType'},
                                                               'scope': {'name': {'identifier': 'tree'}}},
                                                      'operator': 'EQUALS',
                                                      'right': {'name': {'identifier': 'CLOSURE'}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'getType'},
                                                                'scope': {'name': {'identifier': 'tree'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'POSITIVE_CLOSURE'}}}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'v'},
                                                                                                               'scope': {'name': {'identifier': 'getValue'},
                                                                                                                         'scope': {'name': {'identifier': 'entry'}}}},
                                                                                                    'value': {'value': '2'}}}]},
                                                            'iterable': {'name': {'identifier': 'entrySet'},
                                                                         'scope': {'name': {'identifier': 'peek'},
                                                                                   'scope': {'name': {'identifier': 'frequencies'}}}},
                                                            'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                                                        'type': {'name': {'identifier': 'Entry'},
                                                                                                 'scope': {'name': {'identifier': 'Map'}},
                                                                                                 'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                                   {'name': {'identifier': 'MutableInt'}}]}}]}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'getType'},
                                                               'scope': {'name': {'identifier': 'tree'}}},
                                                      'operator': 'EQUALS',
                                                      'right': {'name': {'identifier': 'CLOSURE'}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'getType'},
                                                                'scope': {'name': {'identifier': 'tree'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'OPTIONAL'}}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                                                           'scope': {'name': {'identifier': 'peek'},
                                                                                     'scope': {'name': {'identifier': 'minFrequencies'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                              {'IdentifierName': 'treeLevel'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'treeLevel'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'target'},
                                                                                                                                                                                                                                            {'IdentifierName': 'GetCodeGenerator'}]},
                                                                                                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                                                                                                {'IdentifierName': 'tool'}]},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'ToolError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                            {'IdentifierName': 'STRING_TEMPLATE_WARNING'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'msg'},
                                                                                                                                            {'IdentifierName': 'Cause'}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'msg'},
                                                                                                                                                                      {'IdentifierName': 'ToString'}]},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'STRING_TEMPLATE_WARNING'},
                                                             'scope': {'name': {'identifier': 'ErrorType'}}},
                                                            {'name': {'identifier': 'cause'},
                                                             'scope': {'name': {'identifier': 'msg'}}},
                                                            {'name': {'identifier': 'toString'},
                                                             'scope': {'name': {'identifier': 'msg'}}}],
                                              'name': {'identifier': 'toolError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'},
                                                                  'scope': {'name': {'identifier': 'getCodeGenerator'}}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                        {'IdentifierName': 'GetCurrentOuterMostAlt'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getCurrentOuterMostAlt'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'IdentifierName': 'other'},
                                                                                                                {'NullLiteralExpression': 'null'}]},
                                                                                          {'EqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                            {'IdentifierName': 'Size'}]},
                                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                                {'NumericLiteralExpression': '0'}]}]},
                                                                 {'EqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'Size'},
                                                                                                                 {'ArgumentList': '()'}]},
                                                                                       {'NumericLiteralExpression': '0'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'attributes'},
                                                                                                                                                                                                                              {'IdentifierName': 'Keys'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                            {'IdentifierName': 'IntersectWith'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'other'},
                                                                                                                                                                              {'IdentifierName': 'attributes'}]},
                                                                                                                                            {'IdentifierName': 'Keys'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'left': {'name': {'identifier': 'other'}},
                                                               'operator': 'EQUALS',
                                                               'right': {}},
                                                      'operator': 'OR',
                                                      'right': {'left': {'name': {'identifier': 'size'},
                                                                         'scope': {'name': {'identifier': 'other'}}},
                                                                'operator': 'EQUALS',
                                                                'right': {'value': '0'}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'size'}},
                                                       'operator': 'EQUALS',
                                                       'right': {'value': '0'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'emptySet'},
                                                                           'scope': {'name': {'identifier': 'Collections'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'keySet'},
                                                                                            'scope': {'name': {'identifier': 'attributes'}}}],
                                                                             'type': {'name': {'identifier': 'HashSet'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'keySet'},
                                                             'scope': {'name': {'identifier': 'attributes'},
                                                                       'scope': {'name': {'identifier': 'other'}}}}],
                                              'name': {'identifier': 'retainAll'},
                                              'scope': {'name': {'identifier': 'result'}}}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                    {'IdentifierName': 'Equals'}]},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                    {'IdentifierName': 'name'}]}]}]}]},
                                        {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                          {'IdentifierName': 'type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                          {'IdentifierName': 'RULE_LABEL'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                    {'IdentifierName': 'GetRule'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                                      {'IdentifierName': 'element'}]},
                                                                                                                                                                    {'IdentifierName': 'Text'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                        {'IdentifierName': 'GetRule'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'},
                                                            'scope': {}}],
                                             'name': {'identifier': 'equals'},
                                             'scope': {'name': {'identifier': 'x'}}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'},
                                                                'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                 'scope': {'name': {'identifier': 'LabelType'}}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'element'},
                                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}}}],
                                                                           'name': {'identifier': 'getRule'},
                                                                           'scope': {'name': {'identifier': 'g'}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'getRule'},
                                              'scope': {'name': {'identifier': 'g'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckOptions'},
                                                                          {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                          {'IdentifierName': 'GetAncestor'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'RULE'}]}]}]}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'expression': {'arguments': [{'name': {'identifier': 'RULE'}}],
                                                                            'name': {'identifier': 'getAncestor'},
                                                                            'scope': {'name': {'identifier': 'ID'}}},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}},
                                                            {'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}},
                                                            {'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'checkOptions'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                            {'IdentifierName': 'Info'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'info'},
                                              'scope': {'name': {'identifier': 'tool'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                   {'IdentifierName': 'rules'}]},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ForEachStatement': [{'IdentifierName': 'Rule'},
                                                                         {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                             {'IdentifierName': 'rules'}]},
                                                                                                           {'IdentifierName': 'Values'}]},
                                                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'nameToRuleMap'},
                                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                          {'IdentifierName': 'name'}]}]}]}]},
                                                                                                                                  {'IdentifierName': 'r'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckReservedNames'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                              {'IdentifierName': 'rules'}]},
                                                                                                                                            {'IdentifierName': 'Values'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckActionRedefinitions'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                                                                                            {'IdentifierName': 'namedActions'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckForTokenConflicts'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                                                                                            {'IdentifierName': 'tokenIDRefs'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckForLabelConflicts'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                              {'IdentifierName': 'rules'}]},
                                                                                                                                            {'IdentifierName': 'Values'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'rules'},
                                                      'scope': {'name': {'identifier': 'g'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'body': {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                                                                   'scope': {'name': {'identifier': 'r'}}},
                                                                                                  {'name': {'identifier': 'r'}}],
                                                                                    'name': {'identifier': 'put'},
                                                                                    'scope': {'name': {'identifier': 'nameToRuleMap'}}}},
                                                            'iterable': {'name': {'identifier': 'values'},
                                                                         'scope': {'name': {'identifier': 'rules'},
                                                                                   'scope': {'name': {'identifier': 'g'}}}},
                                                            'variable': {'variables': [{'name': {'identifier': 'r'},
                                                                                        'type': {'name': {'identifier': 'Rule'}}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'values'},
                                                             'scope': {'name': {'identifier': 'rules'},
                                                                       'scope': {'name': {'identifier': 'g'}}}}],
                                              'name': {'identifier': 'checkReservedNames'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'namedActions'},
                                                             'scope': {'name': {'identifier': 'collector'}}}],
                                              'name': {'identifier': 'checkActionRedefinitions'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'values'},
                                                             'scope': {'name': {'identifier': 'rules'},
                                                                       'scope': {'name': {'identifier': 'g'}}}}],
                                              'name': {'identifier': 'checkForLabelConflicts'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                            {'IdentifierName': 'DefinePredicateInAlt'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]},
                                                                                            {'Argument': [{'IdentifierName': 'pred'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pred'},
                                                                                                                  {'IdentifierName': 'resolver'}]},
                                                                                {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                               {'IdentifierName': 'alt'}]},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'currentOuterAltNumber'}},
                                                            {'name': {'identifier': 'pred'}}],
                                              'name': {'identifier': 'definePredicateInAlt'},
                                              'scope': {'name': {'identifier': 'currentRule'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'resolver'},
                                                         'scope': {'name': {'identifier': 'pred'}}},
                                              'value': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                        'name': {'name': {'identifier': 'alt'},
                                                                 'scope': {'name': {'identifier': 'currentRule'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'LabelElementPair'}]}]},
                                                                               {'VariableDeclarator': 'labels'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'labelDefs'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'labels'}]}]}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'labels'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'ElementAccessExpression': [{'IdentifierName': 'labels'},
                                                                                          {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'labelDefs'}}},
                                                             'name': {'identifier': 'labels'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'LabelElementPair'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'labels'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'arguments': [{'value': '0'}],
                                                           'name': {'identifier': 'get'},
                                                           'scope': {'name': {'identifier': 'labels'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                            {'IdentifierName': 'Reset'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'overrideDecisionRoot'},
                                                                                {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'reset'},
                                              'scope': {}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'overrideDecisionRoot'}},
                                              'value': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altAST'},
                                                                                                                                                                {'IdentifierName': 'TokenStartIndex'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altAST'},
                                                                                                                                                                {'IdentifierName': 'TokenStopIndex'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'stop'}]}]}]},
                                         {'GreaterThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                           {'IdentifierName': 'start'}]},
                                         {'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenStream'},
                                                                                                                                                                                         {'IdentifierName': 'Get'}]},
                                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                             {'IdentifierName': 'Type'}]},
                                                                                           {'IdentifierName': 'POUND'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altAST'},
                                                                                                                                                                           {'IdentifierName': 'TokenStopIndex'}]},
                                                                                                                                         {'SubtractExpression': [{'IdentifierName': 'i'},
                                                                                                                                                                 {'NumericLiteralExpression': '1'}]}]}]},
                                                                                {'ReturnStatement': 'return;'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getTokenStartIndex'},
                                                                             'scope': {'name': {'identifier': 'altAST'}}},
                                                             'name': {'identifier': 'start'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getTokenStopIndex'},
                                                                             'scope': {'name': {'identifier': 'altAST'}}},
                                                             'name': {'identifier': 'stop'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'getType'},
                                                                               'scope': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                         'name': {'identifier': 'get'},
                                                                                         'scope': {'name': {'identifier': 'tokenStream'}}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'POUND'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'left': {'name': {'identifier': 'i'}},
                                                                                                                   'operator': 'MINUS',
                                                                                                                   'right': {'value': '1'}}],
                                                                                                    'name': {'identifier': 'setTokenStopIndex'},
                                                                                                    'scope': {'name': {'identifier': 'altAST'}}}},
                                                                                    {}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'GREATER_EQUALS',
                                           'right': {'name': {'identifier': 'start'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'stop'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_DECREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'DispatchMethod'}]}]},
                                                                                                              {'ArgumentList': '()'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                              {'IdentifierName': 'HasAltSpecificContexts'}]},
                                                                                            {'ArgumentList': '()'}]}]},
                                        {'Block': [{'IfStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                                                    {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                                                        {'IdentifierName': 'tool'}]},
                                                                                                      {'IdentifierName': 'gen_listener'}]},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                                                    {'IdentifierName': 'Add'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ListenerDispatchMethod'},
                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                                                                  {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
                                                                               {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                                                    {'IdentifierName': 'Add'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ListenerDispatchMethod'},
                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                                                                  {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]}]}]},
                                                   {'IfStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                                                    {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                                                        {'IdentifierName': 'tool'}]},
                                                                                                      {'IdentifierName': 'gen_visitor'}]},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                                                    {'IdentifierName': 'Add'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'VisitorDispatchMethod'},
                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'dispatchMethods'}},
                                              'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                 'typeArguments': [{'name': {'identifier': 'DispatchMethod'}}]}}}},
                              {'condition': {'expression': {'name': {'identifier': 'hasAltSpecificContexts'},
                                                            'scope': {'name': {'identifier': 'r'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'condition': {'name': {'identifier': 'gen_listener'},
                                                                          'scope': {'name': {'identifier': 'tool'},
                                                                                    'scope': {'name': {'identifier': 'getGrammar'},
                                                                                              'scope': {'name': {'identifier': 'factory'}}}}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                                                     {'value': 'true'}],
                                                                                                                       'type': {'name': {'identifier': 'ListenerDispatchMethod'}}}],
                                                                                                        'name': {'identifier': 'add'},
                                                                                                        'scope': {'name': {'identifier': 'dispatchMethods'}}}},
                                                                                        {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                                                     {'value': 'false'}],
                                                                                                                       'type': {'name': {'identifier': 'ListenerDispatchMethod'}}}],
                                                                                                        'name': {'identifier': 'add'},
                                                                                                        'scope': {'name': {'identifier': 'dispatchMethods'}}}}]}},
                                                           {'condition': {'name': {'identifier': 'gen_visitor'},
                                                                          'scope': {'name': {'identifier': 'tool'},
                                                                                    'scope': {'name': {'identifier': 'getGrammar'},
                                                                                              'scope': {'name': {'identifier': 'factory'}}}}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}}],
                                                                                                                       'type': {'name': {'identifier': 'VisitorDispatchMethod'}}}],
                                                                                                        'name': {'identifier': 'add'},
                                                                                                        'scope': {'name': {'identifier': 'dispatchMethods'}}}}]}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                    {'IdentifierName': 'IsParser'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'CHANNELS_BLOCK_IN_PARSER_GRAMMAR'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                        {'IdentifierName': 'fileName'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                                        {'IdentifierName': 'Token'}]}]}]}]}]}]},
                                        {'ElseClause': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                     {'IdentifierName': 'IsCombined'}]},
                                                                                                   {'ArgumentList': '()'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                                             {'IdentifierName': 'tool'}]},
                                                                                                                                                                                                           {'IdentifierName': 'errMgr'}]},
                                                                                                                                                                         {'IdentifierName': 'GrammarError'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                                                         {'IdentifierName': 'CHANNELS_BLOCK_IN_COMBINED_GRAMMAR'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                         {'IdentifierName': 'fileName'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                                                                         {'IdentifierName': 'Token'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'isParser'},
                                             'scope': {'name': {'identifier': 'g'}}},
                               'elseStmt': {'condition': {'name': {'identifier': 'isCombined'},
                                                          'scope': {'name': {'identifier': 'g'}}},
                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'CHANNELS_BLOCK_IN_COMBINED_GRAMMAR'},
                                                                                                       'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                      {'name': {'identifier': 'fileName'},
                                                                                                       'scope': {'name': {'identifier': 'g'}}},
                                                                                                      {'name': {'identifier': 'token'},
                                                                                                       'scope': {'name': {'identifier': 'tree'}}}],
                                                                                        'name': {'identifier': 'grammarError'},
                                                                                        'scope': {'name': {'identifier': 'errMgr'},
                                                                                                  'scope': {'name': {'identifier': 'tool'},
                                                                                                            'scope': {'name': {'identifier': 'g'}}}}}}]}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'CHANNELS_BLOCK_IN_PARSER_GRAMMAR'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'},
                                                                                          'scope': {'name': {'identifier': 'g'}}},
                                                                                         {'name': {'identifier': 'token'},
                                                                                          'scope': {'name': {'identifier': 'tree'}}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'inFragmentRule'},
                                                                                {'FalseLiteralExpression': 'false'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'inFragmentRule'}},
                                              'value': {'value': 'false'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckInvalidRuleRef'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ref'}}}],
                                              'name': {'identifier': 'checkInvalidRuleRef'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'errMgr'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errMgr'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Alternative'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]},
                                                                                        {'Argument': [{'IdentifierName': 'outerMost'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'alt'}},
                                                            {'name': {'identifier': 'outerMost'}}],
                                              'name': {'identifier': 'alternative'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'templates'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'templates'},
                                                                                                            {'InvocationExpression': [{'IdentifierName': 'LoadTemplates'},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'templates'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'templates'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getVersion'}},
                                                                                          'name': {'identifier': 'version'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'condition': {'left': {'left': {'name': {'identifier': 'version'}},
                                                                                   'operator': 'EQUALS',
                                                                                   'right': {}},
                                                                          'operator': 'OR',
                                                                          'right': {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'VERSION'},
                                                                                                                                 'scope': {'name': {'identifier': 'Tool'}}}],
                                                                                                                  'name': {'identifier': 'getMajorMinorVersion'},
                                                                                                                  'scope': {'name': {'identifier': 'RuntimeMetaData'}}}],
                                                                                                   'name': {'identifier': 'equals'},
                                                                                                   'scope': {'arguments': [{'name': {'identifier': 'version'}}],
                                                                                                             'name': {'identifier': 'getMajorMinorVersion'},
                                                                                                             'scope': {'name': {'identifier': 'RuntimeMetaData'}}}},
                                                                                    'operator': 'LOGICAL_COMPLEMENT'}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'INCOMPATIBLE_TOOL_AND_TEMPLATES'},
                                                                                                                       'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                                      {'name': {'identifier': 'version'}},
                                                                                                                      {'name': {'identifier': 'VERSION'},
                                                                                                                       'scope': {'name': {'identifier': 'Tool'}}},
                                                                                                                      {'name': {'identifier': 'language'}}],
                                                                                                        'name': {'identifier': 'toolError'},
                                                                                                        'scope': {'name': {'identifier': 'errMgr'},
                                                                                                                  'scope': {'name': {'identifier': 'tool'},
                                                                                                                            'scope': {'name': {'identifier': 'gen'}}}}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'templates'}},
                                                                           'value': {'name': {'identifier': 'loadTemplates'}}}}]}},
                              {'expression': {'name': {'identifier': 'templates'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'maxChannelType'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'maxChannelType'}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'maxChannelType'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'name': {'identifier': 'maxChannelType'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Token'},
                                                                                                                  {'IdentifierName': 'Text'}]},
                                                                                {'IdentifierName': 'text'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'text'}}],
                                              'name': {'identifier': 'setText'},
                                              'scope': {'name': {'identifier': 'token'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'iteration'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'iteration'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'iteration'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'iteration'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'iteration'}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'iteration'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TokenDecl'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'label'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'label'}}],
                                              'type': {'name': {'identifier': 'TokenDecl'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                     {'IdentifierName': 'Count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                         {'IdentifierName': 'Pop'}]},
                                                                                       {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isEmpty'},
                                                            'scope': {'name': {'identifier': 'currentRule'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'name': {'identifier': 'pop'},
                                                           'scope': {'name': {'identifier': 'currentRule'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'ObjectCreationExpression': [{'IdentifierName': 'Uri'},
                                                                                                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'TypeOfExpression': [{'IdentifierName': 'AntlrTool'}]},
                                                                                                                                                                                                                                                                                                                                                              {'IdentifierName': 'GetTypeInfo'}]},
                                                                                                                                                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Assembly'}]},
                                                                                                                                                                                                                                                                {'IdentifierName': 'CodeBase'}]}]}]}]},
                                                                                                                                                                {'IdentifierName': 'LocalPath'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Path'},
                                                                                                                                                                                          {'IdentifierName': 'GetDirectoryName'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'codeBaseLocation'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TemplateGroup'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TemplateGroupFile'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Path'},
                                                                                                                                                                                                                                                        {'IdentifierName': 'Combine'}]},
                                                                                                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'baseDirectory'}]},
                                                                                                                                                                                                                                        {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Path'},
                                                                                                                                                                                                                                                                                                                  {'IdentifierName': 'Combine'}]},
                                                                                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CodeGenerator'},
                                                                                                                                                                                                                                                                                                                                                  {'IdentifierName': 'TEMPLATE_ROOT'}]}]},
                                                                                                                                                                                                                                                                                                  {'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetLanguage'},
                                                                                                                                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]},
                                                                                                                                                                                                                                                                                                  {'Argument': [{'AddExpression': [{'InvocationExpression': [{'IdentifierName': 'GetLanguage'},
                                                                                                                                                                                                                                                                                                                                                             {'ArgumentList': '()'}]},
                                                                                                                                                                                                                                                                                                                                   {'SimpleMemberAccessExpression': [{'IdentifierName': 'TemplateGroup'},
                                                                                                                                                                                                                                                                                                                                                                     {'IdentifierName': 'GroupFileExtension'}]}]}]}]}]}]}]}]}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Encoding'},
                                                                                                                                                                                                                              {'IdentifierName': 'UTF8'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                            {'IdentifierName': 'RegisterRenderer'}]},
                                                                          {'ArgumentList': [{'Argument': [{'TypeOfExpression': [{'PredefinedType': 'int'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'NumberRenderer'},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                            {'IdentifierName': 'RegisterRenderer'}]},
                                                                          {'ArgumentList': [{'Argument': [{'TypeOfExpression': [{'PredefinedType': 'string'}]}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'StringRenderer'},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                  {'IdentifierName': 'Listener'}]},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'ErrorListener'},
                                                                                                              {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'left': {'left': {'left': {'left': {'left': {'name': {'identifier': 'TEMPLATE_ROOT'},
                                                                                                                          'scope': {'name': {'identifier': 'CodeGenerator'}}},
                                                                                                                 'operator': 'PLUS',
                                                                                                                 'right': {'value': '/'}},
                                                                                                        'operator': 'PLUS',
                                                                                                        'right': {'name': {'identifier': 'getLanguage'}}},
                                                                                               'operator': 'PLUS',
                                                                                               'right': {'value': '/'}},
                                                                                      'operator': 'PLUS',
                                                                                      'right': {'name': {'identifier': 'getLanguage'}}},
                                                                             'operator': 'PLUS',
                                                                             'right': {'name': {'identifier': 'GROUP_FILE_EXTENSION'},
                                                                                       'scope': {'name': {'identifier': 'STGroup'}}}},
                                                             'name': {'identifier': 'groupFileName'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'STGroup'}}}]}},
                              {'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'MISSING_CODE_GEN_TEMPLATES'},
                                                                                                        'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                       {'name': {'identifier': 'iae'}},
                                                                                                       {'name': {'identifier': 'language'}}],
                                                                                         'name': {'identifier': 'toolError'},
                                                                                         'scope': {'name': {'identifier': 'errMgr'},
                                                                                                   'scope': {'name': {'identifier': 'tool'},
                                                                                                             'scope': {'name': {'identifier': 'gen'}}}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'iae'},
                                                               'type': {'name': {'identifier': 'IllegalArgumentException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'result'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'groupFileName'}}],
                                                                                     'type': {'name': {'identifier': 'STGroupFile'}}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'result'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'Integer'}}},
                                                            {'type': {'name': {'identifier': 'NumberRenderer'}}}],
                                              'name': {'identifier': 'registerRenderer'},
                                              'scope': {'name': {'identifier': 'result'}}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'String'}}},
                                                            {'type': {'name': {'identifier': 'StringRenderer'}}}],
                                              'name': {'identifier': 'registerRenderer'},
                                              'scope': {'name': {'identifier': 'result'}}}},
                              {'expression': {'arguments': [{'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                                                                             'name': {'identifier': 'reportError'}}}]},
                                                                                     'name': {'identifier': 'compileTimeError'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 'msg'},
                                                                                                     'type': {'name': {'identifier': 'STMessage'}}}],
                                                                                     'type': {}},
                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                                                                             'name': {'identifier': 'reportError'}}}]},
                                                                                     'name': {'identifier': 'runTimeError'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 'msg'},
                                                                                                     'type': {'name': {'identifier': 'STMessage'}}}],
                                                                                     'type': {}},
                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                                                                             'name': {'identifier': 'reportError'}}}]},
                                                                                     'name': {'identifier': 'IOError'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 'msg'},
                                                                                                     'type': {'name': {'identifier': 'STMessage'}}}],
                                                                                     'type': {}},
                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                                                                             'name': {'identifier': 'reportError'}}}]},
                                                                                     'name': {'identifier': 'internalError'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 'msg'},
                                                                                                     'type': {'name': {'identifier': 'STMessage'}}}],
                                                                                     'type': {}},
                                                                                    {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'STRING_TEMPLATE_WARNING'},
                                                                                                                                            'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                                                           {'name': {'identifier': 'cause'},
                                                                                                                                            'scope': {'name': {'identifier': 'msg'}}},
                                                                                                                                           {'name': {'identifier': 'toString'},
                                                                                                                                            'scope': {'name': {'identifier': 'msg'}}}],
                                                                                                                             'name': {'identifier': 'toolError'},
                                                                                                                             'scope': {'name': {'identifier': 'errMgr'},
                                                                                                                                       'scope': {'name': {'identifier': 'tool'},
                                                                                                                                                 'scope': {'name': {'identifier': 'getCodeGenerator'}}}}}}]},
                                                                                     'name': {'identifier': 'reportError'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 'msg'},
                                                                                                     'type': {'name': {'identifier': 'STMessage'}}}],
                                                                                     'type': {}}],
                                                             'type': {'name': {'identifier': 'STErrorListener'}}}],
                                              'name': {'identifier': 'setListener'},
                                              'scope': {'name': {'identifier': 'result'}}}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AbstractTarget'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetTarget'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'target'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'target'},
                                                                                                        {'IdentifierName': 'GetTemplates'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getTarget'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Target'}}}]}},
                              {'expression': {'condition': {'left': {'name': {'identifier': 't'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'name': {'identifier': 'getTemplates'},
                                                           'scope': {'name': {'identifier': 't'}}},
                                              'thenExpr': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'namedActions'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                {'IdentifierName': 'Parent'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                  {'IdentifierName': 'resolver'}]},
                                                                                {'IdentifierName': 'g'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 'getParent'},
                                                                            'scope': {'name': {'identifier': 'ID'}}},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'namedActions'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'resolver'},
                                                         'scope': {'name': {'identifier': 'action'}}},
                                              'value': {'name': {'identifier': 'g'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildListenerOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildListenerOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarInterpreterRuleContext'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'parent'}]},
                                                                                            {'Argument': [{'IdentifierName': 'invokingStateNumber'}]},
                                                                                            {'Argument': [{'IdentifierName': 'ruleIndex'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'parent'}},
                                                            {'name': {'identifier': 'invokingStateNumber'}},
                                                            {'name': {'identifier': 'ruleIndex'}}],
                                              'type': {'name': {'identifier': 'GrammarInterpreterRuleContext'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'stateToGrammarRegionMap'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'stateToGrammarRegionMap'},
                                                                                                            {'InvocationExpression': [{'IdentifierName': 'GetStateToGrammarRegionMap'},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]},
                                                                                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'stateToGrammarRegionMap'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Interval'},
                                                                                               {'IdentifierName': 'Invalid'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Interval'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stateToGrammarRegionMap'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'atnStateNumber'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'Interval'},
                                                                                                                                   {'IdentifierName': 'Invalid'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'stateToGrammarRegionMap'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'stateToGrammarRegionMap'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'ast'}},
                                                                                                   {}],
                                                                                     'name': {'identifier': 'getStateToGrammarRegionMap'}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'stateToGrammarRegionMap'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'INVALID'},
                                                           'scope': {'name': {'identifier': 'Interval'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'atnStateNumber'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'stateToGrammarRegionMap'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'ElemList'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'els'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'els'}}],
                                              'name': {'identifier': 'elemList'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PredAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'PredAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetTargetStringLiteralFromString'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}},
                                                            {'value': 'true'}],
                                              'name': {'identifier': 'getTargetStringLiteralFromString'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'block'},
                                                                                                                                                                {'IdentifierName': 'ChildCount'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Rule'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Rule'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                                              {'IdentifierName': 'Text'}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'rule'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'numAlts'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'mode'}]},
                                                                                {'IdentifierName': 'currentModeName'}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'modifiers'},
                                                                                                     {'IdentifierName': 'Count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                   {'IdentifierName': 'modifiers'}]},
                                                                                                 {'IdentifierName': 'modifiers'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'rules'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                        {'IdentifierName': 'name'}]}]}]}]},
                                                                                {'IdentifierName': 'r'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getChildCount'},
                                                                             'scope': {'name': {'identifier': 'block'}}},
                                                             'name': {'identifier': 'numAlts'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'g'}},
                                                                                           {'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'ID'}}},
                                                                                           {'name': {'identifier': 'rule'}},
                                                                                           {'name': {'identifier': 'numAlts'}}],
                                                                             'type': {'name': {'identifier': 'Rule'}}},
                                                             'name': {'identifier': 'r'},
                                                             'type': {'name': {'identifier': 'Rule'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'mode'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'currentModeName'}}}},
                              {'condition': {'expression': {'name': {'identifier': 'isEmpty'},
                                                            'scope': {'name': {'identifier': 'modifiers'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'modifiers'},
                                                                      'scope': {'name': {'identifier': 'r'}}},
                                                           'value': {'name': {'identifier': 'modifiers'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'r'}}},
                                                            {'name': {'identifier': 'r'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'rules'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                   {'IdentifierName': 'altLabel'}]},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleToAltLabels'},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'currentRuleName'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                        {'IdentifierName': 'altLabel'}]}]}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                              {'IdentifierName': 'altLabel'}]},
                                                                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'altLabelToRuleName'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Utils'},
                                                                                                                                                                                                                                              {'IdentifierName': 'Capitalize'}]},
                                                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'altLabel'}]}]}]}]}]}]},
                                                                                                            {'IdentifierName': 'currentRuleName'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'altLabelToRuleName'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Utils'},
                                                                                                                                                                                                                                              {'IdentifierName': 'Decapitalize'}]},
                                                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'altLabel'}]}]}]}]}]}]},
                                                                                                            {'IdentifierName': 'currentRuleName'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'altLabel'},
                                                      'scope': {'name': {'identifier': 'alt'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'currentRuleName'}},
                                                                                         {'name': {'identifier': 'altLabel'},
                                                                                          'scope': {'name': {'identifier': 'alt'}}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'ruleToAltLabels'}}}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getText'},
                                                                                                          'scope': {'name': {'identifier': 'altLabel'},
                                                                                                                    'scope': {'name': {'identifier': 'alt'}}}},
                                                                                          'name': {'identifier': 'altLabel'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'altLabel'}}],
                                                                                          'name': {'identifier': 'capitalize'},
                                                                                          'scope': {'name': {'identifier': 'Utils'}}},
                                                                                         {'name': {'identifier': 'currentRuleName'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'altLabelToRuleName'}}}},
                                                           {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'altLabel'}}],
                                                                                          'name': {'identifier': 'decapitalize'},
                                                                                          'scope': {'name': {'identifier': 'Utils'}}},
                                                                                         {'name': {'identifier': 'currentRuleName'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'altLabelToRuleName'}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'args'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'EMPTY_ARGS'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'args'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'args'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'EMPTY_ARGS'}}}]}},
                              {'expression': {'name': {'identifier': 'args'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineAndClip'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineAndClip'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'value': '2'}],
                                                             'name': {'identifier': 'combineAndClip'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'value': '2'}],
                                                             'name': {'identifier': 'combineAndClip'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'ops'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ops'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ops'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'ops'}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'ops'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckTokenDefinition'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkTokenDefinition'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'RawError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'ConsoleError'}]},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                            {'IdentifierName': 'Message'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'ConsoleError'}]},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                            {'IdentifierName': 'StackTrace'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'rawError'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'err'},
                                                             'scope': {'name': {'identifier': 'System'}}}],
                                              'name': {'identifier': 'printStackTrace'},
                                              'scope': {'name': {'identifier': 'e'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'PlusBlockAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'PlusBlockAST'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Template'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                                                                                                            {'IdentifierName': 'errMgr'}]},
                                                                                                                                                                                          {'IdentifierName': 'GetMessageTemplate'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'msgST'},
                                                                                                                                                                                          {'IdentifierName': 'Render'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                      {'IdentifierName': 'errMgr'}]},
                                                                                                    {'IdentifierName': 'FormatWantsSingleLineMessage'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'outputMsg'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outputMsg'},
                                                                                                                                                                        {'IdentifierName': 'Replace'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\n"
                                                                                                                                                                                                     "'"}]},
                                                                                                                                                        {'Argument': [{'CharacterLiteralExpression': "' "
                                                                                                                                                                                                     "'"}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'ConsoleError'}]},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'outputMsg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                             'name': {'identifier': 'getMessageTemplate'},
                                                                             'scope': {'name': {'identifier': 'errMgr'},
                                                                                       'scope': {'name': {'identifier': 'tool'}}}},
                                                             'name': {'identifier': 'msgST'},
                                                             'type': {'name': {'identifier': 'ST'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'render'},
                                                                             'scope': {'name': {'identifier': 'msgST'}}},
                                                             'name': {'identifier': 'outputMsg'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'name': {'identifier': 'formatWantsSingleLineMessage'},
                                             'scope': {'name': {'identifier': 'errMgr'},
                                                       'scope': {'name': {'identifier': 'tool'}}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'outputMsg'}},
                                                                           'value': {'arguments': [{'value': '\n'},
                                                                                                   {'value': ' '}],
                                                                                     'name': {'identifier': 'replace'},
                                                                                     'scope': {'name': {'identifier': 'outputMsg'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'outputMsg'}}],
                                              'name': {'identifier': 'println'},
                                              'scope': {'name': {'identifier': 'err'},
                                                        'scope': {'name': {'identifier': 'System'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                              {'IdentifierName': 'DefineRule'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'modes'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'modes'},
                                                                                                 {'ObjectCreationExpression': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Runtime'},
                                                                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                         {'IdentifierName': 'Rule'}]}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'modes'},
                                                                                                            {'IdentifierName': 'Map'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                            {'IdentifierName': 'mode'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'r'}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'r'}}],
                                                            'name': {'identifier': 'defineRule'},
                                                            'scope': {}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'modes'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'modes'}},
                                                           'value': {'type': {'name': {'identifier': 'MultiMap'},
                                                                              'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                {'name': {'identifier': 'Rule'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'mode'},
                                                             'scope': {'name': {'identifier': 'r'}}},
                                                            {'name': {'identifier': 'r'}}],
                                              'name': {'identifier': 'map'},
                                              'scope': {'name': {'identifier': 'modes'}}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'c'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'c'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                        {'IdentifierName': 'IsUpper'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'id'},
                                                                                                                                   {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'value': '0'}],
                                                             'name': {'identifier': 'charAt'},
                                                             'scope': {'name': {'identifier': 'id'}}}],
                                              'name': {'identifier': 'isUpperCase'},
                                              'scope': {'name': {'identifier': 'Character'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRStringStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ANTLRStringStream'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                                                                                                                              {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'Line'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'Line'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionSplitter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ActionSplitter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]},
                                                                                                                                                                              {'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'splitter'},
                                                                                                            {'IdentifierName': 'GetActionTokens'}]},
                                                                          {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'actionToken'}}}],
                                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getCharPositionInLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setCharPositionInLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'in'}},
                                                                                           {}],
                                                                             'type': {'name': {'identifier': 'ActionSplitter'}}},
                                                             'name': {'identifier': 'splitter'},
                                                             'type': {'name': {'identifier': 'ActionSplitter'}}}]}},
                              {'expression': {'name': {'identifier': 'getActionTokens'},
                                              'scope': {'name': {'identifier': 'splitter'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'g'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'g'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                  {'IdentifierName': 'finallyAction'}]},
                                                                                {'IdentifierName': 'action'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                  {'IdentifierName': 'resolver'}]},
                                                                                {'IdentifierName': 'currentRule'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'finallyAction'},
                                                         'scope': {'name': {'identifier': 'currentRule'}}},
                                              'value': {'name': {'identifier': 'action'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'resolver'},
                                                         'scope': {'name': {'identifier': 'action'}}},
                                              'value': {'name': {'identifier': 'currentRule'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'RuleRef'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'label'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                             {'IdentifierName': 'RuleRef'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'label'}},
                                                                                           {'name': {'identifier': 'args'}}],
                                                                             'name': {'identifier': 'ruleRef'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'ops'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                                 'name': {'identifier': 'ruleRef'},
                                                                                 'scope': {'name': {'identifier': 'ext'}}}}}]},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'numberOfAlts'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'numberOfAlts'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TrackRef'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'trackRef'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                                          {'IdentifierName': 'Split'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\n"
                                                                                                                                                                                                                       "'"}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'lines'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'linesList'},
                                                                                                            {'IdentifierName': 'Sort'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'linesList'},
                                                                                                            {'IdentifierName': 'CopyTo'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'lines'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'IdentifierName': 'lines'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                             {'IdentifierName': 'Append'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'l'}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                             {'IdentifierName': 'Append'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\n"
                                                                                                                                                                          "'"}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '\n'}],
                                                                             'name': {'identifier': 'split'},
                                                                             'scope': {'name': {'identifier': 's'}}},
                                                             'name': {'identifier': 'lines'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'NAME'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'lines'}}],
                                              'name': {'identifier': 'sort'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'lines'}}],
                                                                             'name': {'identifier': 'asList'},
                                                                             'scope': {'name': {'identifier': 'Arrays'}}},
                                                             'name': {'identifier': 'linesL'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'buf'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'l'}}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'buf'}}}},
                                                       {'expression': {'arguments': [{'value': '\n'}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'buf'}}}}]},
                               'iterable': {'name': {'identifier': 'linesL'}},
                               'variable': {'variables': [{'name': {'identifier': 'l'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'buf'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'LL1AltBlock'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'blkAST'}]},
                                                                                            {'Argument': [{'IdentifierName': 'alts'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'blkAST'}},
                                                            {'name': {'identifier': 'alts'}}],
                                              'type': {'name': {'identifier': 'LL1AltBlock'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'controller'}]},
                                                                                {'IdentifierName': 'controller'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'controller'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'errors'},
                                                                                {'NumericLiteralExpression': '0'}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'warnings'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'errors'}},
                                              'value': {'value': '0'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'warnings'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CommonTreeNodeStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CommonTreeNodeStream'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'root'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'BlockSetTransformer'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'BlockSetTransformer'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'nodes'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'g'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'transformer'},
                                                                                                                  {'IdentifierName': 'TreeAdaptor'}]},
                                                                                {'IdentifierName': 'adaptor'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'transformer'},
                                                                                                            {'IdentifierName': 'Downup'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'root'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'GrammarASTAdaptor'}}},
                                                                                           {'name': {'identifier': 'root'}}],
                                                                             'type': {'name': {'identifier': 'CommonTreeNodeStream'}}},
                                                             'name': {'identifier': 'nodes'},
                                                             'type': {'name': {'identifier': 'CommonTreeNodeStream'}}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'GrammarASTAdaptor'}}},
                                                             'name': {'identifier': 'adaptor'},
                                                             'type': {'name': {'identifier': 'GrammarASTAdaptor'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'nodes'}},
                                                                                           {'name': {'identifier': 'g'}}],
                                                                             'type': {'name': {'identifier': 'BlockSetTransformer'}}},
                                                             'name': {'identifier': 'transformer'},
                                                             'type': {'name': {'identifier': 'BlockSetTransformer'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'adaptor'}}],
                                              'name': {'identifier': 'setTreeAdaptor'},
                                              'scope': {'name': {'identifier': 'transformer'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'root'}}],
                                              'name': {'identifier': 'downup'},
                                              'scope': {'name': {'identifier': 'transformer'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'errors'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRMessage'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftRecursionCyclesMessage'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'cycles'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                            {'IdentifierName': 'Error'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'expression': {'name': {'identifier': 'errors'}},
                                              'operator': 'POSTFIX_INCREMENT'}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'fileName'}},
                                                                                           {'name': {'identifier': 'cycles'}}],
                                                                             'type': {'name': {'identifier': 'LeftRecursionCyclesMessage'}}},
                                                             'name': {'identifier': 'msg'},
                                                             'type': {'name': {'identifier': 'ANTLRMessage'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'error'},
                                              'scope': {'name': {'identifier': 'tool'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'Children'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'object'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'Children'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'c'},
                                                                                           {'IdentifierName': 't'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DeleteChild'},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                                     {'IdentifierName': 'ChildIndex'}]}]}]}]}]},
                                                                                {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'children'}}},
                                                                                      'name': {'identifier': 'c'},
                                                                                      'type': {'name': {'identifier': 'Object'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'c'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 't'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getChildIndex'},
                                                                                                                   'scope': {'name': {'identifier': 't'}}}],
                                                                                                    'name': {'identifier': 'deleteChild'}}},
                                                                                    {'expression': {'value': 'true'}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'children'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'ttype'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                    {'IdentifierName': 'IsLexer'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ttype'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'CharSupport'},
                                                                                                                                                                        {'IdentifierName': 'GetCharValueFromGrammarCharLiteral'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'atom'},
                                                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ttype'},
                                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                        {'IdentifierName': 'GetTokenType'}]},
                                                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'atom'},
                                                                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ttype'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'ttype'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'name': {'identifier': 'isLexer'},
                                             'scope': {'name': {'identifier': 'g'}}},
                               'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'ttype'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                    'scope': {'name': {'identifier': 'atom'}}}],
                                                                                     'name': {'identifier': 'getTokenType'},
                                                                                     'scope': {'name': {'identifier': 'g'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'ttype'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                    'scope': {'name': {'identifier': 'atom'}}}],
                                                                                     'name': {'identifier': 'getCharValueFromGrammarCharLiteral'},
                                                                                     'scope': {'name': {'identifier': 'CharSupport'}}}}}]}},
                              {'expression': {'name': {'identifier': 'ttype'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RuleFunction'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Rule'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'rf'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Rule'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'rf'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'rf'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'r'}}],
                                                                             'name': {'identifier': 'rule'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'rf'},
                                                             'type': {'name': {'identifier': 'RuleFunction'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'rf'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'rf'}}],
                                                                 'name': {'identifier': 'rule'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'rf'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                   {'IdentifierName': 'finallyAction'}]},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'finallyAction'},
                                                                                                            {'ObjectCreationExpression': [{'IdentifierName': 'Action'},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                            {'IdentifierName': 'finallyAction'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'namedActions'},
                                                                                {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                     {'IdentifierName': 'Action'}]}]},
                                                                                                              {'ArgumentList': '()'}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                 {'IdentifierName': 'namedActions'}]},
                                                                               {'IdentifierName': 'Keys'}]},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionAST'},
                                                                                                                {'VariableDeclarator': 'ast'}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                               {'IdentifierName': 'namedActions'}]},
                                                                                                                                             {'IdentifierName': 'TryGetValue'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                                             {'Argument': [{'IdentifierName': 'ast'}]}]}]}]},
                                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'namedActions'},
                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                                                                 {'ObjectCreationExpression': [{'IdentifierName': 'Action'},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                 {'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'finallyAction'},
                                                      'scope': {'name': {'identifier': 'r'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'finallyAction'}},
                                                                           'value': {'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                   {'name': {'identifier': 'finallyAction'},
                                                                                                    'scope': {'name': {'identifier': 'r'}}}],
                                                                                     'type': {'name': {'identifier': 'Action'}}}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'namedActions'}},
                                              'value': {'type': {'name': {'identifier': 'HashMap'},
                                                                 'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                   {'name': {'identifier': 'Action'}}]}}}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'namedActions'},
                                                                                                                'scope': {'name': {'identifier': 'r'}}}},
                                                                                      'name': {'identifier': 'ast'},
                                                                                      'type': {'name': {'identifier': 'ActionAST'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'name'}},
                                                                                     {'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                    {'name': {'identifier': 'ast'}}],
                                                                                      'type': {'name': {'identifier': 'Action'}}}],
                                                                       'name': {'identifier': 'put'},
                                                                       'scope': {'name': {'identifier': 'namedActions'}}}}]},
                               'iterable': {'name': {'identifier': 'keySet'},
                                            'scope': {'name': {'identifier': 'namedActions'},
                                                      'scope': {'name': {'identifier': 'r'}}}},
                               'variable': {'variables': [{'name': {'identifier': 'name'},
                                                           'type': {'name': {'identifier': 'String'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'InvokeRule'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'InvokeRule'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'label'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                    {'IdentifierName': 'NeedsImplicitLabel'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                    {'Argument': [{'IdentifierName': 'invokeOp'}]}]}]},
                                        {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DefineImplicitLabel'},
                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                             {'Argument': [{'IdentifierName': 'invokeOp'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AddToLabelList'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAddToListOpIfListLabelPresent'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'invokeOp'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'label'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'List'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'invokeOp'}]},
                                                                                        {'Argument': [{'IdentifierName': 'listLabelOp'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{},
                                                                                           {'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'label'}}],
                                                                             'type': {'name': {'identifier': 'InvokeRule'}}},
                                                             'name': {'identifier': 'invokeOp'},
                                                             'type': {'name': {'identifier': 'InvokeRule'}}}]}},
                              {'condition': {'arguments': [{'name': {'identifier': 'ID'}},
                                                           {'name': {'identifier': 'invokeOp'}}],
                                             'name': {'identifier': 'needsImplicitLabel'},
                                             'scope': {'name': {'identifier': 'controller'}}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                         {'name': {'identifier': 'invokeOp'}}],
                                                           'name': {'identifier': 'defineImplicitLabel'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'invokeOp'}},
                                                                                           {'name': {'identifier': 'label'}}],
                                                                             'name': {'identifier': 'getAddToListOpIfListLabelPresent'}},
                                                             'name': {'identifier': 'listLabelOp'},
                                                             'type': {'name': {'identifier': 'AddToLabelList'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'invokeOp'}},
                                                            {'name': {'identifier': 'listLabelOp'}}],
                                              'name': {'identifier': 'list'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'IsExpression': [{'ThisExpression': 'this'},
                                                                                    {'IdentifierName': 'AltAST'}]},
                                                                  {'IsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Parent'},
                                                                                                                      {'IdentifierName': 'Parent'}]},
                                                                                    {'IdentifierName': 'RuleAST'}]}]},
                                        {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'AltAST'},
                                                                                            {'ThisExpression': 'this'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'Parent'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                          {'IdentifierName': 'Parent'}]}]},
                                                                                                                         {'IdentifierName': 'GetOutermostAltNode'}]},
                                                                                       {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'expression': {},
                                                      'type': {'name': {'identifier': 'AltAST'}}},
                                             'operator': 'AND',
                                             'right': {'expression': {'name': {'identifier': 'parent'},
                                                                      'scope': {'name': {'identifier': 'parent'}}},
                                                       'type': {'name': {'identifier': 'RuleAST'}}}},
                               'thenStmt': {'statements': [{'expression': {'expression': {},
                                                                           'type': {'name': {'identifier': 'AltAST'}}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'parent'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'getOutermostAltNode'},
                                                           'scope': {'inner': {'expression': {'name': {'identifier': 'parent'}},
                                                                               'type': {'name': {'identifier': 'GrammarAST'}}}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Sempred'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Sempred'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ast'}}],
                                                                             'name': {'identifier': 'sempred'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'ops'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                 'name': {'identifier': 'sempred'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RuleStopState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'atn'},
                                                                                                                                                                                             {'IdentifierName': 'ruleToStopState'}]},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'ruleIndex'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Epsilon'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'stop'}]},
                                                                                            {'Argument': [{'IdentifierName': 'right'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'name': {'identifier': 'ruleIndex'}},
                                                                             'name': {'name': {'identifier': 'ruleToStopState'},
                                                                                      'scope': {'name': {'identifier': 'atn'}}}},
                                                             'name': {'identifier': 'stop'},
                                                             'type': {'name': {'identifier': 'RuleStopState'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stop'}},
                                                            {'name': {'identifier': 'right'}}],
                                              'name': {'identifier': 'epsilon'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'text'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'text'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'extensionMembers'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'extensionMembers'},
                                                                                                            {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'OutputModelObject'}]}]},
                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'extensionMembers'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'member'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'extensionMembers'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'extensionMembers'}},
                                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                              'typeArguments': [{'name': {'identifier': 'OutputModelObject'}}]}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'member'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'extensionMembers'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'f'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'f'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'channelNameToValueMap'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'channel'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                                        {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'channel'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'channelNameToValueMap'}}},
                                                             'name': {'identifier': 'I'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'expression': {'variables': [{'initializer': {'condition': {'inner': {'left': {'name': {'identifier': 'I'}},
                                                                                                     'operator': 'NOT_EQUALS',
                                                                                                     'right': {}}},
                                                                             'elseExpr': {'expression': {'value': '1'},
                                                                                          'operator': 'MINUS'},
                                                                             'thenExpr': {'name': {'identifier': 'I'}}},
                                                             'name': {'identifier': 'i'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'name': {'identifier': 'i'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'OutputModelFactory'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ParserFactory'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'OutputModelController'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'OutputModelController'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                            {'IdentifierName': 'SetController'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'controller'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'controller'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                             'type': {'name': {'identifier': 'ParserFactory'}}},
                                                             'name': {'identifier': 'factory'},
                                                             'type': {'name': {'identifier': 'OutputModelFactory'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'factory'}}],
                                                                             'type': {'name': {'identifier': 'OutputModelController'}}},
                                                             'name': {'identifier': 'controller'},
                                                             'type': {'name': {'identifier': 'OutputModelController'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'controller'}}],
                                              'name': {'identifier': 'setController'},
                                              'scope': {'name': {'identifier': 'factory'}}}},
                              {'expression': {'name': {'identifier': 'controller'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                  {'IdentifierName': 'Count'}]},
                                                                                                                                {'NumericLiteralExpression': '1'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                               {'IdentifierName': 'Peek'}]},
                                                                                                                                                             {'ArgumentList': '()'}]},
                                                                                                                                   {'IdentifierName': 'SENTINEL'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'SENTINEL'},
                                                                                                                                                                  {'IdentifierName': 'Count'}]},
                                                                                                                                {'NumericLiteralExpression': '0'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                        {'IdentifierName': 'Peek'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'check': {'left': {'name': {'identifier': 'size'},
                                                  'scope': {'name': {'identifier': 'minFrequencies'}}},
                                         'operator': 'EQUALS',
                                         'right': {'value': '1'}}},
                              {'check': {'left': {'name': {'identifier': 'peek'},
                                                  'scope': {'name': {'identifier': 'minFrequencies'}}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {'name': {'identifier': 'SENTINEL'}}}},
                              {'check': {'name': {'identifier': 'isEmpty'},
                                         'scope': {'name': {'identifier': 'SENTINEL'}}}},
                              {'expression': {'name': {'identifier': 'peek'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'n'},
                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'recPrimaryAlts'},
                                                                                                                                {'IdentifierName': 'Count'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'recOpAlts'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'AddAssignmentExpression': [{'IdentifierName': 'n'},
                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'recOpAlts'},
                                                                                                                                {'IdentifierName': 'Count'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'n'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': '0'},
                                                             'name': {'identifier': 'n'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'recPrimaryAlts'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'PLUS',
                                                           'target': {'name': {'identifier': 'n'}},
                                                           'value': {'name': {'identifier': 'size'},
                                                                     'scope': {'name': {'identifier': 'recPrimaryAlts'}}}}}},
                              {'condition': {'left': {'name': {'identifier': 'recOpAlts'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'PLUS',
                                                           'target': {'name': {'identifier': 'n'}},
                                                           'value': {'name': {'identifier': 'size'},
                                                                     'scope': {'name': {'identifier': 'recOpAlts'}}}}}},
                              {'expression': {'name': {'identifier': 'n'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'EqualsExpression': [{'IdentifierName': 'Type'},
                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                    {'IdentifierName': 'COMBINED'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'getType'}},
                                              'operator': 'EQUALS',
                                              'right': {'name': {'identifier': 'COMBINED'},
                                                        'scope': {'name': {'identifier': 'ANTLRParser'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AltBlock'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'blkAST'}]},
                                                                                            {'Argument': [{'IdentifierName': 'alts'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'blkAST'}},
                                                            {'name': {'identifier': 'alts'}}],
                                              'type': {'name': {'identifier': 'AltBlock'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildBaseListenerOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildBaseListenerOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AntlrTool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AntlrTool'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'antlr'},
                                                                                                        {'IdentifierName': 'LoadGrammar'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'Tool'}}},
                                                             'name': {'identifier': 'antlr'},
                                                             'type': {'name': {'identifier': 'Tool'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'fileName'}}],
                                              'name': {'identifier': 'loadGrammar'},
                                              'scope': {'name': {'identifier': 'antlr'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'DispatchMethod'}]}]},
                                                                                                              {'ArgumentList': '()'}]}]}]},
                       {'IfStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                        {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'tool'}]},
                                                                          {'IdentifierName': 'gen_listener'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ListenerDispatchMethod'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                                      {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ListenerDispatchMethod'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                                      {'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                        {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'tool'}]},
                                                                          {'IdentifierName': 'gen_visitor'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dispatchMethods'},
                                                                                                                                        {'IdentifierName': 'Add'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'VisitorDispatchMethod'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'dispatchMethods'}},
                                              'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                 'typeArguments': [{'name': {'identifier': 'DispatchMethod'}}]}}}},
                              {'condition': {'name': {'identifier': 'gen_listener'},
                                             'scope': {'name': {'identifier': 'tool'},
                                                       'scope': {'name': {'identifier': 'getGrammar'},
                                                                 'scope': {'name': {'identifier': 'factory'}}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                        {'value': 'true'}],
                                                                                          'type': {'name': {'identifier': 'ListenerDispatchMethod'}}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'dispatchMethods'}}}},
                                                           {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                        {'value': 'false'}],
                                                                                          'type': {'name': {'identifier': 'ListenerDispatchMethod'}}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'dispatchMethods'}}}}]}},
                              {'condition': {'name': {'identifier': 'gen_visitor'},
                                             'scope': {'name': {'identifier': 'tool'},
                                                       'scope': {'name': {'identifier': 'getGrammar'},
                                                                 'scope': {'name': {'identifier': 'factory'}}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}}],
                                                                                          'type': {'name': {'identifier': 'VisitorDispatchMethod'}}}],
                                                                           'name': {'identifier': 'add'},
                                                                           'scope': {'name': {'identifier': 'dispatchMethods'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckGrammarName'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkGrammarName'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recognizer'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'Index'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'firstErrorTokenIndex'},
                                                              {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'firstErrorTokenIndex'},
                                                                                                            {'IdentifierName': 'errIndex'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IIntStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recognizer'},
                                                                                                                                                                {'IdentifierName': 'InputStream'}]}]}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                  {'IdentifierName': 'Index'}]},
                                                                {'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'input'},
                                                                                                                          {'IdentifierName': 'Size'}]},
                                                                                        {'NumericLiteralExpression': '1'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recognizer'},
                                                                                                                                        {'IdentifierName': 'Consume'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'index'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'recognizer'}}}},
                                                             'name': {'identifier': 'errIndex'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'firstErrorTokenIndex'}},
                                             'operator': 'EQUALS',
                                             'right': {'expression': {'value': '1'},
                                                       'operator': 'MINUS'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'firstErrorTokenIndex'}},
                                                                           'value': {'name': {'identifier': 'errIndex'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getInputStream'},
                                                                             'scope': {'name': {'identifier': 'recognizer'}}},
                                                             'name': {'identifier': 'input'},
                                                             'type': {'name': {'identifier': 'TokenStream'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'index'},
                                                      'scope': {'name': {'identifier': 'input'}}},
                                             'operator': 'LESS',
                                             'right': {'left': {'name': {'identifier': 'size'},
                                                                'scope': {'name': {'identifier': 'input'}}},
                                                       'operator': 'MINUS',
                                                       'right': {'value': '1'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'consume'},
                                                                           'scope': {'name': {'identifier': 'recognizer'}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'left'},
                                                                                                            {'IdentifierName': 'AddTransition'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'WildcardTransition'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'right'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                  {'IdentifierName': 'atnState'}]},
                                                                                {'IdentifierName': 'left'}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Handle'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'left'}]},
                                                                                            {'Argument': [{'IdentifierName': 'right'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'node'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'left'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'node'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'right'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'right'}}],
                                                             'type': {'name': {'identifier': 'WildcardTransition'}}}],
                                              'name': {'identifier': 'addTransition'},
                                              'scope': {'name': {'identifier': 'left'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'atnState'},
                                                         'scope': {'name': {'identifier': 'node'}}},
                                              'value': {'name': {'identifier': 'left'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'left'}},
                                                            {'name': {'identifier': 'right'}}],
                                              'type': {'name': {'identifier': 'Handle'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'originalAST'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'originalAST'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'GrammarError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'SourceName'}]},
                                                                                            {'Argument': [{'IdentifierName': 'token'}]},
                                                                                            {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'etype'}},
                                                            {'name': {'identifier': 'getSourceName'}},
                                                            {'name': {'identifier': 'token'}},
                                                            {'name': {'identifier': 'args'}}],
                                              'name': {'identifier': 'grammarError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                              {'IdentifierName': 'codeBlockLevel'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'codeBlockLevel'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetBadWords'},
                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                        {'IdentifierName': 'Contains'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'idNode'},
                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'idNode'}}}],
                                              'name': {'identifier': 'contains'},
                                              'scope': {'name': {'identifier': 'getBadWords'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RuleRefAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'RuleRefAST'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                  {'IdentifierName': 'Token'}]},
                                                                                {'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Token'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'Token'}]},
                                                                                {'ObjectCreationExpression': [{'IdentifierName': 'CommonToken'},
                                                                                                              {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                {'IdentifierName': 'Token'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'r'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                             'type': {'name': {'identifier': 'RuleRefAST'}}},
                                                             'name': {'identifier': 'r'},
                                                             'type': {'name': {'identifier': 'RuleRefAST'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'token'},
                                                         'scope': {'name': {'identifier': 'r'}}},
                                              'value': {'name': {'identifier': 'token'},
                                                        'scope': {}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'token'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'token'},
                                                                       'scope': {'name': {'identifier': 'r'}}}],
                                                        'type': {'name': {'identifier': 'CommonToken'}}}}},
                              {'expression': {'name': {'identifier': 'r'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                 {'IdentifierName': 'name'}]},
                                                               {'IdentifierName': 'VOCAB_FILE_EXTENSION'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'name'},
                                                       'scope': {'name': {'identifier': 'g'}}},
                                              'operator': 'PLUS',
                                              'right': {'name': {'identifier': 'VOCAB_FILE_EXTENSION'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRMessage'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarSemanticsMessage'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'token'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Emit'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'etype'}},
                                                                                           {'name': {'identifier': 'fileName'}},
                                                                                           {'name': {'identifier': 'token'}},
                                                                                           {'name': {'identifier': 'args'}}],
                                                                             'type': {'name': {'identifier': 'GrammarSemanticsMessage'}}},
                                                             'name': {'identifier': 'msg'},
                                                             'type': {'name': {'identifier': 'ANTLRMessage'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'etype'}},
                                                            {'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'emit'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                                 {'IdentifierName': 'alt'}]},
                                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]},
                                                                                                                  {'IdentifierName': 'ast'}]},
                                                                                {'IdentifierName': 'alt'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ast'},
                                                         'scope': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                   'name': {'name': {'identifier': 'alt'},
                                                                            'scope': {'name': {'identifier': 'currentRule'}}}}},
                                              'value': {'name': {'identifier': 'alt'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Handle'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': '_RuleRef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'h'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'node'}}],
                                                                             'name': {'identifier': '_ruleRef'}},
                                                             'name': {'identifier': 'h'},
                                                             'type': {'name': {'identifier': 'Handle'}}}]}},
                              {'expression': {'name': {'identifier': 'h'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentRule'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'GetRule'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentRule'}},
                                              'value': {'arguments': [{'name': {'identifier': 'getText'},
                                                                       'scope': {'name': {'identifier': 'ID'}}}],
                                                        'name': {'identifier': 'getRule'},
                                                        'scope': {'name': {'identifier': 'g'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeGenerator'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetGenerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'VisitorFile'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                                                                                      {'IdentifierName': 'GetVisitorFileName'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getGenerator'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'gen'},
                                                             'type': {'name': {'identifier': 'CodeGenerator'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'getVisitorFileName'},
                                                             'scope': {'name': {'identifier': 'gen'}}}],
                                              'type': {'name': {'identifier': 'VisitorFile'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'obj'}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'obj'},
                                                                                                                 {'IdentifierName': 'Decl'}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'IfStatement': [{'IsExpression': [{'IdentifierName': 'obj'},
                                                          {'IdentifierName': 'ContextGetterDecl'}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'Decl'},
                                                                                                                                                                                         {'IdentifierName': 'obj'}]}]},
                                                                                                                                        {'IdentifierName': 'name'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'obj'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                      'type': {'name': {'identifier': 'Decl'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'condition': {'expression': {'name': {'identifier': 'obj'}},
                                             'type': {'name': {'identifier': 'ContextGetterDecl'}}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                                 'type': {'name': {'identifier': 'Decl'}}}}}],
                                              'name': {'identifier': 'equals'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'strings'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'ref'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'strings'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Children'},
                                                                                                                                                                    {'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]}]},
                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                        {'IdentifierName': 'ToArray'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'elementType': {'name': {'identifier': 'GrammarAST'}},
                                                             'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                       'scope': {'name': {'identifier': 'children'}}}}]}],
                                              'name': {'identifier': 'toArray'},
                                              'scope': {'name': {'identifier': 'children'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                            {'IdentifierName': 'Create'}]},
                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tokenType'}]},
                                                                                                            {'Argument': [{'IdentifierName': 'fromToken'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'tokenType'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'RULE'},
                                                       'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                               'elseStmt': {'condition': {'left': {'name': {'identifier': 'tokenType'}},
                                                          'operator': 'EQUALS',
                                                          'right': {'name': {'identifier': 'STRING_LITERAL'},
                                                                    'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                                            'elseStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                        'target': {'name': {'identifier': 't'}},
                                                                                        'value': {'expression': {'arguments': [{'name': {'identifier': 'tokenType'}},
                                                                                                                               {'name': {'identifier': 'text'}}],
                                                                                                                 'name': {'identifier': 'create'},
                                                                                                                 'scope': {}},
                                                                                                  'type': {'name': {'identifier': 'GrammarAST'}}}}}]},
                                            'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                        'target': {'name': {'identifier': 't'}},
                                                                                        'value': {'arguments': [{'arguments': [{'name': {'identifier': 'tokenType'}},
                                                                                                                               {'name': {'identifier': 'text'}}],
                                                                                                                 'type': {'name': {'identifier': 'CommonToken'}}}],
                                                                                                  'type': {'name': {'identifier': 'TerminalAST'}}}}}]}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 't'}},
                                                                           'value': {'arguments': [{'arguments': [{'name': {'identifier': 'tokenType'}},
                                                                                                                  {'name': {'identifier': 'text'}}],
                                                                                                    'type': {'name': {'identifier': 'CommonToken'}}}],
                                                                                     'type': {'name': {'identifier': 'RuleAST'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'input'}}],
                                              'name': {'identifier': 'setInputStream'},
                                              'scope': {'name': {'identifier': 'token'},
                                                        'scope': {'name': {'identifier': 't'}}}}},
                              {'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'set'},
                                                                                                    {'IdentifierName': 'Contains'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'el'}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'CHARACTERS_COLLISION_IN_SET'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                        {'IdentifierName': 'fileName'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ast'},
                                                                                                                                                                        {'IdentifierName': 'Token'}]}]},
                                                                                                                        {'Argument': [{'CastExpression': [{'PredefinedType': 'char'},
                                                                                                                                                          {'IdentifierName': 'el'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ast'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                      'name': {'identifier': 'contains'},
                                                                      'scope': {'name': {'identifier': 'set'}}},
                                                        'thenStmt': {'statements': [{'expression': {'variables': [{'name': {'identifier': 'setText'},
                                                                                                                   'type': {'name': {'identifier': 'String'}}}]}},
                                                                                    {'condition': {'left': {'name': {'identifier': 'getChildren'},
                                                                                                            'scope': {'name': {'identifier': 'ast'}}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {}},
                                                                                     'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                                                                                                                'name': {'identifier': 'sb'},
                                                                                                                                                'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                                                                                                                 {'body': {'statements': [{'condition': {'expression': {'name': {'identifier': 'child'}},
                                                                                                                                                         'type': {'name': {'identifier': 'RangeAST'}}},
                                                                                                                                           'elseStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                                                                                      'scope': {'inner': {'expression': {'name': {'identifier': 'child'}},
                                                                                                                                                                                                                          'type': {'name': {'identifier': 'GrammarAST'}}}}}],
                                                                                                                                                                                       'name': {'identifier': 'append'},
                                                                                                                                                                                       'scope': {'name': {'identifier': 'sb'}}}}]},
                                                                                                                                           'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                                                                                      'scope': {'arguments': [{'value': '0'}],
                                                                                                                                                                                                                'name': {'identifier': 'getChild'},
                                                                                                                                                                                                                'scope': {'inner': {'expression': {'name': {'identifier': 'child'}},
                                                                                                                                                                                                                                    'type': {'name': {'identifier': 'RangeAST'}}}}}}],
                                                                                                                                                                                       'name': {'identifier': 'append'},
                                                                                                                                                                                       'scope': {'name': {'identifier': 'sb'}}}},
                                                                                                                                                                       {'expression': {'arguments': [{'value': '..'}],
                                                                                                                                                                                       'name': {'identifier': 'append'},
                                                                                                                                                                                       'scope': {'name': {'identifier': 'sb'}}}},
                                                                                                                                                                       {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                                                                                      'scope': {'arguments': [{'value': '1'}],
                                                                                                                                                                                                                'name': {'identifier': 'getChild'},
                                                                                                                                                                                                                'scope': {'inner': {'expression': {'name': {'identifier': 'child'}},
                                                                                                                                                                                                                                    'type': {'name': {'identifier': 'RangeAST'}}}}}}],
                                                                                                                                                                                       'name': {'identifier': 'append'},
                                                                                                                                                                                       'scope': {'name': {'identifier': 'sb'}}}}]}},
                                                                                                                                          {'expression': {'arguments': [{'value': ' '
                                                                                                                                                                                  '| '}],
                                                                                                                                                          'name': {'identifier': 'append'},
                                                                                                                                                          'scope': {'name': {'identifier': 'sb'}}}}]},
                                                                                                                  'iterable': {'name': {'identifier': 'getChildren'},
                                                                                                                               'scope': {'name': {'identifier': 'ast'}}},
                                                                                                                  'variable': {'variables': [{'name': {'identifier': 'child'},
                                                                                                                                              'type': {'name': {'identifier': 'Object'}}}]}},
                                                                                                                 {'expression': {'arguments': [{'left': {'name': {'identifier': 'length'},
                                                                                                                                                         'scope': {'name': {'identifier': 'sb'}}},
                                                                                                                                                'operator': 'MINUS',
                                                                                                                                                'right': {'value': '3'}},
                                                                                                                                               {'name': {'identifier': 'length'},
                                                                                                                                                'scope': {'name': {'identifier': 'sb'}}},
                                                                                                                                               {'value': ''}],
                                                                                                                                 'name': {'identifier': 'replace'},
                                                                                                                                 'scope': {'name': {'identifier': 'sb'}}}},
                                                                                                                 {'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'setText'}},
                                                                                                                                 'value': {'name': {'identifier': 'toString'},
                                                                                                                                           'scope': {'name': {'identifier': 'sb'}}}}}]},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'setText'}},
                                                                                                                                 'value': {'name': {'identifier': 'getText'},
                                                                                                                                           'scope': {'name': {'identifier': 'ast'}}}}}]}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'CHARACTERS_COLLISION_IN_SET'},
                                                                                                                   'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                                  {'name': {'identifier': 'fileName'},
                                                                                                                   'scope': {'name': {'identifier': 'g'}}},
                                                                                                                  {'name': {'identifier': 'getToken'},
                                                                                                                   'scope': {'name': {'identifier': 'ast'}}},
                                                                                                                  {'arguments': [{'name': {'identifier': 'a'}},
                                                                                                                                 {'name': {'identifier': 'b'}}],
                                                                                                                   'name': {'identifier': 'getRangeEscapedString'},
                                                                                                                   'scope': {'name': {'identifier': 'CharSupport'}}},
                                                                                                                  {'name': {'identifier': 'setText'}}],
                                                                                                    'name': {'identifier': 'grammarError'},
                                                                                                    'scope': {'name': {'identifier': 'errMgr'},
                                                                                                              'scope': {'name': {'identifier': 'tool'},
                                                                                                                        'scope': {'name': {'identifier': 'g'}}}}}},
                                                                                    {}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'b'}}},
                               'initialization': [{'variables': [{'initializer': {'name': {'identifier': 'a'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'controller'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'controller'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'types'},
                                                                                                    {'IdentifierName': 'Contains'}]},
                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                    {'IdentifierName': 'Type'}]}]}]}]},
                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nodes'},
                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                           {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'ChildCount'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                               {'InvocationExpression': [{'IdentifierName': 'GetChild'},
                                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'child'},
                                                                                                                                         {'IdentifierName': 'GetNodesWithTypePreorderDFS_'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'nodes'}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'types'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'getType'},
                                                            'scope': {}}],
                                             'name': {'identifier': 'contains'},
                                             'scope': {'name': {'identifier': 'types'}}},
                               'thenStmt': {'expression': {'arguments': [{}],
                                                           'name': {'identifier': 'add'},
                                                           'scope': {'name': {'identifier': 'nodes'}}}}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                     'name': {'identifier': 'getChild'}},
                                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}},
                                                                                      'name': {'identifier': 'child'},
                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'nodes'}},
                                                                                     {'name': {'identifier': 'types'}}],
                                                                       'name': {'identifier': 'getNodesWithTypePreorderDFS_'},
                                                                       'scope': {'name': {'identifier': 'child'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'getChildCount'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'implicitLexer'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'implicitLexer'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                        {'IdentifierName': 'GetGenerator'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getGenerator'},
                                              'scope': {'name': {'identifier': 'delegate'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TreeVisitor'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TreeVisitor'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Antlr'},
                                                                                                                                        {'IdentifierName': 'Runtime'}]},
                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'object'},
                                                                                                                                         {'PredefinedType': 'object'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleLambdaExpression': [{'Parameter': 't'},
                                                                                                                                                          {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                                                                                                                               {'IdentifierName': 't'}]}]},
                                                                                                                                                                                                                                              {'IdentifierName': 'Type'}]},
                                                                                                                                                                                                            {'NumericLiteralExpression': '3'}]},
                                                                                                                                                                                      {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'ExpandParameterizedLoop'},
                                                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                                                                                                                                    {'IdentifierName': 't'}]}]}]}]}]}]}]},
                                                                                                                                                                     {'ReturnStatement': [{'IdentifierName': 't'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Antlr'},
                                                                                                                                        {'IdentifierName': 'Runtime'}]},
                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'object'},
                                                                                                                                         {'PredefinedType': 'object'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleLambdaExpression': [{'Parameter': 't'},
                                                                                                                                                          {'IdentifierName': 't'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                            {'IdentifierName': 'Visit'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'root'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TreeVisitorAction'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'preAction'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'postAction'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'GrammarASTAdaptor'}}}],
                                                                             'type': {'name': {'identifier': 'TreeVisitor'}}},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'name': {'identifier': 'TreeVisitor'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'root'}},
                                                            {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'getType'},
                                                                                                                                     'scope': {'inner': {'expression': {'name': {'identifier': 't'}},
                                                                                                                                                         'type': {'name': {'identifier': 'GrammarAST'}}}}},
                                                                                                                            'operator': 'EQUALS',
                                                                                                                            'right': {'value': '3'}},
                                                                                                              'thenStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 't'}},
                                                                                                                                                                         'type': {'name': {'identifier': 'GrammarAST'}}}],
                                                                                                                                                          'name': {'identifier': 'expandParameterizedLoop'}}}]}},
                                                                                                             {'expression': {'name': {'identifier': 't'}}}]},
                                                                                     'name': {'identifier': 'pre'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 't'},
                                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                                                     'type': {'name': {'identifier': 'Object'}}},
                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'name': {'identifier': 't'}}}]},
                                                                                     'name': {'identifier': 'post'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 't'},
                                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                             'type': {'name': {'identifier': 'TreeVisitorAction'}}}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetOuterMostAltCodeBlock'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'alt'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                             {'IdentifierName': 'altLabel'}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                               {'IdentifierName': 'altLabel'}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'enclosingRuleRunction'},
                                                                              {'IdentifierName': 'name'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getOuterMostAltCodeBlock'}},
                                                             'name': {'identifier': 'alt'},
                                                             'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'alt'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'altLabel'},
                                                                'scope': {'name': {'identifier': 'alt'}}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'altLabel'},
                                                           'scope': {'name': {'identifier': 'alt'}}}}},
                              {'expression': {'name': {'identifier': 'name'},
                                              'scope': {'name': {'identifier': 'enclosingRuleRunction'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'extensions'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ext'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ext'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'extensions'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'p'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'p'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'EqualsExpression': [{'IdentifierName': 'Type'},
                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                    {'IdentifierName': 'PARSER'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'getType'}},
                                              'operator': 'EQUALS',
                                              'right': {'name': {'identifier': 'PARSER'},
                                                        'scope': {'name': {'identifier': 'ANTLRParser'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'errors'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errors'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                      {'IdentifierName': 'Action'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                                   {'IdentifierName': 'Action'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'string'},
                                             {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                 {'IdentifierName': 'namedActions'}]},
                                                                               {'IdentifierName': 'Keys'}]},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionAST'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                              {'IdentifierName': 'namedActions'}]},
                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'namedActions'},
                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                                                                 {'ObjectCreationExpression': [{'IdentifierName': 'Action'},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                 {'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'namedActions'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashMap'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                        {'name': {'identifier': 'Action'}}]}},
                                                             'name': {'identifier': 'namedActions'},
                                                             'type': {'name': {'identifier': 'Map'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                        {'name': {'identifier': 'Action'}}]}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                                                      'name': {'identifier': 'get'},
                                                                                                      'scope': {'name': {'identifier': 'namedActions'},
                                                                                                                'scope': {'name': {'identifier': 'g'}}}},
                                                                                      'name': {'identifier': 'ast'},
                                                                                      'type': {'name': {'identifier': 'ActionAST'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'name'}},
                                                                                     {'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                    {'name': {'identifier': 'ast'}}],
                                                                                      'type': {'name': {'identifier': 'Action'}}}],
                                                                       'name': {'identifier': 'put'},
                                                                       'scope': {'name': {'identifier': 'namedActions'}}}}]},
                               'iterable': {'name': {'identifier': 'keySet'},
                                            'scope': {'name': {'identifier': 'namedActions'},
                                                      'scope': {'name': {'identifier': 'g'}}}},
                               'variable': {'variables': [{'name': {'identifier': 'name'},
                                                           'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'name': {'identifier': 'namedActions'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'Grammar'},
                                             {'IdentifierName': 'importedGrammars'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                       {'IdentifierName': 'name'}]},
                                                                                                                                     {'IdentifierName': 'Equals'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                         {'ReturnStatement': [{'IdentifierName': 'g'}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'name'},
                                                                                'scope': {'name': {'identifier': 'g'}}}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 'g'}}}}]},
                               'iterable': {'name': {'identifier': 'importedGrammars'}},
                               'variable': {'variables': [{'name': {'identifier': 'g'},
                                                           'type': {'name': {'identifier': 'Grammar'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'size'},
                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                  {'IdentifierName': 'Count'}]}]},
                                        {'Block': [{'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'size'},
                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                                                    {'IdentifierName': 'Count'}]}]},
                                                                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                                                                            {'IdentifierName': 'RemoveAt'}]},
                                                                                                                          {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                                                                                                                                    {'IdentifierName': 'Count'}]},
                                                                                                                                                                                  {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                                        {'ElseClause': [{'Block': [{'WhileStatement': [{'GreaterThanExpression': [{'IdentifierName': 'size'},
                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                                                                    {'IdentifierName': 'Count'}]}]},
                                                                                       {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'list'},
                                                                                                                                                                                       {'IdentifierName': 'Add'}]},
                                                                                                                                                     {'ArgumentList': [{'Argument': [{'DefaultExpression': [{'IdentifierName': 'T'}]}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'size'}},
                                             'operator': 'LESS',
                                             'right': {'name': {'identifier': 'size'},
                                                       'scope': {'name': {'identifier': 'list'}}}},
                               'elseStmt': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'list'}}}}]},
                                                            'condition': {'left': {'name': {'identifier': 'size'}},
                                                                          'operator': 'GREATER',
                                                                          'right': {'name': {'identifier': 'size'},
                                                                                    'scope': {'name': {'identifier': 'list'}}}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                                                           'scope': {'arguments': [{'name': {'identifier': 'size'}},
                                                                                                   {'name': {'identifier': 'size'},
                                                                                                    'scope': {'name': {'identifier': 'list'}}}],
                                                                                     'name': {'identifier': 'subList'},
                                                                                     'scope': {'name': {'identifier': 'list'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AttributeDict'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AttributeDict'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                                                                                         {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                {'PredefinedType': 'int'}]}]}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'SplitDecls'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'separator'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'QualifiedName': [{'IdentifierName': 'System'},
                                                                {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                       {'PredefinedType': 'int'}]}]}]},
                                             {'IdentifierName': 'decls'},
                                             {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'decl'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Item1'}]},
                                                                                                                                                                                                  {'IdentifierName': 'Trim'}]},
                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                      {'IdentifierName': 'Length'}]},
                                                                                                    {'NumericLiteralExpression': '0'}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Attribute'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'ParseAttributeDef'},
                                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'action'}]},
                                                                                                                                                                                                                                       {'Argument': [{'IdentifierName': 'decl'}]},
                                                                                                                                                                                                                                       {'Argument': [{'IdentifierName': 'g'}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'dict'},
                                                                                                                                                                         {'IdentifierName': 'Add'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'dict'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'AttributeDict'}}},
                                                             'name': {'identifier': 'dict'},
                                                             'type': {'name': {'identifier': 'AttributeDict'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 's'}},
                                                                                           {'name': {'identifier': 'separator'}}],
                                                                             'name': {'identifier': 'splitDecls'}},
                                                             'name': {'identifier': 'decls'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Pair'},
                                                                                         'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                           {'name': {'identifier': 'Integer'}}]}]}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                                               'scope': {'name': {'identifier': 'trim'},
                                                                                         'scope': {'name': {'identifier': 'a'},
                                                                                                   'scope': {'name': {'identifier': 'decl'}}}}},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'action'}},
                                                                                                                                                 {'name': {'identifier': 'decl'}},
                                                                                                                                                 {'name': {'identifier': 'g'}}],
                                                                                                                                   'name': {'identifier': 'parseAttributeDef'}},
                                                                                                                   'name': {'identifier': 'a'},
                                                                                                                   'type': {'name': {'identifier': 'Attribute'}}}]}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'a'}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'dict'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'decls'}},
                               'variable': {'variables': [{'name': {'identifier': 'decl'},
                                                           'type': {'name': {'identifier': 'Pair'},
                                                                    'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                      {'name': {'identifier': 'Integer'}}]}}]}},
                              {'expression': {'name': {'identifier': 'dict'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'grammarName'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Grammar'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetImportedGrammar'},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'grammarName'}]}]}]}]}]}]}]},
                                                   {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'g'},
                                                                                          {'NullLiteralExpression': 'null'}]},
                                                                    {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Rule'},
                                                                                                           {'VariableDeclarator': 'r'}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                          {'IdentifierName': 'rules'}]},
                                                                                                                                        {'IdentifierName': 'TryGetValue'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ruleName'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'r'}]}]}]}]},
                                                   {'ReturnStatement': [{'IdentifierName': 'r'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetRule'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ruleName'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'grammarName'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'grammarName'}}],
                                                                                                          'name': {'identifier': 'getImportedGrammar'}},
                                                                                          'name': {'identifier': 'g'},
                                                                                          'type': {'name': {'identifier': 'Grammar'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'g'}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'ruleName'}}],
                                                                           'name': {'identifier': 'get'},
                                                                           'scope': {'name': {'identifier': 'rules'},
                                                                                     'scope': {'name': {'identifier': 'g'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ruleName'}}],
                                              'name': {'identifier': 'getRule'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReportError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'reportError'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TemplateGroup'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'targetTemplates'},
                                                                                                                                                                {'IdentifierName': 'Value'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'result'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'result'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                                                        {'IdentifierName': 'LoadTemplates'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                        {'IdentifierName': 'RegisterRenderer'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'TypeOfExpression': [{'PredefinedType': 'string'}]}]},
                                                                                                                        {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'JavaStringRenderer'},
                                                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                                                        {'Argument': [{'TrueLiteralExpression': 'true'}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'targetTemplates'},
                                                                                                                                              {'IdentifierName': 'Value'}]},
                                                                                                            {'IdentifierName': 'result'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'targetTemplates'}}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'STGroup'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'result'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'result'}},
                                                                           'value': {'name': {'identifier': 'loadTemplates'},
                                                                                     'scope': {}}}},
                                                           {'expression': {'arguments': [{'type': {'name': {'identifier': 'String'}}},
                                                                                         {'type': {'name': {'identifier': 'JavaStringRenderer'}}},
                                                                                         {'value': 'true'}],
                                                                           'name': {'identifier': 'registerRenderer'},
                                                                           'scope': {'name': {'identifier': 'result'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'result'}}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'targetTemplates'}}}}]}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetActionResolver'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'setActionResolver'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'terminals'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@ref'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenIDRefs'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@ref'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'currentRule'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                                                                                         {'IdentifierName': 'alt'}]},
                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]},
                                                                                                                                                                          {'IdentifierName': 'tokenRefs'}]},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': '@ref'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ref'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'terminals'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ref'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'tokenIDRefs'}}}},
                              {'condition': {'left': {'name': {'identifier': 'currentRule'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'ref'}}},
                                                                                         {'name': {'identifier': 'ref'}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'tokenRefs'},
                                                                                     'scope': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                                               'name': {'name': {'identifier': 'alt'},
                                                                                                        'scope': {'name': {'identifier': 'currentRule'}}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'FalseLiteralExpression': 'false'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IntervalSet'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'IntervalSet'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'altLook'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'IntervalSet'},
                                             {'IdentifierName': 'altLook'},
                                             {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'look'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                         {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                                        {'IfStatement': [{'LogicalNotExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'look'},
                                                                                                                                                                                                 {'IdentifierName': 'And'}]},
                                                                                                                                                               {'ArgumentList': [{'Argument': [{'IdentifierName': 'combined'}]}]}]},
                                                                                                                                     {'IdentifierName': 'IsNil'}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'collision'},
                                                                                                                                             {'TrueLiteralExpression': 'true'}]}]},
                                                                                    {'BreakStatement': 'break;'}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'combined'},
                                                                                                                                             {'IdentifierName': 'AddAll'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'look'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalNotExpression': [{'IdentifierName': 'collision'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'value': 'false'},
                                                             'name': {'identifier': 'collision'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'IntervalSet'}}},
                                                             'name': {'identifier': 'combined'},
                                                             'type': {'name': {'identifier': 'IntervalSet'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'altLook'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'look'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'expression': {'value': 'false'}}},
                                                       {'condition': {'expression': {'name': {'identifier': 'isNil'},
                                                                                     'scope': {'arguments': [{'name': {'identifier': 'combined'}}],
                                                                                               'name': {'identifier': 'and'},
                                                                                               'scope': {'name': {'identifier': 'look'}}}},
                                                                      'operator': 'LOGICAL_COMPLEMENT'},
                                                        'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'collision'}},
                                                                                                    'value': {'value': 'true'}}},
                                                                                    {}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'look'}}],
                                                                       'name': {'identifier': 'addAll'},
                                                                       'scope': {'name': {'identifier': 'combined'}}}}]},
                               'iterable': {'name': {'identifier': 'altLook'}},
                               'variable': {'variables': [{'name': {'identifier': 'look'},
                                                           'type': {'name': {'identifier': 'IntervalSet'}}}]}},
                              {'expression': {'expression': {'name': {'identifier': 'collision'}},
                                              'operator': 'LOGICAL_COMPLEMENT'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeGenerator'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetGenerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BaseListenerFile'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                                                                                      {'IdentifierName': 'GetBaseListenerFileName'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getGenerator'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'gen'},
                                                             'type': {'name': {'identifier': 'CodeGenerator'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'getBaseListenerFileName'},
                                                             'scope': {'name': {'identifier': 'gen'}}}],
                                              'type': {'name': {'identifier': 'BaseListenerFile'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenRefs'},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                  {'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tokenRefs'},
                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                          {'IdentifierName': 'type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                          {'IdentifierName': 'TOKEN_LABEL'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'x'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'tokenRefs'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'},
                                                                'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'TOKEN_LABEL'},
                                                                 'scope': {'name': {'identifier': 'LabelType'}}}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                {'IdentifierName': 'ops'}]},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                   {'IdentifierName': 'ops'}]},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'var'},
                                             {'IdentifierName': 'ops'},
                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                    {'IdentifierName': 'ops'}]},
                                                                                                                                  {'IdentifierName': 'Add'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ops'},
                                                      'scope': {}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'ops'},
                                                                      'scope': {}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ops'}}],
                                              'name': {'identifier': 'addAll'},
                                              'scope': {'name': {'identifier': 'ops'},
                                                        'scope': {}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeGenerator'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetGenerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BaseVisitorFile'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                                                                                      {'IdentifierName': 'GetBaseVisitorFileName'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getGenerator'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'gen'},
                                                             'type': {'name': {'identifier': 'CodeGenerator'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'getBaseVisitorFileName'},
                                                             'scope': {'name': {'identifier': 'gen'}}}],
                                              'type': {'name': {'identifier': 'BaseVisitorFile'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'options'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                               {'VariableDeclarator': 'value'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'options'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'value'}]}]}]}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'value'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'options'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'options'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'errMgr'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errMgr'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'ThisExpression': 'this'},
                                                          {'IdentifierName': 'CodeBlockForOuterMostAlt'}]},
                                        {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                                            {'ThisExpression': 'this'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeBlock'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'enclosingBlock'}]}]}]}]},
                       {'WhileStatement': [{'NotEqualsExpression': [{'IdentifierName': 'p'},
                                                                    {'NullLiteralExpression': 'null'}]},
                                           {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'p'},
                                                                                         {'IdentifierName': 'CodeBlockForOuterMostAlt'}]},
                                                                       {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                                                                           {'IdentifierName': 'p'}]}]}]}]},
                                                      {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'p'},
                                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                 {'IdentifierName': 'enclosingBlock'}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {},
                                             'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}},
                               'thenStmt': {'statements': [{'expression': {'expression': {},
                                                                           'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'enclosingBlock'}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'name': {'identifier': 'CodeBlock'}}}]}},
                              {'body': {'statements': [{'condition': {'expression': {'name': {'identifier': 'p'}},
                                                                      'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}},
                                                        'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'p'}},
                                                                                                    'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}}]}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'p'}},
                                                                       'value': {'name': {'identifier': 'enclosingBlock'},
                                                                                 'scope': {'name': {'identifier': 'p'}}}}}]},
                               'condition': {'left': {'name': {'identifier': 'p'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'LogicalOrExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                                 {'IdentifierName': 'HasAltSpecificContexts'}]},
                                                                                               {'ArgumentList': '()'}]},
                                                                     {'NotEqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'GetAltLabels'},
                                                                                                                        {'ArgumentList': '()'}]},
                                                                                              {'NullLiteralExpression': 'null'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'hasAltSpecificContexts'},
                                                       'scope': {}},
                                              'operator': 'OR',
                                              'right': {'left': {'name': {'identifier': 'getAltLabels'}},
                                                        'operator': 'NOT_EQUALS',
                                                        'right': {}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'SubtractExpression': [{'IdentifierName': 'numAlts'},
                                                                                       {'IdentifierName': 'alt'}]},
                                                               {'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'left': {'name': {'identifier': 'numAlts'}},
                                                       'operator': 'MINUS',
                                                       'right': {'name': {'identifier': 'alt'}}},
                                              'operator': 'PLUS',
                                              'right': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CheckElementOptions'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'elem'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'elem'}},
                                                                                           {'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'valueAST'}}],
                                                                             'name': {'identifier': 'checkElementOptions'}},
                                                             'name': {'identifier': 'ok'},
                                                             'type': {'type': 'BOOLEAN'}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'errorType'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errorType'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'types'},
                                                                                                    {'IdentifierName': 'Member'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'Type'}]}]}]},
                                        {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'Children'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ForEachStatement': [{'PredefinedType': 'object'},
                                             {'IdentifierName': 'Children'},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                   {'IdentifierName': 'c'}]}]}]}]}]},
                                                        {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'types'},
                                                                                                                                     {'IdentifierName': 'Member'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                     {'IdentifierName': 'Type'}]}]}]}]},
                                                                         {'ReturnStatement': [{'IdentifierName': 't'}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CommonTree'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                                                                           {'IdentifierName': 'GetFirstDescendantWithType'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'types'}]}]}]}]}]}]}]},
                                                        {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'd'},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'ReturnStatement': [{'IdentifierName': 'd'}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'getType'}}],
                                             'name': {'identifier': 'member'},
                                             'scope': {'name': {'identifier': 'types'}}},
                               'thenStmt': {'expression': {}}},
                              {'condition': {'left': {'name': {'identifier': 'children'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'c'}},
                                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}},
                                                                                      'name': {'identifier': 't'},
                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                       {'condition': {'arguments': [{'name': {'identifier': 'getType'},
                                                                                     'scope': {'name': {'identifier': 't'}}}],
                                                                      'name': {'identifier': 'member'},
                                                                      'scope': {'name': {'identifier': 'types'}}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 't'}}}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'types'}}],
                                                                                                      'name': {'identifier': 'getFirstDescendantWithType'},
                                                                                                      'scope': {'name': {'identifier': 't'}}},
                                                                                      'name': {'identifier': 'd'},
                                                                                      'type': {'name': {'identifier': 'CommonTree'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'd'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 'd'}}}}]},
                               'iterable': {'name': {'identifier': 'children'}},
                               'variable': {'variables': [{'name': {'identifier': 'c'},
                                                           'type': {'name': {'identifier': 'Object'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                                                                                    {'IdentifierName': 'Parent'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                              {'IdentifierName': 'exceptions'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'catchme'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'action'},
                                                                                                                  {'IdentifierName': 'resolver'}]},
                                                                                {'IdentifierName': 'currentRule'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'getParent'},
                                                                                            'scope': {'name': {'identifier': 'action'}}},
                                                                             'type': {'name': {'identifier': 'GrammarAST'}}},
                                                             'name': {'identifier': 'catchme'},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'catchme'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'exceptions'},
                                                        'scope': {'name': {'identifier': 'currentRule'}}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'resolver'},
                                                         'scope': {'name': {'identifier': 'action'}}},
                                              'value': {'name': {'identifier': 'currentRule'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'labels'},
                                                                              {'IdentifierName': 'Elements'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'elements'},
                                              'scope': {'name': {'identifier': 'labels'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Runtime'},
                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                         {'IdentifierName': 'LabelElementPair'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Runtime'},
                                                                                                                                                                                                  {'IdentifierName': 'Misc'}]},
                                                                                                                                                                               {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                                                                      {'IdentifierName': 'LabelElementPair'}]}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]},
                                         {'LessThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                        {'IdentifierName': 'numberOfAlts'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ForEachStatement': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'LabelElementPair'}]}]},
                                                                          {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                              {'IdentifierName': 'labelDefs'}]},
                                                                                                            {'IdentifierName': 'Values'}]},
                                                                          {'Block': [{'ForEachStatement': [{'IdentifierName': 'LabelElementPair'},
                                                                                                           {'IdentifierName': 'pairs'},
                                                                                                           {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'defs'},
                                                                                                                                                                                                           {'IdentifierName': 'Map'}]},
                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                                                                                                             {'IdentifierName': 'label'}]},
                                                                                                                                                                                                                                           {'IdentifierName': 'Text'}]}]},
                                                                                                                                                                                           {'Argument': [{'IdentifierName': 'p'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'defs'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'MultiMap'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                        {'name': {'identifier': 'LabelElementPair'}}]}},
                                                             'name': {'identifier': 'defs'},
                                                             'type': {'name': {'identifier': 'MultiMap'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                        {'name': {'identifier': 'LabelElementPair'}}]}}]}},
                              {'body': {'statements': [{'body': {'statements': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                        'scope': {'name': {'identifier': 'label'},
                                                                                                                                                  'scope': {'name': {'identifier': 'p'}}}},
                                                                                                                                       {'name': {'identifier': 'p'}}],
                                                                                                                         'name': {'identifier': 'map'},
                                                                                                                         'scope': {'name': {'identifier': 'defs'}}}}]},
                                                                                 'iterable': {'name': {'identifier': 'pairs'}},
                                                                                 'variable': {'variables': [{'name': {'identifier': 'p'},
                                                                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}}]},
                                                        'iterable': {'name': {'identifier': 'values'},
                                                                     'scope': {'name': {'identifier': 'labelDefs'},
                                                                               'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                         'name': {'name': {'identifier': 'alt'}}}}},
                                                        'variable': {'variables': [{'name': {'identifier': 'pairs'},
                                                                                    'type': {'name': {'identifier': 'List'},
                                                                                             'typeArguments': [{'name': {'identifier': 'LabelElementPair'}}]}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'numberOfAlts'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '1'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'defs'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanOrEqualExpression': [{'IdentifierName': 'channelValue'},
                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'channelValueToNameList'},
                                                                                                            {'IdentifierName': 'Count'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Utils'},
                                                                                                                                        {'IdentifierName': 'SetSize'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'channelValueToNameList'}]},
                                                                                                                        {'Argument': [{'AddExpression': [{'IdentifierName': 'channelValue'},
                                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'channelValueToNameList'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'channelValue'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'prevChannel'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'channelValueToNameList'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'channelValue'}]}]}]},
                                                                                                            {'IdentifierName': 'name'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'channelValue'}},
                                             'operator': 'GREATER_EQUALS',
                                             'right': {'name': {'identifier': 'size'},
                                                       'scope': {'name': {'identifier': 'channelValueToNameList'}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'channelValueToNameList'}},
                                                                                         {'left': {'name': {'identifier': 'channelValue'}},
                                                                                          'operator': 'PLUS',
                                                                                          'right': {'value': '1'}}],
                                                                           'name': {'identifier': 'setSize'},
                                                                           'scope': {'name': {'identifier': 'Utils'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'channelValue'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'channelValueToNameList'}}},
                                                             'name': {'identifier': 'prevChannel'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'prevChannel'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'channelValue'}},
                                                                                         {'name': {'identifier': 'name'}}],
                                                                           'name': {'identifier': 'set'},
                                                                           'scope': {'name': {'identifier': 'channelValueToNameList'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'AltAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'AltAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'recognizer'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'Index'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'firstErrorTokenIndex'},
                                                              {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'firstErrorTokenIndex'},
                                                                                                            {'IdentifierName': 'errIndex'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'InputMismatchException'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'InputMismatchException'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'recognizer'}]}]}]}]}]}]}]},
                       {'ThrowStatement': [{'IdentifierName': 'e'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'index'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'recognizer'}}}},
                                                             'name': {'identifier': 'errIndex'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'firstErrorTokenIndex'}},
                                             'operator': 'EQUALS',
                                             'right': {'expression': {'value': '1'},
                                                       'operator': 'MINUS'}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'firstErrorTokenIndex'}},
                                                                           'value': {'name': {'identifier': 'errIndex'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'recognizer'}}],
                                                                             'type': {'name': {'identifier': 'InputMismatchException'}}},
                                                             'name': {'identifier': 'e'},
                                                             'type': {'name': {'identifier': 'InputMismatchException'}}}]}},
                              {'expression': {'name': {'identifier': 'e'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRMessage'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarSyntaxMessage'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'token'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'antlrException'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'args'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Emit'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'etype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'etype'}},
                                                                                           {'name': {'identifier': 'fileName'}},
                                                                                           {'name': {'identifier': 'token'}},
                                                                                           {'name': {'identifier': 'antlrException'}},
                                                                                           {'name': {'identifier': 'args'}}],
                                                                             'type': {'name': {'identifier': 'GrammarSyntaxMessage'}}},
                                                             'name': {'identifier': 'msg'},
                                                             'type': {'name': {'identifier': 'ANTLRMessage'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'etype'}},
                                                            {'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'emit'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                                      {'IdentifierName': 'resolver'}]},
                                                                                                    {'IdentifierName': 'ResolvesToLabel'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                    {'Argument': [{'IdentifierName': 'node'}]}]}]},
                                        {'ReturnStatement': [{'IdentifierName': 'x'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                    {'IdentifierName': 'GetTarget'}]},
                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                        {'IdentifierName': 'GetImplicitTokenLabel'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'x'}},
                                                           {'name': {'identifier': 'node'}}],
                                             'name': {'identifier': 'resolvesToLabel'},
                                             'scope': {'name': {'identifier': 'resolver'},
                                                       'scope': {'name': {'identifier': 'node'}}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'x'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'getImplicitTokenLabel'},
                                              'scope': {'name': {'identifier': 'getTarget'},
                                                        'scope': {'name': {'identifier': 'getGenerator'},
                                                                  'scope': {'name': {'identifier': 'factory'}}}}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'ATNState'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'atn'},
                                                                               {'IdentifierName': 'states'}]},
                                             {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                {'NullLiteralExpression': 'null'}]},
                                                                                                                                                       {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                                               {'IdentifierName': 'StateType'}]},
                                                                                                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'StateType'},
                                                                                                                                                                                                               {'IdentifierName': 'Basic'}]}]}]},
                                                                                                                             {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                     {'IdentifierName': 'NumberOfTransitions'}]},
                                                                                                                                                   {'NumericLiteralExpression': '1'}]}]},
                                                                                                   {'IsExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                 {'IdentifierName': 'Transition'}]},
                                                                                                                                               {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]},
                                                                                                                     {'IdentifierName': 'RuleTransition'}]}]},
                                                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'RuleTransition'},
                                                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'RuleTransition'},
                                                                                                                                                                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                                                                                                                                           {'IdentifierName': 'Transition'}]},
                                                                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
                                                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddFollowLink'},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rt'},
                                                                                                                                                                                                         {'IdentifierName': 'ruleIndex'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rt'},
                                                                                                                                                                                                         {'IdentifierName': 'followState'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'left': {'left': {'left': {'left': {'name': {'identifier': 'p'}},
                                                                                                 'operator': 'NOT_EQUALS',
                                                                                                 'right': {}},
                                                                                        'operator': 'AND',
                                                                                        'right': {'left': {'name': {'identifier': 'getStateType'},
                                                                                                           'scope': {'name': {'identifier': 'p'}}},
                                                                                                  'operator': 'EQUALS',
                                                                                                  'right': {'name': {'identifier': 'BASIC'},
                                                                                                            'scope': {'name': {'identifier': 'ATNState'}}}}},
                                                                               'operator': 'AND',
                                                                               'right': {'left': {'name': {'identifier': 'getNumberOfTransitions'},
                                                                                                  'scope': {'name': {'identifier': 'p'}}},
                                                                                         'operator': 'EQUALS',
                                                                                         'right': {'value': '1'}}},
                                                                      'operator': 'AND',
                                                                      'right': {'expression': {'arguments': [{'value': '0'}],
                                                                                               'name': {'identifier': 'transition'},
                                                                                               'scope': {'name': {'identifier': 'p'}}},
                                                                                'type': {'name': {'identifier': 'RuleTransition'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'value': '0'}],
                                                                                                                                                  'name': {'identifier': 'transition'},
                                                                                                                                                  'scope': {'name': {'identifier': 'p'}}},
                                                                                                                                   'type': {'name': {'identifier': 'RuleTransition'}}},
                                                                                                                   'name': {'identifier': 'rt'},
                                                                                                                   'type': {'name': {'identifier': 'RuleTransition'}}}]}},
                                                                                    {'expression': {'arguments': [{'name': {'identifier': 'ruleIndex'},
                                                                                                                   'scope': {'name': {'identifier': 'rt'}}},
                                                                                                                  {'name': {'identifier': 'followState'},
                                                                                                                   'scope': {'name': {'identifier': 'rt'}}}],
                                                                                                    'name': {'identifier': 'addFollowLink'}}}]}}]},
                               'iterable': {'name': {'identifier': 'states'},
                                            'scope': {'name': {'identifier': 'atn'}}},
                               'variable': {'variables': [{'name': {'identifier': 'p'},
                                                           'type': {'name': {'identifier': 'ATNState'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IToken'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                {'IdentifierName': 'Token'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'SourceName'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'valueAST'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                                                                          {'IdentifierName': 'ruleRefOptions'}]},
                                                                                                                                                        {'IdentifierName': 'Contains'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'ILLEGAL_OPTION'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'optionID'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]},
                                                   {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'token'},
                                                                             'scope': {'name': {'identifier': 'ID'}}},
                                                             'name': {'identifier': 'optionID'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'optionID'}}}},
                                                             'name': {'identifier': 'fileName'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'valueAST'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                     'scope': {'name': {'identifier': 'optionID'}}}],
                                                                      'name': {'identifier': 'contains'},
                                                                      'scope': {'name': {'identifier': 'ruleRefOptions'},
                                                                                'scope': {'name': {'identifier': 'Grammar'}}}},
                                                       'operator': 'LOGICAL_COMPLEMENT'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ILLEGAL_OPTION'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'optionID'}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'optionID'}}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}},
                                                           {'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'terminals'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@ref'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'strings'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'currentRule'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                                                                                         {'IdentifierName': 'alt'}]},
                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]},
                                                                                                                                                                          {'IdentifierName': 'tokenRefs'}]},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': '@ref'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ref'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'terminals'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'ref'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'strings'}}}},
                              {'condition': {'left': {'name': {'identifier': 'currentRule'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'ref'}}},
                                                                                         {'name': {'identifier': 'ref'}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'tokenRefs'},
                                                                                     'scope': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                                               'name': {'name': {'identifier': 'alt'},
                                                                                                        'scope': {'name': {'identifier': 'currentRule'}}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rulesNode'},
                                                                                                {'IdentifierName': 'ChildCount'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'rulesNode'},
                                                                                                                                                                                                                {'IdentifierName': 'Parent'}]}]}]}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'root'},
                                                                                                                                                                                                                                          {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'NO_RULES'}]}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                        {'IdentifierName': 'fileName'}]}]},
                                                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IDNode'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'g'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'getChildCount'},
                                                      'scope': {'name': {'identifier': 'rulesNode'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'getParent'},
                                                                                                                         'scope': {'name': {'identifier': 'rulesNode'}}},
                                                                                                          'type': {'name': {'identifier': 'GrammarAST'}}},
                                                                                          'name': {'identifier': 'root'},
                                                                                          'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'value': '0'}],
                                                                                                                         'name': {'identifier': 'getChild'},
                                                                                                                         'scope': {'name': {'identifier': 'root'}}},
                                                                                                          'type': {'name': {'identifier': 'GrammarAST'}}},
                                                                                          'name': {'identifier': 'IDNode'},
                                                                                          'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'NO_RULES'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'},
                                                                                          'scope': {'name': {'identifier': 'g'}}},
                                                                                         {},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'IDNode'}}},
                                                                                         {'name': {'identifier': 'g'}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blk'},
                                                                                                                  {'IdentifierName': 'ops'}]},
                                                                                {'IdentifierName': 'ops'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'ops'},
                                                         'scope': {'name': {'identifier': 'blk'}}},
                                              'value': {'name': {'identifier': 'ops'}}}},
                              {'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                {'IdentifierName': 'tool'}]},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'GrammarError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                            {'IdentifierName': 'TOKEN_RANGE_IN_PARSER'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'fileName'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                              {'IdentifierName': 'Token'}]},
                                                                                                                                            {'IdentifierName': 'Text'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                              {'IdentifierName': 'Token'}]},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'TokenRef'},
                                                                      {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'TerminalAST'},
                                                                                                                          {'IdentifierName': 'a'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'TOKEN_RANGE_IN_PARSER'},
                                                             'scope': {'name': {'identifier': 'ErrorType'}}},
                                                            {'name': {'identifier': 'fileName'},
                                                             'scope': {'name': {'identifier': 'g'}}},
                                                            {'name': {'identifier': 'getToken'},
                                                             'scope': {'name': {'identifier': 'a'}}},
                                                            {'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'getToken'},
                                                                       'scope': {'name': {'identifier': 'a'}}}},
                                                            {'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'getToken'},
                                                                       'scope': {'name': {'identifier': 'b'}}}}],
                                              'name': {'identifier': 'grammarError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'},
                                                                  'scope': {'name': {'identifier': 'g'}}}}}},
                              {'expression': {'arguments': [{'expression': {'name': {'identifier': 'a'}},
                                                             'type': {'name': {'identifier': 'TerminalAST'}}}],
                                              'name': {'identifier': 'tokenRef'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ParserFile'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'ParserFile'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'f'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'ParserFile'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'f'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'fileName'}}],
                                                                             'name': {'identifier': 'parserFile'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'f'},
                                                             'type': {'name': {'identifier': 'ParserFile'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'f'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'f'}}],
                                                                 'name': {'identifier': 'parserFile'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'f'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ProcessNested'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'rhs'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'rhs'}}],
                                              'name': {'identifier': 'processNested'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'firstPrequel'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': 'return;'}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'firstPrequel'},
                                                                                                                                                                                    {'IdentifierName': 'Parent'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'parent'},
                                                                                                                                                                                          {'IdentifierName': 'GetAllChildrenWithType'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'OPTIONS'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'parent'},
                                                                                                                                                                                          {'IdentifierName': 'GetAllChildrenWithType'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'IMPORT'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'parent'},
                                                                                                                                                                                          {'IdentifierName': 'GetAllChildrenWithType'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'TOKENS_SPEC'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckNumPrequels'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'options'}]},
                                                                                            {'Argument': [{'IdentifierName': 'imports'}]},
                                                                                            {'Argument': [{'IdentifierName': 'tokens'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'firstPrequel'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {}},
                              {'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'parent'},
                                                                                            'scope': {'name': {'identifier': 'firstPrequel'}}},
                                                                             'type': {'name': {'identifier': 'GrammarAST'}}},
                                                             'name': {'identifier': 'parent'},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'OPTIONS'}}],
                                                                             'name': {'identifier': 'getAllChildrenWithType'},
                                                                             'scope': {'name': {'identifier': 'parent'}}},
                                                             'name': {'identifier': 'options'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'IMPORT'}}],
                                                                             'name': {'identifier': 'getAllChildrenWithType'},
                                                                             'scope': {'name': {'identifier': 'parent'}}},
                                                             'name': {'identifier': 'imports'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'TOKENS_SPEC'}}],
                                                                             'name': {'identifier': 'getAllChildrenWithType'},
                                                                             'scope': {'name': {'identifier': 'parent'}}},
                                                             'name': {'identifier': 'tokens'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'options'}},
                                                            {'name': {'identifier': 'imports'}},
                                                            {'name': {'identifier': 'tokens'}}],
                                              'name': {'identifier': 'checkNumPrequels'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'IsLexer'},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetAllCharValues'},
                                                                                                  {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'IntervalSet'},
                                                                                                        {'IdentifierName': 'Of'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'TokenConstants'},
                                                                                                                                        {'IdentifierName': 'MinUserTokenType'}]}]},
                                                                                        {'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetMaxTokenType'},
                                                                                                                                {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'isLexer'}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'getAllCharValues'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'MIN_USER_TOKEN_TYPE'},
                                                             'scope': {'name': {'identifier': 'Token'}}},
                                                            {'name': {'identifier': 'getMaxTokenType'}}],
                                              'name': {'identifier': 'of'},
                                              'scope': {'name': {'identifier': 'IntervalSet'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetActionResolver'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'setActionResolver'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                             {'IdentifierName': 'Token'}]},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                            {'IdentifierName': 'Token'}]},
                                                                                                                          {'IdentifierName': 'TokenIndex'}]},
                                                                                        {'IdentifierName': 'index'}]}]},
                                        {'Block': [{'ReturnStatement': [{'ThisExpression': 'this'}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'ChildCount'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                               {'InvocationExpression': [{'IdentifierName': 'GetChild'},
                                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                    {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'child'},
                                                                                                                                                                                                                       {'IdentifierName': 'GetNodeWithTokenIndex'}]},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'index'}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'result'},
                                                                                              {'NullLiteralExpression': 'null'}]},
                                                                     {'Block': [{'ReturnStatement': [{'IdentifierName': 'result'}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'getToken'},
                                                               'scope': {}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'getTokenIndex'},
                                                                'scope': {'name': {'identifier': 'getToken'},
                                                                          'scope': {}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'index'}}}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                     'name': {'identifier': 'getChild'}},
                                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}},
                                                                                      'name': {'identifier': 'child'},
                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'index'}}],
                                                                                                      'name': {'identifier': 'getNodeWithTokenIndex'},
                                                                                                      'scope': {'name': {'identifier': 'child'}}},
                                                                                      'name': {'identifier': 'result'},
                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'result'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'result'}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'getChildCount'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'},
                                                                                                                      {'IdentifierName': 'PredAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'},
                                                                                                                                                                                                   {'IdentifierName': 'PredAST'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'Rule'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'rules'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'ForEachStatement': [{'IdentifierName': 'ActionAST'},
                                                                              {'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                {'IdentifierName': 'actions'}]},
                                                                              {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'a'},
                                                                                                                            {'IdentifierName': 'PredAST'}]},
                                                                                                          {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'PredAST'},
                                                                                                                                                                             {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'PredAST'},
                                                                                                                                                                                                                                                {'IdentifierName': 'a'}]}]}]}]}]},
                                                                                                                     {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'indexToPredMap'},
                                                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'sempreds'},
                                                                                                                                                                                                                                                                                 {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'p'}]}]}]}]}]}]},
                                                                                                                                                                              {'IdentifierName': 'p'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'indexToPredMap'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'LinkedHashMap'},
                                                                                      'typeArguments': [{'name': {'identifier': 'Integer'}},
                                                                                                        {'name': {'identifier': 'PredAST'}}]}},
                                                             'name': {'identifier': 'indexToPredMap'},
                                                             'type': {'name': {'identifier': 'LinkedHashMap'},
                                                                      'typeArguments': [{'name': {'identifier': 'Integer'}},
                                                                                        {'name': {'identifier': 'PredAST'}}]}}]}},
                              {'body': {'statements': [{'body': {'statements': [{'condition': {'expression': {'name': {'identifier': 'a'}},
                                                                                               'type': {'name': {'identifier': 'PredAST'}}},
                                                                                 'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'a'}},
                                                                                                                                                            'type': {'name': {'identifier': 'PredAST'}}},
                                                                                                                                            'name': {'identifier': 'p'},
                                                                                                                                            'type': {'name': {'identifier': 'PredAST'}}}]}},
                                                                                                             {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'p'}}],
                                                                                                                                            'name': {'identifier': 'get'},
                                                                                                                                            'scope': {'name': {'identifier': 'sempreds'}}},
                                                                                                                                           {'name': {'identifier': 'p'}}],
                                                                                                                             'name': {'identifier': 'put'},
                                                                                                                             'scope': {'name': {'identifier': 'indexToPredMap'}}}}]}}]},
                                                        'iterable': {'name': {'identifier': 'actions'},
                                                                     'scope': {'name': {'identifier': 'r'}}},
                                                        'variable': {'variables': [{'name': {'identifier': 'a'},
                                                                                    'type': {'name': {'identifier': 'ActionAST'}}}]}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'rules'}}},
                               'variable': {'variables': [{'name': {'identifier': 'r'},
                                                           'type': {'name': {'identifier': 'Rule'}}}]}},
                              {'expression': {'name': {'identifier': 'indexToPredMap'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckInvalidRuleDef'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkInvalidRuleDef'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Token'},
                                                                                                                  {'IdentifierName': 'Type'}]},
                                                                                {'IdentifierName': 'type'}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'type'}}],
                                              'name': {'identifier': 'setType'},
                                              'scope': {'name': {'identifier': 'token'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'List'},
                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'SemPred'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{},
                                                                           {'name': {'identifier': 'ast'}}],
                                                             'type': {'name': {'identifier': 'SemPred'}}}],
                                              'name': {'identifier': 'list'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'OptionalBlockAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'OptionalBlockAST'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetActionResolver'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'setActionResolver'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'parent'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'ThisExpression': 'this'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'parent'},
                                                                                                        {'IdentifierName': 'GetOutermostGrammar'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'parent'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'name': {'identifier': 'getOutermostGrammar'},
                                              'scope': {'name': {'identifier': 'parent'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetCurrentBlock'},
                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                {'IdentifierName': 'locals'}]},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'Decl'},
                                             {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetCurrentBlock'},
                                                                                                                                           {'ArgumentList': '()'}]},
                                                                                                                 {'IdentifierName': 'locals'}]},
                                                                               {'IdentifierName': 'Elements'}]},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                                                                                       {'IdentifierName': 'name'}]},
                                                                                                                                     {'IdentifierName': 'Equals'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                         {'ReturnStatement': [{'IdentifierName': 'd'}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'locals'},
                                                      'scope': {'name': {'identifier': 'getCurrentBlock'}}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                      'name': {'identifier': 'equals'},
                                                                      'scope': {'name': {'identifier': 'name'},
                                                                                'scope': {'name': {'identifier': 'd'}}}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 'd'}}}}]},
                               'iterable': {'name': {'identifier': 'elements'},
                                            'scope': {'name': {'identifier': 'locals'},
                                                      'scope': {'name': {'identifier': 'getCurrentBlock'}}}},
                               'variable': {'variables': [{'name': {'identifier': 'd'},
                                                           'type': {'name': {'identifier': 'Decl'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'visited'},
                                                                                                                              {'IdentifierName': 'Add'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                              {'IdentifierName': 'stateNumber'}]}]}]}]}]},
                                        {'ReturnStatement': 'return;'}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'visited'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                            {'IdentifierName': 'stateNumber'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'VisitState'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                {'IdentifierName': 'NumberOfTransitions'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'IdentifierName': 'n'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Transition'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                                                                       {'IdentifierName': 'Transition'}]},
                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Visit_'},
                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                         {'IdentifierName': 'target'}]}]},
                                                                                                                         {'Argument': [{'IdentifierName': 'visited'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'stateNumber'},
                                                                           'scope': {'name': {'identifier': 's'}}}],
                                                            'name': {'identifier': 'add'},
                                                            'scope': {'name': {'identifier': 'visited'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {}},
                              {'expression': {'arguments': [{'name': {'identifier': 'stateNumber'},
                                                             'scope': {'name': {'identifier': 's'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'visited'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 's'}}],
                                              'name': {'identifier': 'visitState'}}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getNumberOfTransitions'},
                                                                             'scope': {'name': {'identifier': 's'}}},
                                                             'name': {'identifier': 'n'},
                                                             'type': {'type': 'INT'}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                      'name': {'identifier': 'transition'},
                                                                                                      'scope': {'name': {'identifier': 's'}}},
                                                                                      'name': {'identifier': 't'},
                                                                                      'type': {'name': {'identifier': 'Transition'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'target'},
                                                                                      'scope': {'name': {'identifier': 't'}}},
                                                                                     {'name': {'identifier': 'visited'}}],
                                                                       'name': {'identifier': 'visit_'}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'n'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'lexerActionIndex'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToIndexMap'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'lexerAction'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'lexerActionIndex'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'lexerActionIndex'},
                                                                                                            {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToIndexMap'},
                                                                                                                                              {'IdentifierName': 'Count'}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'actionToIndexMap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'lexerAction'}]}]}]},
                                                                                                            {'IdentifierName': 'lexerActionIndex'}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'indexToActionMap'},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'lexerActionIndex'}]}]}]},
                                                                                                            {'IdentifierName': 'lexerAction'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'lexerActionIndex'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'lexerAction'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'actionToIndexMap'}}},
                                                             'name': {'identifier': 'lexerActionIndex'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'lexerActionIndex'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'lexerActionIndex'}},
                                                                           'value': {'name': {'identifier': 'size'},
                                                                                     'scope': {'name': {'identifier': 'actionToIndexMap'}}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'lexerAction'}},
                                                                                         {'name': {'identifier': 'lexerActionIndex'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'actionToIndexMap'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'lexerActionIndex'}},
                                                                                         {'name': {'identifier': 'lexerAction'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'indexToActionMap'}}}}]}},
                              {'expression': {'name': {'identifier': 'lexerActionIndex'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'Transition'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                               {'IdentifierName': 'Transitions'}]},
                                             {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                    {'IdentifierName': 'TransitionType'}]},
                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'TransitionType'},
                                                                                                                                    {'IdentifierName': 'Epsilon'}]}]},
                                                                         {'Block': [{'ContinueStatement': 'continue;'}]}]},
                                                        {'IfStatement': [{'LogicalAndExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                           {'IdentifierName': 'target'}]},
                                                                                                                         {'IdentifierName': 'b'}]},
                                                                                                   {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'EpsilonTransition'},
                                                                                                                                                                                                            {'IdentifierName': 't'}]}]},
                                                                                                                                                           {'IdentifierName': 'OutermostPrecedenceReturn'}]},
                                                                                                                         {'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
                                                                         {'Block': [{'ReturnStatement': 'return;'}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'a'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ConditionalExpression': [{'IdentifierName': 'prepend'},
                                                                                                                                                                                     {'NumericLiteralExpression': '0'},
                                                                                                                                                                                     {'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                                                       {'IdentifierName': 'NumberOfTransitions'}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                        {'IdentifierName': 'AddTransition'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'index'}]},
                                                                                                                        {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'EpsilonTransition'},
                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'b'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'a'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'condition': {'name': {'identifier': 'prepend'}},
                                                                                                          'elseExpr': {'name': {'identifier': 'getNumberOfTransitions'},
                                                                                                                       'scope': {'name': {'identifier': 'a'}}},
                                                                                                          'thenExpr': {'value': '0'}},
                                                                                          'name': {'identifier': 'index'},
                                                                                          'type': {'type': 'INT'}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'index'}},
                                                                                         {'arguments': [{'name': {'identifier': 'b'}}],
                                                                                          'type': {'name': {'identifier': 'EpsilonTransition'}}}],
                                                                           'name': {'identifier': 'addTransition'},
                                                                           'scope': {'name': {'identifier': 'a'}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'gen'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'gen'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'name'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'name'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'RuleAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'RuleAST'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'currentRule'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'GetRule'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentRule'},
                                                         'scope': {}},
                                              'value': {'arguments': [{'name': {'identifier': 'name'}}],
                                                        'name': {'identifier': 'getRule'},
                                                        'scope': {'name': {'identifier': 'g'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                           {'IdentifierName': 'ToUpper'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                           {'IdentifierName': 'Substring'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'arguments': [{'value': '0'}],
                                                                      'name': {'identifier': 'charAt'},
                                                                      'scope': {'name': {'identifier': 's'}}}],
                                                       'name': {'identifier': 'toUpperCase'},
                                                       'scope': {'name': {'identifier': 'Character'}}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'value': '1'}],
                                                        'name': {'identifier': 'substring'},
                                                        'scope': {'name': {'identifier': 's'}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Handle'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'Handle'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                              {'IdentifierName': 'left'}]}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cmds'},
                                                                                                                                                                                                                              {'IdentifierName': 'right'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Epsilon'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                            {'IdentifierName': 'right'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'cmds'},
                                                                                                                                            {'IdentifierName': 'left'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'h'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'left'},
                                                                                            'scope': {'name': {'identifier': 'alt'}}},
                                                                                           {'name': {'identifier': 'right'},
                                                                                            'scope': {'name': {'identifier': 'cmds'}}}],
                                                                             'type': {'name': {'identifier': 'Handle'}}},
                                                             'name': {'identifier': 'h'},
                                                             'type': {'name': {'identifier': 'Handle'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'right'},
                                                             'scope': {'name': {'identifier': 'alt'}}},
                                                            {'name': {'identifier': 'left'},
                                                             'scope': {'name': {'identifier': 'cmds'}}}],
                                              'name': {'identifier': 'epsilon'}}},
                              {'expression': {'name': {'identifier': 'h'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ParserFile'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{},
                                                            {'name': {'identifier': 'fileName'}}],
                                              'type': {'name': {'identifier': 'ParserFile'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'StarBlockAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'StarBlockAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'codeBlockLevel'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'codeBlockLevel'}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'element'},
                                                                              {'IdentifierName': 'Type'}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'IdentifierName': 'TOKEN_REF'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'STRING_LITERAL'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'RANGE'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'SET'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'NOT'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'RULE_REF'}]},
                                                               {'CaseSwitchLabel': [{'IdentifierName': 'WILDCARD'}]},
                                                               {'ReturnStatement': 'return;'}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                                                                                                            {'IdentifierName': 'Token'}]},
                                                                                                                                                                                                                                          {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                                                        {'IdentifierName': 'SourceName'}]}]}]}]}]},
                                                               {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                        {'IdentifierName': 'tool'}]},
                                                                                                                                                                                      {'IdentifierName': 'errMgr'}]},
                                                                                                                                                    {'IdentifierName': 'GrammarError'}]},
                                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                                    {'IdentifierName': 'LABEL_BLOCK_NOT_A_SET'}]}]},
                                                                                                                                    {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                    {'IdentifierName': 'Token'}]}]},
                                                                                                                                    {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                    {'IdentifierName': 'Text'}]}]}]}]}]},
                                                               {'BreakStatement': 'break;'}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'name': {'identifier': 'TOKEN_REF'}}},
                                           {'label': {'name': {'identifier': 'STRING_LITERAL'}}},
                                           {'label': {'name': {'identifier': 'RANGE'}}},
                                           {'label': {'name': {'identifier': 'SET'}}},
                                           {'label': {'name': {'identifier': 'NOT'}}},
                                           {'label': {'name': {'identifier': 'RULE_REF'}}},
                                           {'label': {'name': {'identifier': 'WILDCARD'}},
                                            'statements': [{}]},
                                           {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                                                          'scope': {'name': {'identifier': 'getInputStream'},
                                                                                                                    'scope': {'name': {'identifier': 'token'},
                                                                                                                              'scope': {'name': {'identifier': 'ID'}}}}},
                                                                                          'name': {'identifier': 'fileName'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'LABEL_BLOCK_NOT_A_SET'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'token'},
                                                                                          'scope': {'name': {'identifier': 'ID'}}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'ID'}}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}},
                                                           {}]}],
                               'selector': {'name': {'identifier': 'getType'},
                                            'scope': {'name': {'identifier': 'element'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetBaseVisitorFileName'},
                                                                      {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'getBaseVisitorFileName'},
                                              'scope': {'name': {'identifier': 'getTarget'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                   {'IdentifierName': 't'}]}]},
                                                                                                                  {'IdentifierName': 'g'}]},
                                                                                {'IdentifierName': 'grammar'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'g'},
                                                         'scope': {'inner': {'expression': {'name': {'identifier': 't'}},
                                                                             'type': {'name': {'identifier': 'GrammarAST'}}}}},
                                              'value': {'name': {'identifier': 'thiz'}}}},
                              {'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Parse'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'action'}]},
                                                                                        {'Argument': [{'IdentifierName': 's'}]},
                                                                                        {'Argument': [{'CharacterLiteralExpression': "','"}]},
                                                                                        {'Argument': [{'IdentifierName': 'g'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'action'}},
                                                            {'name': {'identifier': 's'}},
                                                            {'value': ','},
                                                            {'name': {'identifier': 'g'}}],
                                              'name': {'identifier': 'parse'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ThisExpression': 'this'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ICharStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                                                  {'IdentifierName': 'Token'}]},
                                                                                                                                                                {'IdentifierName': 'InputStream'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'input'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'adaptor'},
                                                                                                                            {'IdentifierName': 'DupTree'}]},
                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 't'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getInputStream'},
                                                                             'scope': {'name': {'identifier': 'token'},
                                                                                       'scope': {}}},
                                                             'name': {'identifier': 'input'},
                                                             'type': {'name': {'identifier': 'CharStream'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'input'}}],
                                                                             'type': {'name': {'identifier': 'GrammarASTAdaptor'}}},
                                                             'name': {'identifier': 'adaptor'},
                                                             'type': {'name': {'identifier': 'GrammarASTAdaptor'}}}]}},
                              {'expression': {'expression': {'arguments': [{'name': {'identifier': 't'}}],
                                                             'name': {'identifier': 'dupTree'},
                                                             'scope': {'name': {'identifier': 'adaptor'}}},
                                              'type': {'name': {'identifier': 'GrammarAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'generator'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'generator'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Template'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                                                                                                            {'IdentifierName': 'errMgr'}]},
                                                                                                                                                                                          {'IdentifierName': 'GetMessageTemplate'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'msgST'},
                                                                                                                                                                                          {'IdentifierName': 'Render'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                      {'IdentifierName': 'errMgr'}]},
                                                                                                    {'IdentifierName': 'FormatWantsSingleLineMessage'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'outputMsg'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'outputMsg'},
                                                                                                                                                                        {'IdentifierName': 'Replace'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\n"
                                                                                                                                                                                                     "'"}]},
                                                                                                                                                        {'Argument': [{'CharacterLiteralExpression': "' "
                                                                                                                                                                                                     "'"}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'ConsoleError'}]},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'outputMsg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'msg'}}],
                                                                             'name': {'identifier': 'getMessageTemplate'},
                                                                             'scope': {'name': {'identifier': 'errMgr'},
                                                                                       'scope': {'name': {'identifier': 'tool'}}}},
                                                             'name': {'identifier': 'msgST'},
                                                             'type': {'name': {'identifier': 'ST'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'render'},
                                                                             'scope': {'name': {'identifier': 'msgST'}}},
                                                             'name': {'identifier': 'outputMsg'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'name': {'identifier': 'formatWantsSingleLineMessage'},
                                             'scope': {'name': {'identifier': 'errMgr'},
                                                       'scope': {'name': {'identifier': 'tool'}}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'outputMsg'}},
                                                                           'value': {'arguments': [{'value': '\n'},
                                                                                                   {'value': ' '}],
                                                                                     'name': {'identifier': 'replace'},
                                                                                     'scope': {'name': {'identifier': 'outputMsg'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'outputMsg'}}],
                                              'name': {'identifier': 'println'},
                                              'scope': {'name': {'identifier': 'err'},
                                                        'scope': {'name': {'identifier': 'System'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'List'},
                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'Action'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{},
                                                                           {'name': {'identifier': 'ast'}}],
                                                             'type': {'name': {'identifier': 'Action'}}}],
                                              'name': {'identifier': 'list'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                      {'IdentifierName': 'errMgr'}]},
                                                                                                    {'IdentifierName': 'FormatWantsSingleLineMessage'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'msg'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'msg'},
                                                                                                                                                                        {'IdentifierName': 'Replace'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'\n"
                                                                                                                                                                                                     "'"}]},
                                                                                                                                                        {'Argument': [{'CharacterLiteralExpression': "' "
                                                                                                                                                                                                     "'"}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'ConsoleOut'}]},
                                                                                                            {'IdentifierName': 'WriteLine'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'formatWantsSingleLineMessage'},
                                             'scope': {'name': {'identifier': 'errMgr'},
                                                       'scope': {'name': {'identifier': 'tool'}}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'msg'}},
                                                                           'value': {'arguments': [{'value': '\n'},
                                                                                                   {'value': ' '}],
                                                                                     'name': {'identifier': 'replace'},
                                                                                     'scope': {'name': {'identifier': 'msg'}}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'println'},
                                              'scope': {'name': {'identifier': 'out'},
                                                        'scope': {'name': {'identifier': 'System'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Attribute'},
                                                                               {'VariableDeclarator': 'result'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'attributes'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'result'}]}]}]}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'name'}}],
                                              'name': {'identifier': 'get'},
                                              'scope': {'name': {'identifier': 'attributes'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'attributes'},
                                                                              {'IdentifierName': 'Count'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'size'},
                                              'scope': {'name': {'identifier': 'attributes'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildParserOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildParserOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentBlock'},
                                                                                {'IdentifierName': 'blk'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentBlock'}},
                                              'value': {'name': {'identifier': 'blk'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actions'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'predAST'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentAlt'}]}]}]},
                                                                                                                                              {'IdentifierName': 'actions'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'predAST'}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                {'IdentifierName': 'sempreds'}]},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'predAST'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                           {'IdentifierName': 'sempreds'}]},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'predAST'}]}]}]},
                                                                                                            {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                {'IdentifierName': 'sempreds'}]},
                                                                                                                                              {'IdentifierName': 'Count'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'predAST'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'actions'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'predAST'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'actions'},
                                                        'scope': {'index': {'name': {'identifier': 'currentAlt'}},
                                                                  'name': {'name': {'identifier': 'alt'}}}}}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'predAST'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'sempreds'},
                                                                'scope': {'name': {'identifier': 'g'}}}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'predAST'}},
                                                                                         {'name': {'identifier': 'size'},
                                                                                          'scope': {'name': {'identifier': 'sempreds'},
                                                                                                    'scope': {'name': {'identifier': 'g'}}}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'sempreds'},
                                                                                     'scope': {'name': {'identifier': 'g'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'Visit_'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 's'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 's'}},
                                                            {'type': {'name': {'identifier': 'HashSet'},
                                                                      'typeArguments': [{'name': {'identifier': 'Integer'}}]}}],
                                              'name': {'identifier': 'visit_'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'attrs'},
                                                                                                    {'IdentifierName': 'Count'}]},
                                                                  {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'isEmpty'},
                                              'scope': {'name': {'identifier': 'attrs'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Grammar'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetOutermostGrammar'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'root'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Grammar'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Grammar'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Grammar'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                                                                {'IdentifierName': 'parent'}]}]}]}]}]},
                       {'WhileStatement': [{'NotEqualsExpression': [{'IdentifierName': 'p'},
                                                                    {'NullLiteralExpression': 'null'}]},
                                           {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'grammars'},
                                                                                                                                           {'IdentifierName': 'Insert'}]},
                                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                                                           {'Argument': [{'IdentifierName': 'p'}]}]}]}]},
                                                      {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'p'},
                                                                                                               {'SimpleMemberAccessExpression': [{'IdentifierName': 'p'},
                                                                                                                                                 {'IdentifierName': 'parent'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'grammars'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getOutermostGrammar'}},
                                                             'name': {'identifier': 'root'},
                                                             'type': {'name': {'identifier': 'Grammar'}}}]}},
                              {'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'root'}}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'Grammar'}}]}},
                                                             'name': {'identifier': 'grammars'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'Grammar'}}]}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'parent'},
                                                                             'scope': {}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'name': {'identifier': 'Grammar'}}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'value': '0'},
                                                                                     {'name': {'identifier': 'p'}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'grammars'}}}},
                                                       {'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'p'}},
                                                                       'value': {'name': {'identifier': 'parent'},
                                                                                 'scope': {'name': {'identifier': 'p'}}}}}]},
                               'condition': {'left': {'name': {'identifier': 'p'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}}},
                              {'expression': {'name': {'identifier': 'grammars'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'obj'}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'obj'},
                                                                                                                 {'IdentifierName': 'ContextGetterDecl'}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'Decl'},
                                                                                                                                                                                                                   {'IdentifierName': 'obj'}]}]},
                                                                                                                                                                  {'IdentifierName': 'name'}]}]}]}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetArgType'},
                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                  {'IdentifierName': 'Equals'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'ContextGetterDecl'},
                                                                                                                                                                                                                                             {'IdentifierName': 'obj'}]}]},
                                                                                                                                                                                            {'IdentifierName': 'GetArgType'}]},
                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'obj'}}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                      'type': {'name': {'identifier': 'ContextGetterDecl'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'left': {'arguments': [{'name': {'identifier': 'name'},
                                                                      'scope': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                                          'type': {'name': {'identifier': 'Decl'}}}}}],
                                                       'name': {'identifier': 'equals'},
                                                       'scope': {'name': {'identifier': 'name'}}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'name': {'identifier': 'getArgType'},
                                                                       'scope': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                                           'type': {'name': {'identifier': 'ContextGetterDecl'}}}}}],
                                                        'name': {'identifier': 'equals'},
                                                        'scope': {'name': {'identifier': 'getArgType'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'List'},
                                                                      {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TestSetInline'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'blkAST'}]},
                                                                                                                                                      {'Argument': [{'IdentifierName': 'look'}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                                                                                                                                                                                                            {'IdentifierName': 'GetTarget'}]},
                                                                                                                                                                                                                                                          {'ArgumentList': '()'}]},
                                                                                                                                                                                                                                {'IdentifierName': 'GetInlineTestSetWordSize'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{},
                                                                           {'name': {'identifier': 'blkAST'}},
                                                                           {'name': {'identifier': 'look'}},
                                                                           {'name': {'identifier': 'getInlineTestSetWordSize'},
                                                                            'scope': {'name': {'identifier': 'getTarget'},
                                                                                      'scope': {'name': {'identifier': 'gen'}}}}],
                                                             'type': {'name': {'identifier': 'TestSetInline'}}}],
                                              'name': {'identifier': 'list'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'ast'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                                                                       {'IdentifierName': 'tokenNames'}]},
                                                                                                                                     {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'Type'}]}]}]},
                                                                                                        {'IdentifierName': 'ToLower'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ast'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'name': {'identifier': 'toLowerCase'},
                                              'scope': {'index': {'name': {'identifier': 'getType'}},
                                                        'name': {'name': {'identifier': 'tokenNames'},
                                                                 'scope': {'name': {'identifier': 'ANTLRParser'}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'ResolvesToToken'},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]},
                                                                                    {'Argument': [{'IdentifierName': 'node'}]}]}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'x'}},
                                                           {'name': {'identifier': 'node'}}],
                                             'name': {'identifier': 'resolvesToToken'}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Parser'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Parser'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'file'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'p'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Parser'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'p'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'p'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'file'}}],
                                                                             'name': {'identifier': 'parser'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'name': {'identifier': 'Parser'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'p'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'p'}}],
                                                                 'name': {'identifier': 'parser'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'p'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'GrammarAST'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITree'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetChild'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 't'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                               {'IdentifierName': 'Text'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '0'}],
                                                                             'name': {'identifier': 'getChild'}},
                                                             'name': {'identifier': 't'},
                                                             'type': {'name': {'identifier': 'Tree'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 't'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'getText'},
                                                           'scope': {'name': {'identifier': 't'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'name'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                                                                                                          {'IdentifierName': 'LastIndexOf'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'CharacterLiteralExpression': "'.'"}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LessThanExpression': [{'IdentifierName': 'lastDot'},
                                                                {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'IdentifierName': 'name'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                        {'IdentifierName': 'Substring'}]},
                                                                      {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]},
                                                                                        {'Argument': [{'IdentifierName': 'lastDot'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'name'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'value': '.'}],
                                                                             'name': {'identifier': 'lastIndexOf'},
                                                                             'scope': {'name': {'identifier': 'name'}}},
                                                             'name': {'identifier': 'lastDot'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'name': {'identifier': 'lastDot'}},
                                             'operator': 'LESS',
                                             'right': {'value': '0'}},
                               'thenStmt': {'expression': {'name': {'identifier': 'name'}}}},
                              {'expression': {'arguments': [{'value': '0'},
                                                            {'name': {'identifier': 'lastDot'}}],
                                              'name': {'identifier': 'substring'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'options'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'options'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                                                                      {'IdentifierName': 'GrammarAST'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'options'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]},
                                                                                {'IdentifierName': 'node'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'options'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'options'}},
                                                           'value': {'type': {'name': {'identifier': 'HashMap'},
                                                                              'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                {'name': {'identifier': 'GrammarAST'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'key'}},
                                                            {'name': {'identifier': 'node'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'options'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'AltAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'AltAST'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]},
                                         {'LessThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                        {'IdentifierName': 'numberOfAlts'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                                               {'IdentifierName': 'ast'}]},
                                                                                                                                                                                             {'IdentifierName': 'altLabel'}]}]}]}]}]},
                                                    {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'altLabel'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                     {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alts'},
                                                                                                                                                          {'IdentifierName': 'Add'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                          {'IdentifierName': 'ast'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alts'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'alts'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'AltAST'}}]}},
                                                             'name': {'identifier': 'alts'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'AltAST'}}]}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'altLabel'},
                                                                                                      'scope': {'name': {'identifier': 'ast'},
                                                                                                                'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                                          'name': {'name': {'identifier': 'alt'}}}}},
                                                                                      'name': {'identifier': 'altLabel'},
                                                                                      'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'altLabel'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'ast'},
                                                                                                   'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                             'name': {'name': {'identifier': 'alt'}}}}],
                                                                                    'name': {'identifier': 'add'},
                                                                                    'scope': {'name': {'identifier': 'alts'}}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'numberOfAlts'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '1'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'condition': {'name': {'identifier': 'isEmpty'},
                                             'scope': {'name': {'identifier': 'alts'}}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'name': {'identifier': 'alts'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'Rule'},
                                             {'IdentifierName': 'rules'},
                                             {'Block': [{'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'reservedNames'},
                                                                                                                                     {'IdentifierName': 'Contains'}]},
                                                                                                   {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                     {'IdentifierName': 'name'}]}]}]}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'errMgr'},
                                                                                                                                                                         {'IdentifierName': 'GrammarError'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                                                         {'IdentifierName': 'RESERVED_RULE_NAME'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                         {'IdentifierName': 'fileName'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                                                                                          {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                                                                                                                                                                                                        {'IdentifierName': 'ast'}]},
                                                                                                                                                                                                                                                                                                                      {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
                                                                                                                                                                                                         {'IdentifierName': 'Token'}]}]},
                                                                                                                                                         {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                                                         {'IdentifierName': 'name'}]}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'name'},
                                                                                     'scope': {'name': {'identifier': 'rule'}}}],
                                                                      'name': {'identifier': 'contains'},
                                                                      'scope': {'name': {'identifier': 'reservedNames'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'RESERVED_RULE_NAME'},
                                                                                                                   'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                                  {'name': {'identifier': 'fileName'},
                                                                                                                   'scope': {'name': {'identifier': 'g'}}},
                                                                                                                  {'name': {'identifier': 'getToken'},
                                                                                                                   'scope': {'inner': {'expression': {'arguments': [{'value': '0'}],
                                                                                                                                                      'name': {'identifier': 'getChild'},
                                                                                                                                                      'scope': {'name': {'identifier': 'ast'},
                                                                                                                                                                'scope': {'name': {'identifier': 'rule'}}}},
                                                                                                                                       'type': {'name': {'identifier': 'GrammarAST'}}}}},
                                                                                                                  {'name': {'identifier': 'name'},
                                                                                                                   'scope': {'name': {'identifier': 'rule'}}}],
                                                                                                    'name': {'identifier': 'grammarError'},
                                                                                                    'scope': {'name': {'identifier': 'errMgr'}}}}]}}]},
                               'iterable': {'name': {'identifier': 'rules'}},
                               'variable': {'variables': [{'name': {'identifier': 'rule'},
                                                           'type': {'name': {'identifier': 'Rule'}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetActionResolver'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'setActionResolver'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddDecl'},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'AttributeDecl'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'a'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'factory'}},
                                                                           {'name': {'identifier': 'a'}}],
                                                             'type': {'name': {'identifier': 'AttributeDecl'}}}],
                                              'name': {'identifier': 'addDecl'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'TerminalAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'TerminalAST'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentRule'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'GetRule'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentRule'}},
                                              'value': {'arguments': [{'name': {'identifier': 'getText'},
                                                                       'scope': {'name': {'identifier': 'ID'}}}],
                                                        'name': {'identifier': 'getRule'},
                                                        'scope': {'name': {'identifier': 'g'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'root'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'root'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'GetListenerFileName'},
                                                                      {'ArgumentList': [{'Argument': [{'FalseLiteralExpression': 'false'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'getListenerFileName'},
                                              'scope': {'name': {'identifier': 'getTarget'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeGenerator'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetGenerator'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ListenerFile'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': '@delegate'}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                                                                                      {'IdentifierName': 'GetListenerFileName'}]},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getGenerator'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'gen'},
                                                             'type': {'name': {'identifier': 'CodeGenerator'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'delegate'}},
                                                            {'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'getListenerFileName'},
                                                             'scope': {'name': {'identifier': 'gen'}}}],
                                              'type': {'name': {'identifier': 'ListenerFile'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                         {'IdentifierName': 'Type'}]},
                                                                                       {'IdentifierName': 'CLOSURE'}]},
                                                                 {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                         {'IdentifierName': 'Type'}]},
                                                                                       {'IdentifierName': 'POSITIVE_CLOSURE'}]}]},
                                        {'Block': [{'ForEachStatement': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                                                {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'}]}]}]}]},
                                                                         {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                     {'IdentifierName': 'Peek'}]},
                                                                                                   {'ArgumentList': '()'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                                 {'IdentifierName': 'Value'}]},
                                                                                                                                                                               {'IdentifierName': 'Value'}]},
                                                                                                                                             {'NumericLiteralExpression': '2'}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                {'IdentifierName': 'Type'}]},
                                                              {'IdentifierName': 'CLOSURE'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                    {'IdentifierName': 'Peek'}]},
                                                                                                                                                                  {'ArgumentList': '()'}]},
                                                                                                                                        {'IdentifierName': 'Clear'}]},
                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'left': {'name': {'identifier': 'getType'},
                                                               'scope': {'name': {'identifier': 'tree'}}},
                                                      'operator': 'EQUALS',
                                                      'right': {'name': {'identifier': 'CLOSURE'}}},
                                             'operator': 'OR',
                                             'right': {'left': {'name': {'identifier': 'getType'},
                                                                'scope': {'name': {'identifier': 'tree'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'POSITIVE_CLOSURE'}}}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                    'target': {'name': {'identifier': 'v'},
                                                                                                               'scope': {'name': {'identifier': 'getValue'},
                                                                                                                         'scope': {'name': {'identifier': 'entry'}}}},
                                                                                                    'value': {'value': '2'}}}]},
                                                            'iterable': {'name': {'identifier': 'entrySet'},
                                                                         'scope': {'name': {'identifier': 'peek'},
                                                                                   'scope': {'name': {'identifier': 'frequencies'}}}},
                                                            'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                                                        'type': {'name': {'identifier': 'Entry'},
                                                                                                 'scope': {'name': {'identifier': 'Map'}},
                                                                                                 'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                                                   {'name': {'identifier': 'MutableInt'}}]}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'getType'},
                                                      'scope': {'name': {'identifier': 'tree'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'CLOSURE'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                                                           'scope': {'name': {'identifier': 'peek'},
                                                                                     'scope': {'name': {'identifier': 'minFrequencies'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TrackRef'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'trackRef'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'VisitGrammar'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'ast'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ast'},
                                                             'scope': {'name': {'identifier': 'g'}}}],
                                              'name': {'identifier': 'visitGrammar'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'labels'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'labels'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'currentOuterMostAlternativeBlock'}]},
                                                                                {'IdentifierName': 'currentOuterMostAlternativeBlock'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentOuterMostAlternativeBlock'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'currentOuterMostAlternativeBlock'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetRuleName'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'name'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                  {'IdentifierName': 'IsTokenName'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getRuleName'}},
                                                             'name': {'identifier': 'name'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'name'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'arguments': [{'name': {'identifier': 'name'}}],
                                                        'name': {'identifier': 'isTokenName'},
                                                        'scope': {'name': {'identifier': 'Grammar'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITree'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetFirstChildWithType'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                                                                                                                          {'IdentifierName': 'BLOCK'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blk'},
                                                                                                {'IdentifierName': 'ChildCount'}]},
                                                              {'NumericLiteralExpression': '1'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITree'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'blk'},
                                                                                                                                                                                                                      {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITree'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'onlyAlt'},
                                                                                                                                                                                                                      {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'onlyAlt'},
                                                                                                                                                                                                                                                                              {'IdentifierName': 'ChildCount'}]},
                                                                                                                                                                                                                                            {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                                                   {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lastChild'},
                                                                                                                            {'IdentifierName': 'Type'}]},
                                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                            {'IdentifierName': 'ACTION'}]}]},
                                                                    {'Block': [{'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'ActionAST'},
                                                                                                                        {'IdentifierName': 'lastChild'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'BLOCK'},
                                                                                            'scope': {'name': {'identifier': 'ANTLRParser'}}}],
                                                                             'name': {'identifier': 'getFirstChildWithType'}},
                                                             'name': {'identifier': 'blk'},
                                                             'type': {'name': {'identifier': 'Tree'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'getChildCount'},
                                                      'scope': {'name': {'identifier': 'blk'}}},
                                             'operator': 'EQUALS',
                                             'right': {'value': '1'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'value': '0'}],
                                                                                                          'name': {'identifier': 'getChild'},
                                                                                                          'scope': {'name': {'identifier': 'blk'}}},
                                                                                          'name': {'identifier': 'onlyAlt'},
                                                                                          'type': {'name': {'identifier': 'Tree'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'left': {'name': {'identifier': 'getChildCount'},
                                                                                                                                  'scope': {'name': {'identifier': 'onlyAlt'}}},
                                                                                                                         'operator': 'MINUS',
                                                                                                                         'right': {'value': '1'}}],
                                                                                                          'name': {'identifier': 'getChild'},
                                                                                                          'scope': {'name': {'identifier': 'onlyAlt'}}},
                                                                                          'name': {'identifier': 'lastChild'},
                                                                                          'type': {'name': {'identifier': 'Tree'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'getType'},
                                                                                   'scope': {'name': {'identifier': 'lastChild'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'ACTION'},
                                                                                    'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                                                            'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'lastChild'}},
                                                                                                        'type': {'name': {'identifier': 'ActionAST'}}}}]}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'delegate'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'indexToPredMap'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'indexToPredMap'},
                                                                                                            {'InvocationExpression': [{'IdentifierName': 'GetIndexToPredicateMap'},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'indexToPredMap'},
                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'pred'},
                                                                                                                                                                                                                                      {'IdentifierName': 'predIndex'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actionAST'},
                                                                              {'IdentifierName': 'Text'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'indexToPredMap'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'indexToPredMap'}},
                                                                           'value': {'name': {'identifier': 'getIndexToPredicateMap'}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'predIndex'},
                                                                                            'scope': {'name': {'identifier': 'pred'}}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'indexToPredMap'}}},
                                                             'name': {'identifier': 'actionAST'},
                                                             'type': {'name': {'identifier': 'ActionAST'}}}]}},
                              {'expression': {'name': {'identifier': 'getText'},
                                              'scope': {'name': {'identifier': 'actionAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                        {'IdentifierName': 'GetCurrentOuterMostAlternativeBlock'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getCurrentOuterMostAlternativeBlock'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Set'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'setAST'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'labelAST'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'invert'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                             {'IdentifierName': 'Set'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'setAST'}},
                                                                                           {'name': {'identifier': 'labelAST'}},
                                                                                           {'name': {'identifier': 'invert'}}],
                                                                             'name': {'identifier': 'set'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'ops'}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                                 'name': {'identifier': 'set'},
                                                                                 'scope': {'name': {'identifier': 'ext'}}}}}]},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Vocabulary'},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetTokenLiteralNames'},
                                                                                                                                    {'ArgumentList': '()'}]}]},
                                                                                            {'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetTokenSymbolicNames'},
                                                                                                                                    {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getTokenLiteralNames'}},
                                                            {'name': {'identifier': 'getTokenSymbolicNames'}}],
                                              'type': {'name': {'identifier': 'VocabularyImpl'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'l'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'l'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ANTLRStringStream'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ANTLRStringStream'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                                                                                                                              {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'Line'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'Line'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@in'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]},
                                                                                {'SimpleMemberAccessExpression': [{'IdentifierName': 'actionToken'},
                                                                                                                  {'IdentifierName': 'CharPositionInLine'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ActionSplitter'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ActionSplitter'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': '@in'}]},
                                                                                                                                                                              {'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'node'},
                                                                                                                  {'IdentifierName': 'chunks'}]},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'splitter'},
                                                                                                                                            {'IdentifierName': 'GetActionTokens'}]},
                                                                                                          {'ArgumentList': '()'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'actionToken'}}}],
                                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}},
                                                             'name': {'identifier': 'in'},
                                                             'type': {'name': {'identifier': 'ANTLRStringStream'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getCharPositionInLine'},
                                                             'scope': {'name': {'identifier': 'actionToken'}}}],
                                              'name': {'identifier': 'setCharPositionInLine'},
                                              'scope': {'name': {'identifier': 'in'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'in'}},
                                                                                           {}],
                                                                             'type': {'name': {'identifier': 'ActionSplitter'}}},
                                                             'name': {'identifier': 'splitter'},
                                                             'type': {'name': {'identifier': 'ActionSplitter'}}}]}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'chunks'},
                                                         'scope': {'name': {'identifier': 'node'}}},
                                              'value': {'name': {'identifier': 'getActionTokens'},
                                                        'scope': {'name': {'identifier': 'splitter'}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckInvalidRuleDef'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'modifiers'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ForEachStatement': [{'IdentifierName': 'GrammarAST'},
                                                                         {'IdentifierName': 'modifiers'},
                                                                         {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                             {'IdentifierName': 'Type'}]},
                                                                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                                                             {'IdentifierName': 'FRAGMENT'}]}]},
                                                                                                     {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'inFragmentRule'},
                                                                                                                                                                         {'TrueLiteralExpression': 'true'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'IdentifierName': 'inFragmentRule'}]},
                                        {'Block': [{'ExpressionStatement': [{'PostIncrementExpression': [{'IdentifierName': 'nonFragmentRuleCount'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkInvalidRuleDef'}}},
                              {'condition': {'left': {'name': {'identifier': 'modifiers'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'getType'},
                                                                                                            'scope': {'name': {'identifier': 'tree'}}},
                                                                                                   'operator': 'EQUALS',
                                                                                                   'right': {'name': {'identifier': 'FRAGMENT'},
                                                                                                             'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                                                                                     'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                                 'target': {'name': {'identifier': 'inFragmentRule'}},
                                                                                                                                 'value': {'value': 'true'}}}]}}]},
                                                            'iterable': {'name': {'identifier': 'modifiers'}},
                                                            'variable': {'variables': [{'name': {'identifier': 'tree'},
                                                                                        'type': {'name': {'identifier': 'GrammarAST'}}}]}}]}},
                              {'condition': {'expression': {'name': {'identifier': 'inFragmentRule'}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'expression': {'name': {'identifier': 'nonFragmentRuleCount'}},
                                                                           'operator': 'POSTFIX_INCREMENT'}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'VisitGrammar'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ast'}}],
                                              'name': {'identifier': 'visitGrammar'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'root'}]},
                                                                                {'IdentifierName': 'root'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'root'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'root'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Precedence'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ASSOC'},
                                                                               {'VariableDeclarator': 'assoc'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altAssociativity'},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]},
                                                                                                              {'Argument': [{'IdentifierName': 'assoc'}]}]}]},
                                                                  {'EqualsExpression': [{'IdentifierName': 'assoc'},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'ASSOC'},
                                                                                                                          {'IdentifierName': 'right'}]}]}]},
                                        {'ReturnStatement': [{'IdentifierName': 'p'}]}]},
                       {'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'p'},
                                                               {'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'alt'}}],
                                                                             'name': {'identifier': 'precedence'}},
                                                             'name': {'identifier': 'p'},
                                                             'type': {'type': 'INT'}}]}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'alt'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'altAssociativity'}}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'right'},
                                                       'scope': {'name': {'identifier': 'ASSOC'}}}},
                               'thenStmt': {'expression': {'name': {'identifier': 'p'}}}},
                              {'expression': {'left': {'name': {'identifier': 'p'}},
                                              'operator': 'PLUS',
                                              'right': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'BlockAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'BlockAST'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'TokenRef'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'stringLiteralAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'stringLiteralAST'}}],
                                              'name': {'identifier': 'tokenRef'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'BlockHasWildcardAlt'},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'blkAST'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'blkAST'}}],
                                             'name': {'identifier': 'blockHasWildcardAlt'}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}},
                              {'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CodeBlockForOuterMostAlt'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                                                                                                          {'IdentifierName': 'GetOuterMostAltCodeBlock'}]},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'alt'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'altLabelCtxs'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AltLabelStructDecl'},
                                                                                                           {'VariableDeclarator': 'altCtx'}]}]},
                                                   {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'altLabel'},
                                                                                                                       {'NullLiteralExpression': 'null'}]},
                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altLabelCtxs'},
                                                                                                                                                          {'IdentifierName': 'TryGetValue'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'altLabel'}]},
                                                                                                                                          {'Argument': [{'IdentifierName': 'altCtx'}]}]}]}]},
                                                                    {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altCtx'},
                                                                                                                                                                    {'IdentifierName': 'AddDecl'}]},
                                                                                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]}]}]}]},
                                                                               {'ReturnStatement': 'return;'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleCtx'},
                                                                                                            {'IdentifierName': 'AddDecl'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getOuterMostAltCodeBlock'},
                                                                             'scope': {'name': {'identifier': 'd'}}},
                                                             'name': {'identifier': 'alt'},
                                                             'type': {'name': {'identifier': 'CodeBlockForOuterMostAlt'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'alt'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'altLabelCtxs'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'altLabel'}}],
                                                                                                          'name': {'identifier': 'get'},
                                                                                                          'scope': {'name': {'identifier': 'altLabelCtxs'}}},
                                                                                          'name': {'identifier': 'altCtx'},
                                                                                          'type': {'name': {'identifier': 'AltLabelStructDecl'}}}]}},
                                                           {'condition': {'left': {'name': {'identifier': 'altCtx'}},
                                                                          'operator': 'NOT_EQUALS',
                                                                          'right': {}},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'd'}}],
                                                                                                        'name': {'identifier': 'addDecl'},
                                                                                                        'scope': {'name': {'identifier': 'altCtx'}}}},
                                                                                        {}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'd'}}],
                                              'name': {'identifier': 'addDecl'},
                                              'scope': {'name': {'identifier': 'ruleCtx'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'object'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'ElementAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                         {'IdentifierName': 'Append'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'o'},
                                                                                                                                                                                                   {'IdentifierName': 'ToString'}]},
                                                                                                                                                                 {'ArgumentList': '()'}]}]}]}]}]},
                                                    {'IfStatement': [{'LessThanExpression': [{'ParenthesizedExpression': [{'AddExpression': [{'IdentifierName': 'i'},
                                                                                                                                             {'NumericLiteralExpression': '1'}]}]},
                                                                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                               {'IdentifierName': 'Length'}]}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                                                     {'IdentifierName': 'Append'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'IdentifierName': 'separator'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'buf'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'index': {'name': {'identifier': 'i'}},
                                                                                                      'name': {'name': {'identifier': 'a'}}},
                                                                                      'name': {'identifier': 'o'},
                                                                                      'type': {'name': {'identifier': 'Object'}}}]}},
                                                       {'expression': {'arguments': [{'name': {'identifier': 'toString'},
                                                                                      'scope': {'name': {'identifier': 'o'}}}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'buf'}}}},
                                                       {'condition': {'left': {'inner': {'left': {'name': {'identifier': 'i'}},
                                                                                         'operator': 'PLUS',
                                                                                         'right': {'value': '1'}}},
                                                                      'operator': 'LESS',
                                                                      'right': {'name': {'identifier': 'length'},
                                                                                'scope': {'name': {'identifier': 'a'}}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'separator'}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'buf'}}}}]}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'a'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'buf'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'cycles'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                       {'ForEachStatement': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Rule'}]}]},
                                             {'IdentifierName': 'cycles'},
                                             {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'collection'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                         {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                                                        {'ForEachStatement': [{'IdentifierName': 'Rule'},
                                                                              {'IdentifierName': 'collection'},
                                                                              {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                     {'IdentifierName': 'ast'}]},
                                                                                                                                   {'NullLiteralExpression': 'null'}]},
                                                                                                          {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                                                              {'IdentifierName': 'ast'}]},
                                                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'cycles'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'collection'}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'statements': [{'expression': {}}]}},
                                                       {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'ast'},
                                                                                                        'scope': {'name': {'identifier': 'rule'}}},
                                                                                               'operator': 'NOT_EQUALS',
                                                                                               'right': {}},
                                                                                 'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'getToken'},
                                                                                                                             'scope': {'name': {'identifier': 'ast'},
                                                                                                                                       'scope': {'name': {'identifier': 'rule'}}}}}]}}]},
                                                        'iterable': {'name': {'identifier': 'collection'}},
                                                        'variable': {'variables': [{'name': {'identifier': 'rule'},
                                                                                    'type': {'name': {'identifier': 'Rule'}}}]}}]},
                               'iterable': {'name': {'identifier': 'cycles'}},
                               'variable': {'variables': [{'name': {'identifier': 'collection'},
                                                           'type': {'name': {'identifier': 'Collection'},
                                                                    'typeArguments': [{'name': {'identifier': 'Rule'}}]}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                            {'IdentifierName': 'type'}]},
                                                                                          {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                            {'IdentifierName': 'RULE_LABEL'}]}]},
                                                                    {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                            {'IdentifierName': 'GetRule'}]},
                                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                                                                                                                              {'IdentifierName': 'element'}]},
                                                                                                                                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]},
                                                                                                                                                                {'IdentifierName': 'ResolveRetvalOrProperty'}]},
                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'y'}]}]}]}]}]},
                                                                    {'ElseClause': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AttributeDict'},
                                                                                                                                                       {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetPredefinedScope'},
                                                                                                                                                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                                                                                                                                  {'IdentifierName': 'type'}]}]}]}]}]}]}]}]},
                                                                                               {'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'scope'},
                                                                                                                                      {'NullLiteralExpression': 'null'}]},
                                                                                                                {'Block': [{'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]}]},
                                                                                               {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'scope'},
                                                                                                                                                                                {'IdentifierName': 'Get'}]},
                                                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'y'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'condition': {'left': {'name': {'identifier': 'type'},
                                                                                   'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                                    'scope': {'name': {'identifier': 'LabelType'}}}},
                                                            'elseStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'type'},
                                                                                                                                                      'scope': {'name': {'identifier': 'anyLabelDef'}}}],
                                                                                                                                       'name': {'identifier': 'getPredefinedScope'}},
                                                                                                                       'name': {'identifier': 'scope'},
                                                                                                                       'type': {'name': {'identifier': 'AttributeDict'}}}]}},
                                                                                        {'condition': {'left': {'name': {'identifier': 'scope'}},
                                                                                                       'operator': 'EQUALS',
                                                                                                       'right': {}},
                                                                                         'thenStmt': {'statements': [{'expression': {}}]}},
                                                                                        {'expression': {'arguments': [{'name': {'identifier': 'y'}}],
                                                                                                        'name': {'identifier': 'get'},
                                                                                                        'scope': {'name': {'identifier': 'scope'}}}}]},
                                                            'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'y'}}],
                                                                                                        'name': {'identifier': 'resolveRetvalOrProperty'},
                                                                                                        'scope': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                                 'scope': {'name': {'identifier': 'element'},
                                                                                                                                           'scope': {'name': {'identifier': 'anyLabelDef'}}}}],
                                                                                                                  'name': {'identifier': 'getRule'},
                                                                                                                  'scope': {'name': {'identifier': 'g'}}}}}]}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'typeToTokenList'},
                                                                                                      {'IdentifierName': 'Count'}]},
                                                                    {'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'size'},
                                                       'scope': {'name': {'identifier': 'typeToTokenList'}}},
                                              'operator': 'MINUS',
                                              'right': {'value': '1'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                        {'IdentifierName': 'Peek'}]},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                        {'IdentifierName': 'Peek'}]},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'ref'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'peek'},
                                                        'scope': {'name': {'identifier': 'frequencies'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'ref'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'peek'},
                                                        'scope': {'name': {'identifier': 'minFrequencies'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'list'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'To'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'To'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'From'},
                                             {'IdentifierName': 'list'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'selector'},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'f'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'b'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'list'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'To'}}]}},
                                                             'name': {'identifier': 'b'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'To'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'f'}}],
                                                                                      'name': {'identifier': 'exec'},
                                                                                      'scope': {'name': {'identifier': 'selector'}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'b'}}}}]},
                               'iterable': {'name': {'identifier': 'list'}},
                               'variable': {'variables': [{'name': {'identifier': 'f'},
                                                           'type': {'name': {'identifier': 'From'}}}]}},
                              {'expression': {'name': {'identifier': 'b'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReportError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'reportError'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetMaxTokenType'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'IdentifierName': 'numTokens'},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenNames'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tokenNames'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'InvocationExpression': [{'IdentifierName': 'GetTokenName'},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'tokenNames'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getMaxTokenType'}},
                                                             'name': {'identifier': 'numTokens'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'numTokens'}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'tokenNames'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'tokenNames'}}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                 'name': {'identifier': 'getTokenName'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'tokenNames'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'tokenNames'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleCommands'},
                                                                                                            {'IdentifierName': 'Clear'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                        {'IdentifierName': 'Rule'}]},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ruleAST'}]},
                                                                                        {'Argument': [{'IdentifierName': 'name'}]},
                                                                                        {'Argument': [{'IdentifierName': 'blk'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'clear'},
                                              'scope': {'name': {'identifier': 'ruleCommands'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ruleAST'}},
                                                            {'name': {'identifier': 'name'}},
                                                            {'name': {'identifier': 'blk'}}],
                                              'name': {'identifier': 'rule'},
                                              'scope': {}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                  {'IdentifierName': 'dict'}]},
                                                                                {'ThisExpression': 'this'}]}]},
                       {'ReturnStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'attributes'},
                                                                                                         {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                    {'IdentifierName': 'name'}]}]}]}]},
                                                                            {'IdentifierName': 'a'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'dict'},
                                                         'scope': {'name': {'identifier': 'a'}}},
                                              'value': {}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'name': {'identifier': 'a'}}},
                                                            {'name': {'identifier': 'a'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'attributes'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'badWords'},
                                                                                                {'IdentifierName': 'Count'}]},
                                                              {'NumericLiteralExpression': '0'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddBadWords'},
                                                                                                      {'ArgumentList': '()'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'badWords'}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'isEmpty'},
                                             'scope': {'name': {'identifier': 'badWords'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'addBadWords'}}}]}},
                              {'expression': {'name': {'identifier': 'badWords'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                        {'IdentifierName': 'GetCurrentBlock'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getCurrentBlock'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'Children'},
                                                                                            {'NullLiteralExpression': 'null'}]},
                                                                   {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                                           {'SimpleMemberAccessExpression': [{'IdentifierName': 'Children'},
                                                                                                                             {'IdentifierName': 'Count'}]}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITree'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'ITree'},
                                                                                                                                                                               {'ElementAccessExpression': [{'IdentifierName': 'Children'},
                                                                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]},
                                                    {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                             {'IdentifierName': 'Type'}]},
                                                                                           {'IdentifierName': 'type'}]},
                                                                     {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nodes'},
                                                                                                                                                                     {'IdentifierName': 'Add'}]},
                                                                                                                                   {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                       {'IdentifierName': 't'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'nodes'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}},
                                                             'name': {'identifier': 'nodes'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'body': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                                                     'name': {'identifier': 'get'},
                                                                                                                     'scope': {'name': {'identifier': 'children'}}},
                                                                                                      'type': {'name': {'identifier': 'Tree'}}},
                                                                                      'name': {'identifier': 't'},
                                                                                      'type': {'name': {'identifier': 'Tree'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'getType'},
                                                                               'scope': {'name': {'identifier': 't'}}},
                                                                      'operator': 'EQUALS',
                                                                      'right': {'name': {'identifier': 'type'}}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'expression': {'name': {'identifier': 't'}},
                                                                                                                   'type': {'name': {'identifier': 'GrammarAST'}}}],
                                                                                                    'name': {'identifier': 'add'},
                                                                                                    'scope': {'name': {'identifier': 'nodes'}}}}]}}]},
                               'compare': {'left': {'left': {'name': {'identifier': 'children'}},
                                                    'operator': 'NOT_EQUALS',
                                                    'right': {}},
                                           'operator': 'AND',
                                           'right': {'left': {'name': {'identifier': 'i'}},
                                                     'operator': 'LESS',
                                                     'right': {'name': {'identifier': 'size'},
                                                               'scope': {'name': {'identifier': 'children'}}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'nodes'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'GetNodesWithTypePreorderDFS_'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'nodes'}]},
                                                                                            {'Argument': [{'IdentifierName': 'types'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'nodes'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}},
                                                             'name': {'identifier': 'nodes'},
                                                             'type': {'name': {'identifier': 'ArrayList'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'nodes'}},
                                                            {'name': {'identifier': 'types'}}],
                                              'name': {'identifier': 'getNodesWithTypePreorderDFS_'}}},
                              {'expression': {'name': {'identifier': 'nodes'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'DefineTokenName'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'stringLiteralToTypeMap'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'lit'}]}]}]},
                                                                                {'IdentifierName': 'ttype'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetTokenForType'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ttype'}]},
                                                                                            {'Argument': [{'IdentifierName': 'name'}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ttype'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                             'name': {'identifier': 'defineTokenName'}},
                                                             'name': {'identifier': 'ttype'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'lit'}},
                                                            {'name': {'identifier': 'ttype'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'stringLiteralToTypeMap'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ttype'}},
                                                            {'name': {'identifier': 'name'}}],
                                              'name': {'identifier': 'setTokenForType'}}},
                              {'expression': {'name': {'identifier': 'ttype'}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'SubtractExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'elems'},
                                                                                                                                                                           {'IdentifierName': 'Count'}]},
                                                                                                                                         {'NumericLiteralExpression': '1'}]}]}]}]},
                                         {'GreaterThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                           {'NumericLiteralExpression': '0'}]},
                                         {'PostDecrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'match'},
                                                                                               {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'elems'},
                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]},
                                                                     {'ReturnStatement': [{'IdentifierName': 'i'}]}]}]}]},
                       {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'elems'}}}],
                                                                      'name': {'identifier': 'select'},
                                                                      'scope': {'name': {'identifier': 'filter'}}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 'i'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'GREATER_EQUALS',
                                           'right': {'value': '0'}},
                               'initialization': [{'variables': [{'initializer': {'left': {'name': {'identifier': 'size'},
                                                                                           'scope': {'name': {'identifier': 'elems'}}},
                                                                                  'operator': 'MINUS',
                                                                                  'right': {'value': '1'}},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_DECREMENT'}]},
                              {'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildBaseVisitorOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildBaseVisitorOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'EqualsExpression': [{'IdentifierName': 'Type'},
                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                    {'IdentifierName': 'LEXER'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'getType'}},
                                              'operator': 'EQUALS',
                                              'right': {'name': {'identifier': 'LEXER'},
                                                        'scope': {'name': {'identifier': 'ANTLRParser'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'atn'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ParserATNFactory'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'ParserATNFactory'},
                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'atn'},
                                                                                                            {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                        {'IdentifierName': 'CreateATN'}]},
                                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'atn'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'atn'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{}],
                                                                                                          'type': {'name': {'identifier': 'ParserATNFactory'}}},
                                                                                          'name': {'identifier': 'factory'},
                                                                                          'type': {'name': {'identifier': 'ParserATNFactory'}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'atn'}},
                                                                           'value': {'name': {'identifier': 'createATN'},
                                                                                     'scope': {'name': {'identifier': 'factory'}}}}}]}},
                              {'expression': {'name': {'identifier': 'atn'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineMax'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'combineMin'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}}],
                                                             'name': {'identifier': 'combineMax'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}}],
                                                             'name': {'identifier': 'combineMin'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'actionIndex'},
                                                                                {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                    {'IdentifierName': 'lexerActions'}]},
                                                                                                                  {'IdentifierName': 'Count'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                {'IdentifierName': 'lexerActions'}]},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'actionAST'}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                           {'IdentifierName': 'lexerActions'}]},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'actionAST'}]}]}]},
                                                                                                            {'IdentifierName': 'actionIndex'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'actionIndex'}},
                                              'value': {'name': {'identifier': 'size'},
                                                        'scope': {'name': {'identifier': 'lexerActions'},
                                                                  'scope': {'name': {'identifier': 'g'}}}}}},
                              {'condition': {'left': {'arguments': [{'name': {'identifier': 'actionAST'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'lexerActions'},
                                                                'scope': {'name': {'identifier': 'g'}}}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'actionAST'}},
                                                                                         {'name': {'identifier': 'actionIndex'}}],
                                                                           'name': {'identifier': 'put'},
                                                                           'scope': {'name': {'identifier': 'lexerActions'},
                                                                                     'scope': {'name': {'identifier': 'g'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetErrorMessage'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'e'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'tokenNames'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'SyntaxError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                            {'IdentifierName': 'SYNTAX_ERROR'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'SourceName'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'e'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'e'}]},
                                                                                            {'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'e'}},
                                                                                           {'name': {'identifier': 'tokenNames'}}],
                                                                             'name': {'identifier': 'getErrorMessage'}},
                                                             'name': {'identifier': 'msg'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'SYNTAX_ERROR'},
                                                             'scope': {'name': {'identifier': 'ErrorType'}}},
                                                            {'name': {'identifier': 'getSourceName'}},
                                                            {'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'e'}}},
                                                            {'name': {'identifier': 'e'}},
                                                            {'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'syntaxError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'}}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 't'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 't'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ruleRefs'},
                                                                                                                              {'IdentifierName': 'ContainsKey'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                  {'NotEqualsExpression': [{'ElementAccessExpression': [{'IdentifierName': 'ruleRefs'},
                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                           {'IdentifierName': 'g'}]},
                                                                                                                         {'IdentifierName': 'GetRule'}]},
                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                          {'IdentifierName': 'type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                          {'IdentifierName': 'RULE_LABEL'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                      {'IdentifierName': 'g'}]},
                                                                                                                                    {'IdentifierName': 'GetRule'}]},
                                                                                                  {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                                      {'IdentifierName': 'element'}]},
                                                                                                                                                                    {'IdentifierName': 'Text'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'arguments': [{'name': {'identifier': 'x'}}],
                                                      'name': {'identifier': 'get'},
                                                      'scope': {'name': {'identifier': 'ruleRefs'}}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                                           'name': {'identifier': 'getRule'},
                                                           'scope': {'name': {'identifier': 'g'},
                                                                     'scope': {'name': {'identifier': 'rule'}}}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'type'},
                                                                'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                 'scope': {'name': {'identifier': 'LabelType'}}}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'element'},
                                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}}}],
                                                                           'name': {'identifier': 'getRule'},
                                                                           'scope': {'name': {'identifier': 'g'},
                                                                                     'scope': {'name': {'identifier': 'rule'}}}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckElementIsOuterMostInSingleAlt'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tree'}]}]}]}]},
                       {'IfStatement': [{'IdentifierName': 'inFragmentRule'},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                                                                                                                                {'IdentifierName': 'Token'}]},
                                                                                                                                                                                                                              {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                                            {'IdentifierName': 'SourceName'}]}]}]}]}]},
                                                   {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'IdentifierName': 'currentRuleName'}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'FRAGMENT_ACTION_IGNORED'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                                        {'IdentifierName': 'Token'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'ruleName'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'tree'}}],
                                              'name': {'identifier': 'checkElementIsOuterMostInSingleAlt'}}},
                              {'condition': {'name': {'identifier': 'inFragmentRule'}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                                                          'scope': {'name': {'identifier': 'getInputStream'},
                                                                                                                    'scope': {'name': {'identifier': 'token'},
                                                                                                                              'scope': {'name': {'identifier': 'tree'}}}}},
                                                                                          'name': {'identifier': 'fileName'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'name': {'identifier': 'currentRuleName'}},
                                                                                          'name': {'identifier': 'ruleName'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'FRAGMENT_ACTION_IGNORED'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'token'},
                                                                                          'scope': {'name': {'identifier': 'tree'}}},
                                                                                         {'name': {'identifier': 'ruleName'}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ConditionalExpression': [{'EqualsExpression': [{'IdentifierName': 'options'},
                                                                                             {'NullLiteralExpression': 'null'}]},
                                                                       {'NumericLiteralExpression': '0'},
                                                                       {'SimpleMemberAccessExpression': [{'IdentifierName': 'options'},
                                                                                                         {'IdentifierName': 'Count'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'condition': {'left': {'name': {'identifier': 'options'}},
                                                            'operator': 'EQUALS',
                                                            'right': {}},
                                              'elseExpr': {'name': {'identifier': 'size'},
                                                           'scope': {'name': {'identifier': 'options'}}},
                                              'thenExpr': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'ParenthesizedExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'TOKEN_LABEL'}]}]},
                                                                                                                            {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'RULE_LABEL'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'inner': {'left': {'left': {'name': {'identifier': 'type'},
                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                           'operator': 'EQUALS',
                                                                           'right': {'name': {'identifier': 'TOKEN_LABEL'},
                                                                                     'scope': {'name': {'identifier': 'LabelType'}}}},
                                                                  'operator': 'OR',
                                                                  'right': {'left': {'name': {'identifier': 'type'},
                                                                                     'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                            'operator': 'EQUALS',
                                                                            'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                                      'scope': {'name': {'identifier': 'LabelType'}}}}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'currentOuterAlt'},
                                                                                {'IdentifierName': 'alt'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentOuterAlt'}},
                                              'value': {'name': {'identifier': 'alt'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ThisExpression': 'this'},
                                                                                                                  {'IdentifierName': 'currentOuterMostAlt'}]},
                                                                                {'IdentifierName': 'currentOuterMostAlt'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'currentOuterMostAlt'},
                                                         'scope': {}},
                                              'value': {'name': {'identifier': 'currentOuterMostAlt'}}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                              {'IdentifierName': 'Type'}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'LEXER'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                                                                  {'IdentifierName': 'lexerOptions'}]},
                                                                                                                                                {'IdentifierName': 'Contains'}]},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'PARSER'}]}]},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                                                                  {'IdentifierName': 'parserOptions'}]},
                                                                                                                                                {'IdentifierName': 'Contains'}]},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                                                                  {'IdentifierName': 'parserOptions'}]},
                                                                                                                                                {'IdentifierName': 'Contains'}]},
                                                                                                              {'ArgumentList': [{'Argument': [{'IdentifierName': 'key'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'name': {'identifier': 'LEXER'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                           'name': {'identifier': 'contains'},
                                                                           'scope': {'name': {'identifier': 'lexerOptions'},
                                                                                     'scope': {'name': {'identifier': 'Grammar'}}}}}]},
                                           {'label': {'name': {'identifier': 'PARSER'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                            'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                           'name': {'identifier': 'contains'},
                                                                           'scope': {'name': {'identifier': 'parserOptions'},
                                                                                     'scope': {'name': {'identifier': 'Grammar'}}}}}]},
                                           {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'key'}}],
                                                                           'name': {'identifier': 'contains'},
                                                                           'scope': {'name': {'identifier': 'parserOptions'},
                                                                                     'scope': {'name': {'identifier': 'Grammar'}}}}}]}],
                               'selector': {'name': {'identifier': 'getType'},
                                            'scope': {'name': {'identifier': 'g'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': 'prev'}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'channelNameToValueMap'},
                                                                                                    {'IdentifierName': 'TryGetValue'}]},
                                                                  {'ArgumentList': [{'Argument': [{'IdentifierName': 'name'}]},
                                                                                    {'Argument': [{'IdentifierName': 'prev'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'prev'}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'channelNameToValueMap'},
                                                                                                             {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'name'}]}]}]},
                                                                                {'IdentifierName': 'value'}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'SetChannelNameForValue'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'value'}]},
                                                                                            {'Argument': [{'IdentifierName': 'name'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'maxChannelType'},
                                                                                {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                            {'IdentifierName': 'Max'}]},
                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'maxChannelType'}]},
                                                                                                                            {'Argument': [{'IdentifierName': 'value'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'value'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'name'}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'channelNameToValueMap'}}},
                                                             'name': {'identifier': 'prev'},
                                                             'type': {'name': {'identifier': 'Integer'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'prev'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'prev'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'}},
                                                            {'name': {'identifier': 'value'}}],
                                              'name': {'identifier': 'put'},
                                              'scope': {'name': {'identifier': 'channelNameToValueMap'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'value'}},
                                                            {'name': {'identifier': 'name'}}],
                                              'name': {'identifier': 'setChannelNameForValue'}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'maxChannelType'}},
                                              'value': {'arguments': [{'name': {'identifier': 'maxChannelType'}},
                                                                      {'name': {'identifier': 'value'}}],
                                                        'name': {'identifier': 'max'},
                                                        'scope': {'name': {'identifier': 'Math'}}}}},
                              {'expression': {'name': {'identifier': 'value'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildLexerOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildLexerOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'rf'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'rf'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TestSetInline'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'AddCodeForLookaheadTempVar'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'look'}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'expr'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'CaptureNextTokenType'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'CaptureNextTokenType'},
                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                                                                                                                                          {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'expr'},
                                                                                                                                                                                                                                                          {'IdentifierName': 'varName'}]}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'AddIterationOp'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'nextType'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'expr'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'look'}}],
                                                                             'name': {'identifier': 'addCodeForLookaheadTempVar'}},
                                                             'name': {'identifier': 'expr'},
                                                             'type': {'name': {'identifier': 'TestSetInline'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'expr'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'factory'}},
                                                                                                                        {'name': {'identifier': 'varName'},
                                                                                                                         'scope': {'name': {'identifier': 'expr'}}}],
                                                                                                          'type': {'name': {'identifier': 'CaptureNextTokenType'}}},
                                                                                          'name': {'identifier': 'nextType'},
                                                                                          'type': {'name': {'identifier': 'CaptureNextTokenType'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'nextType'}}],
                                                                           'name': {'identifier': 'addIterationOp'}}}]}},
                              {'expression': {'name': {'identifier': 'expr'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'SemanticContext'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'op'},
                                                                               {'IdentifierName': 'Operands'}]},
                                             {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                      {'IdentifierName': 'Length'}]},
                                                                                                    {'NumericLiteralExpression': '0'}]},
                                                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                                                         {'IdentifierName': 'Append'}]},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'separator'}]}]}]}]}]}]},
                                                        {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                             {'IdentifierName': 'Append'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'GetSemanticContextDisplayString'},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'IdentifierName': 'operand'}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'buf'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'statements': [{'condition': {'left': {'name': {'identifier': 'length'},
                                                                               'scope': {'name': {'identifier': 'buf'}}},
                                                                      'operator': 'GREATER',
                                                                      'right': {'value': '0'}},
                                                        'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'separator'}}],
                                                                                                    'name': {'identifier': 'append'},
                                                                                                    'scope': {'name': {'identifier': 'buf'}}}}]}},
                                                       {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'operand'}}],
                                                                                      'name': {'identifier': 'getSemanticContextDisplayString'}}],
                                                                       'name': {'identifier': 'append'},
                                                                       'scope': {'name': {'identifier': 'buf'}}}}]},
                               'iterable': {'name': {'identifier': 'getOperands'},
                                            'scope': {'name': {'identifier': 'op'}}},
                               'variable': {'variables': [{'name': {'identifier': 'operand'},
                                                           'type': {'name': {'identifier': 'SemanticContext'}}}]}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'buf'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IToken'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                {'IdentifierName': 'Token'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                                                  {'IdentifierName': 'InputStream'}]},
                                                                                                                                                                {'IdentifierName': 'SourceName'}]}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'valueAST'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Grammar'},
                                                                                                                                                                                          {'IdentifierName': 'tokenOptions'}]},
                                                                                                                                                        {'IdentifierName': 'Contains'}]},
                                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                            {'IdentifierName': 'tool'}]},
                                                                                                                                                                          {'IdentifierName': 'errMgr'}]},
                                                                                                                                        {'IdentifierName': 'GrammarError'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                        {'IdentifierName': 'ILLEGAL_OPTION'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'fileName'}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'optionID'}]},
                                                                                                                        {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'optionID'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]}]}]}]},
                                                   {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'token'},
                                                                             'scope': {'name': {'identifier': 'ID'}}},
                                                             'name': {'identifier': 'optionID'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'variables': [{'initializer': {'name': {'identifier': 'getSourceName'},
                                                                             'scope': {'name': {'identifier': 'getInputStream'},
                                                                                       'scope': {'name': {'identifier': 'optionID'}}}},
                                                             'name': {'identifier': 'fileName'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'valueAST'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                     'scope': {'name': {'identifier': 'optionID'}}}],
                                                                      'name': {'identifier': 'contains'},
                                                                      'scope': {'name': {'identifier': 'tokenOptions'},
                                                                                'scope': {'name': {'identifier': 'Grammar'}}}},
                                                       'operator': 'LOGICAL_COMPLEMENT'}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ILLEGAL_OPTION'},
                                                                                          'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                         {'name': {'identifier': 'fileName'}},
                                                                                         {'name': {'identifier': 'optionID'}},
                                                                                         {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'optionID'}}}],
                                                                           'name': {'identifier': 'grammarError'},
                                                                           'scope': {'name': {'identifier': 'errMgr'},
                                                                                     'scope': {'name': {'identifier': 'tool'},
                                                                                               'scope': {'name': {'identifier': 'g'}}}}}},
                                                           {'expression': {'value': 'false'}}]}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rules'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Count'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'result'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                               {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                  {'IdentifierName': 'INVALID_RULE_NAME'}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'Rule'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'rules'},
                                                                               {'IdentifierName': 'Values'}]},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'result'},
                                                                                                                                              {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                                                                                         {'IdentifierName': 'index'}]}]}]}]},
                                                                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'rule'},
                                                                                                                                                   {'IdentifierName': 'name'}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'size'},
                                                                                                       'scope': {'name': {'identifier': 'rules'}}}}]},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'result'}},
                                                            {'name': {'identifier': 'INVALID_RULE_NAME'}}],
                                              'name': {'identifier': 'fill'},
                                              'scope': {'name': {'identifier': 'Arrays'}}}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'index'},
                                                                                            'scope': {'name': {'identifier': 'rule'}}},
                                                                                  'name': {'name': {'identifier': 'result'}}},
                                                                       'value': {'name': {'identifier': 'name'},
                                                                                 'scope': {'name': {'identifier': 'rule'}}}}}]},
                               'iterable': {'name': {'identifier': 'values'},
                                            'scope': {'name': {'identifier': 'rules'}}},
                               'variable': {'variables': [{'name': {'identifier': 'rule'},
                                                           'type': {'name': {'identifier': 'Rule'}}}]}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'ops'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ops'},
                                                                                                            {'IdentifierName': 'Insert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]},
                                                                                            {'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ops'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'ops'}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'i'}},
                                                            {'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'ops'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'StringBuilder'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'StringBuilder'},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'ActionChunk'},
                                             {'IdentifierName': 'chunks'},
                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                                                  {'IdentifierName': 'Append'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'c'},
                                                                                                                                                                                            {'IdentifierName': 'ToString'}]},
                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'buf'},
                                                                                                        {'IdentifierName': 'ToString'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'StringBuilder'}}},
                                                             'name': {'identifier': 'buf'},
                                                             'type': {'name': {'identifier': 'StringBuilder'}}}]}},
                              {'body': {'expression': {'arguments': [{'name': {'identifier': 'toString'},
                                                                      'scope': {'name': {'identifier': 'c'}}}],
                                                       'name': {'identifier': 'append'},
                                                       'scope': {'name': {'identifier': 'buf'}}}},
                               'iterable': {'name': {'identifier': 'chunks'}},
                               'variable': {'variables': [{'name': {'identifier': 'c'},
                                                           'type': {'name': {'identifier': 'ActionChunk'}}}]}},
                              {'expression': {'name': {'identifier': 'toString'},
                                              'scope': {'name': {'identifier': 'buf'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Choice'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetChoiceBlock'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'blkAST'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'alts'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'label'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'c'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'GetChoiceBlock'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'c'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'blkAST'}},
                                                                                           {'name': {'identifier': 'alts'}},
                                                                                           {'name': {'identifier': 'label'}}],
                                                                             'name': {'identifier': 'getChoiceBlock'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'name': {'identifier': 'Choice'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'c'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                 'name': {'identifier': 'getChoiceBlock'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'c'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                     {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                                                                                  {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'IntervalSet'},
                                             {'IdentifierName': 'altLookSets'},
                                             {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altLook'},
                                                                                                                                             {'IdentifierName': 'Add'}]},
                                                                                                           {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'GetTarget'}]},
                                                                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                                                                       {'IdentifierName': 'GetTokenTypesAsTargetLabels'}]},
                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'factory'},
                                                                                                                                                                                                                                                                 {'IdentifierName': 'GetGrammar'}]},
                                                                                                                                                                                                                               {'ArgumentList': '()'}]}]},
                                                                                                                                                                                       {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                                                                                                                                 {'IdentifierName': 'ToArray'}]},
                                                                                                                                                                                                                               {'ArgumentList': '()'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'altLook'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'componentType': {'name': {'identifier': 'String'}},
                                                                                                         'origin': 'TYPE'}]}},
                                                             'name': {'identifier': 'altLook'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'componentType': {'name': {'identifier': 'String'}},
                                                                                         'origin': 'TYPE'}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'getGrammar'},
                                                                                                     'scope': {'name': {'identifier': 'factory'}}},
                                                                                                    {'name': {'identifier': 'toArray'},
                                                                                                     'scope': {'name': {'identifier': 's'}}}],
                                                                                      'name': {'identifier': 'getTokenTypesAsTargetLabels'},
                                                                                      'scope': {'name': {'identifier': 'getTarget'},
                                                                                                'scope': {'name': {'identifier': 'getGenerator'},
                                                                                                          'scope': {'name': {'identifier': 'factory'}}}}}],
                                                                       'name': {'identifier': 'add'},
                                                                       'scope': {'name': {'identifier': 'altLook'}}}}]},
                               'iterable': {'name': {'identifier': 'altLookSets'}},
                               'variable': {'variables': [{'name': {'identifier': 's'},
                                                           'type': {'name': {'identifier': 'IntervalSet'}}}]}},
                              {'expression': {'name': {'identifier': 'altLook'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                     {'IdentifierName': 'Count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                         {'IdentifierName': 'Peek'}]},
                                                                                       {'ArgumentList': '()'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'isEmpty'},
                                                            'scope': {'name': {'identifier': 'currentRule'}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'name': {'identifier': 'peek'},
                                                           'scope': {'name': {'identifier': 'currentRule'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'interfaces'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'interfaces'},
                                                                                                            {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'OutputModelObject'}]}]},
                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'interfaces'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'value'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'interfaces'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'interfaces'}},
                                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                              'typeArguments': [{'name': {'identifier': 'OutputModelObject'}}]}}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'value'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'interfaces'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'values'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'values'}}],
                                              'type': {'name': {'identifier': 'ArrayList'},
                                                       'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IToken'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tree'},
                                                                                                                                                                                                                                                                             {'IdentifierName': 'GetChild'}]},
                                                                                                                                                                                                                                           {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]},
                                                                                                                                                                {'IdentifierName': 'Token'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                {'IdentifierName': 'tool'}]},
                                                                                                                                              {'IdentifierName': 'errMgr'}]},
                                                                                                            {'IdentifierName': 'GrammarError'}]},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                            {'IdentifierName': 'V3_LEXER_LABEL'}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                            {'IdentifierName': 'fileName'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'label'}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'label'},
                                                                                                                                            {'IdentifierName': 'Text'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getToken'},
                                                                             'scope': {'inner': {'expression': {'arguments': [{'value': '0'}],
                                                                                                                'name': {'identifier': 'getChild'},
                                                                                                                'scope': {'name': {'identifier': 'tree'}}},
                                                                                                 'type': {'name': {'identifier': 'GrammarAST'}}}}},
                                                             'name': {'identifier': 'label'},
                                                             'type': {'name': {'identifier': 'Token'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'V3_LEXER_LABEL'},
                                                             'scope': {'name': {'identifier': 'ErrorType'}}},
                                                            {'name': {'identifier': 'fileName'},
                                                             'scope': {'name': {'identifier': 'g'}}},
                                                            {'name': {'identifier': 'label'}},
                                                            {'name': {'identifier': 'getText'},
                                                             'scope': {'name': {'identifier': 'label'}}}],
                                              'name': {'identifier': 'grammarError'},
                                              'scope': {'name': {'identifier': 'errMgr'},
                                                        'scope': {'name': {'identifier': 'tool'},
                                                                  'scope': {'name': {'identifier': 'g'}}}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'charSetAST'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ATNState'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'charSetAST'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'IntervalSet'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetSetFromCharSetLiteral'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'charSetAST'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'left'},
                                                                                                            {'IdentifierName': 'AddTransition'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'SetTransition'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'right'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'set'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'charSetAST'},
                                                                                                                  {'IdentifierName': 'atnState'}]},
                                                                                {'IdentifierName': 'left'}]}]},
                       {'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Handle'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'left'}]},
                                                                                            {'Argument': [{'IdentifierName': 'right'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'charSetAST'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'left'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'charSetAST'}}],
                                                                             'name': {'identifier': 'newState'}},
                                                             'name': {'identifier': 'right'},
                                                             'type': {'name': {'identifier': 'ATNState'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'charSetAST'}}],
                                                                             'name': {'identifier': 'getSetFromCharSetLiteral'}},
                                                             'name': {'identifier': 'set'},
                                                             'type': {'name': {'identifier': 'IntervalSet'}}}]}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'right'}},
                                                                           {'name': {'identifier': 'set'}}],
                                                             'type': {'name': {'identifier': 'SetTransition'}}}],
                                              'name': {'identifier': 'addTransition'},
                                              'scope': {'name': {'identifier': 'left'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'atnState'},
                                                         'scope': {'name': {'identifier': 'charSetAST'}}},
                                              'value': {'name': {'identifier': 'left'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'left'}},
                                                            {'name': {'identifier': 'right'}}],
                                              'type': {'name': {'identifier': 'Handle'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'f'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'f'}}}]}},
 {'cs_ast': {'Block': [{'SwitchStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'idNode'},
                                                                                                                {'IdentifierName': 'Parent'}]},
                                                                              {'IdentifierName': 'Type'}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'ASSIGN'}]}]},
                                                               {'SwitchStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'idNode'},
                                                                                                                                                                                          {'IdentifierName': 'Parent'}]},
                                                                                                                                                        {'IdentifierName': 'Parent'}]},
                                                                                                                      {'IdentifierName': 'Type'}]},
                                                                                    {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                                                              {'IdentifierName': 'ELEMENT_OPTIONS'}]}]},
                                                                                                       {'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                                                              {'IdentifierName': 'OPTIONS'}]}]},
                                                                                                       {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                                                                    {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                                                                       {'BreakStatement': 'break;'}]}]},
                                                               {'BreakStatement': 'break;'}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'AT'}]}]},
                                                               {'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'ELEMENT_OPTIONS'}]}]},
                                                               {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                                            {'SwitchSection': [{'CaseSwitchLabel': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                      {'IdentifierName': 'LEXER_ACTION_CALL'}]}]},
                                                               {'IfStatement': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'idNode'},
                                                                                                                                        {'IdentifierName': 'ChildIndex'}]},
                                                                                                      {'NumericLiteralExpression': '0'}]},
                                                                                {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                                                               {'BreakStatement': 'break;'}]},
                                            {'SwitchSection': [{'DefaultSwitchLabel': 'default:'},
                                                               {'BreakStatement': 'break;'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'VisibleGrammarSymbolCausesIssueInGeneratedCode'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'idNode'}]}]}]}]}]},
  'java_ast': {'statements': [{'entries': [{'label': {'name': {'identifier': 'ASSIGN'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                            'statements': [{'entries': [{'label': {'name': {'identifier': 'ELEMENT_OPTIONS'},
                                                                                   'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                                                                        {'label': {'name': {'identifier': 'OPTIONS'},
                                                                                   'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                                                         'statements': [{'expression': {'value': 'false'}}]},
                                                                        {'statements': [{}]}],
                                                            'selector': {'name': {'identifier': 'getType'},
                                                                         'scope': {'name': {'identifier': 'getParent'},
                                                                                   'scope': {'name': {'identifier': 'getParent'},
                                                                                             'scope': {'name': {'identifier': 'idNode'}}}}}},
                                                           {}]},
                                           {'label': {'name': {'identifier': 'AT'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}}},
                                           {'label': {'name': {'identifier': 'ELEMENT_OPTIONS'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                            'statements': [{'expression': {'value': 'false'}}]},
                                           {'label': {'name': {'identifier': 'LEXER_ACTION_CALL'},
                                                      'scope': {'name': {'identifier': 'ANTLRParser'}}},
                                            'statements': [{'condition': {'left': {'name': {'identifier': 'getChildIndex'},
                                                                                   'scope': {'name': {'identifier': 'idNode'}}},
                                                                          'operator': 'EQUALS',
                                                                          'right': {'value': '0'}},
                                                            'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                                                           {}]},
                                           {'statements': [{}]}],
                               'selector': {'name': {'identifier': 'getType'},
                                            'scope': {'name': {'identifier': 'getParent'},
                                                      'scope': {'name': {'identifier': 'idNode'}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'idNode'}}],
                                              'name': {'identifier': 'visibleGrammarSymbolCausesIssueInGeneratedCode'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'locals'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'locals'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'Decl'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'locals'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                                  {'IdentifierName': 'isLocal'}]},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'locals'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'locals'}},
                                                           'value': {'type': {'name': {'identifier': 'OrderedHashSet'},
                                                                              'typeArguments': [{'name': {'identifier': 'Decl'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'd'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'locals'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'isLocal'},
                                                         'scope': {'name': {'identifier': 'd'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'NewState'},
                                                                      {'ArgumentList': [{'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'newState'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 't'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                         {'IdentifierName': 't'}]}]},
                                                                                                        {'IdentifierName': 'DupNode'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 't'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'name': {'identifier': 'dupNode'},
                                              'scope': {'inner': {'expression': {'name': {'identifier': 't'}},
                                                                  'type': {'name': {'identifier': 'GrammarAST'}}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'b'},
                                                              {'IdentifierName': 'SENTINEL'}]},
                                        {'Block': [{'ReturnStatement': [{'IdentifierName': 'a'}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'NotEqualsExpression': [{'IdentifierName': 'a'},
                                                                                                                                   {'IdentifierName': 'SENTINEL'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'CombineAndClip'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'b'}]},
                                                                                                                                                                          {'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'},
                                                                                    {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'int'}]}]}]}]},
                                             {'IdentifierName': 'result'},
                                             {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                     {'IdentifierName': 'Value'}]},
                                                                                                                                                   {'IdentifierName': 'Value'}]},
                                                                                                                 {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Math'},
                                                                                                                                                                             {'IdentifierName': 'Min'}]},
                                                                                                                                           {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                                                                                                                       {'IdentifierName': 'GetCount'}]},
                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                                                                                       {'IdentifierName': 'Key'}]}]}]}]}]},
                                                                                                                                                             {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'b'},
                                                                                                                                                                                                                                       {'IdentifierName': 'GetCount'}]},
                                                                                                                                                                                                     {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'entry'},
                                                                                                                                                                                                                                                                       {'IdentifierName': 'Key'}]}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'result'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'b'}},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'SENTINEL'}}},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'a'}}}]}},
                              {'check': {'left': {'name': {'identifier': 'a'}},
                                         'operator': 'NOT_EQUALS',
                                         'right': {'name': {'identifier': 'SENTINEL'}}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'a'}},
                                                                                           {'name': {'identifier': 'b'}},
                                                                                           {'name': {'identifier': 'MAX_VALUE'},
                                                                                            'scope': {'name': {'identifier': 'Integer'}}}],
                                                                             'name': {'identifier': 'combineAndClip'}},
                                                             'name': {'identifier': 'result'},
                                                             'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'name': {'identifier': 'v'},
                                                                                  'scope': {'name': {'identifier': 'getValue'},
                                                                                            'scope': {'name': {'identifier': 'entry'}}}},
                                                                       'value': {'arguments': [{'arguments': [{'name': {'identifier': 'getKey'},
                                                                                                               'scope': {'name': {'identifier': 'entry'}}}],
                                                                                                'name': {'identifier': 'count'},
                                                                                                'scope': {'name': {'identifier': 'a'}}},
                                                                                               {'arguments': [{'name': {'identifier': 'getKey'},
                                                                                                               'scope': {'name': {'identifier': 'entry'}}}],
                                                                                                'name': {'identifier': 'count'},
                                                                                                'scope': {'name': {'identifier': 'b'}}}],
                                                                                 'name': {'identifier': 'min'},
                                                                                 'scope': {'name': {'identifier': 'Math'}}}}}]},
                               'iterable': {'name': {'identifier': 'entrySet'},
                                            'scope': {'name': {'identifier': 'result'}}},
                               'variable': {'variables': [{'name': {'identifier': 'entry'},
                                                           'type': {'name': {'identifier': 'Entry'},
                                                                    'scope': {'name': {'identifier': 'Map'}},
                                                                    'typeArguments': [{'name': {'identifier': 'String'}},
                                                                                      {'name': {'identifier': 'MutableInt'}}]}}]}},
                              {'expression': {'name': {'identifier': 'result'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ReportError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'msg'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'msg'}}],
                                              'name': {'identifier': 'reportError'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'Action'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'ops'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'Action'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'ops'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'ops'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ast'}}],
                                                                             'name': {'identifier': 'action'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'ops'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'ops'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'ops'}}],
                                                                 'name': {'identifier': 'action'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'ops'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'importedGrammars'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'importedGrammars'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'LogicalNotExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'BaseExpression': 'base'},
                                                                                                                              {'IdentifierName': 'UndefineRule'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'modes'},
                                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                                                                                                                                                  {'IdentifierName': 'mode'}]}]}]}]},
                                                                                                                                                                                          {'IdentifierName': 'Remove'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Debug'},
                                                                                                            {'IdentifierName': 'Assert'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'removed'}]}]}]}]},
                       {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'arguments': [{'name': {'identifier': 'r'}}],
                                                            'name': {'identifier': 'undefineRule'},
                                                            'scope': {}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'r'}}],
                                                                             'name': {'identifier': 'remove'},
                                                                             'scope': {'arguments': [{'name': {'identifier': 'mode'},
                                                                                                      'scope': {'name': {'identifier': 'r'}}}],
                                                                                       'name': {'identifier': 'get'},
                                                                                       'scope': {'name': {'identifier': 'modes'}}}},
                                                             'name': {'identifier': 'removed'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'check': {'name': {'identifier': 'removed'}}},
                              {'expression': {'value': 'true'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LeftRecursionDetector'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftRecursionDetector'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                                                                                                              {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                              {'IdentifierName': 'atn'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lr'},
                                                                                                            {'IdentifierName': 'Check'}]},
                                                                          {'ArgumentList': '()'}]}]},
                       {'IfStatement': [{'GreaterThanExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'lr'},
                                                                                                                                       {'IdentifierName': 'listOfRecursiveCycles'}]},
                                                                                                     {'IdentifierName': 'Count'}]},
                                                                   {'NumericLiteralExpression': '0'}]},
                                        {'ReturnStatement': 'return;'}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                    {'IdentifierName': 'IsLexer'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ProcessLexer'},
                                                                                                      {'ArgumentList': '()'}]}]}]},
                                        {'ElseClause': [{'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ProcessParser'},
                                                                                                                      {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'g'}},
                                                                                           {'name': {'identifier': 'atn'},
                                                                                            'scope': {'name': {'identifier': 'g'}}}],
                                                                             'type': {'name': {'identifier': 'LeftRecursionDetector'}}},
                                                             'name': {'identifier': 'lr'},
                                                             'type': {'name': {'identifier': 'LeftRecursionDetector'}}}]}},
                              {'expression': {'name': {'identifier': 'check'},
                                              'scope': {'name': {'identifier': 'lr'}}}},
                              {'condition': {'expression': {'name': {'identifier': 'isEmpty'},
                                                            'scope': {'name': {'identifier': 'listOfRecursiveCycles'},
                                                                      'scope': {'name': {'identifier': 'lr'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {}},
                              {'condition': {'name': {'identifier': 'isLexer'},
                                             'scope': {'name': {'identifier': 'g'}}},
                               'elseStmt': {'statements': [{'expression': {'name': {'identifier': 'processParser'}}}]},
                               'thenStmt': {'statements': [{'expression': {'name': {'identifier': 'processLexer'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '1'}]}]}]},
                                         {'LessThanOrEqualExpression': [{'IdentifierName': 'i'},
                                                                        {'IdentifierName': 'numberOfAlts'}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'refs'},
                                                                                                                                         {'IdentifierName': 'UnionWith'}]},
                                                                                                       {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                                                                                        {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                                                                                                                           {'IdentifierName': 'tokenRefs'}]},
                                                                                                                                                                         {'IdentifierName': 'Keys'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'refs'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'HashSet'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'refs'},
                                                             'type': {'name': {'identifier': 'Set'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'keySet'},
                                                                                      'scope': {'name': {'identifier': 'tokenRefs'},
                                                                                                'scope': {'index': {'name': {'identifier': 'i'}},
                                                                                                          'name': {'name': {'identifier': 'alt'}}}}}],
                                                                       'name': {'identifier': 'addAll'},
                                                                       'scope': {'name': {'identifier': 'refs'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS_EQUALS',
                                           'right': {'name': {'identifier': 'numberOfAlts'}}},
                               'initialization': [{'variables': [{'initializer': {'value': '1'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'refs'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'c'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'c'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'gen'},
                                                                                                            {'IdentifierName': 'WriteRecognizer'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'template'}]},
                                                                                            {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'name': {'identifier': 'launch_ST_inspector'},
                                             'scope': {'name': {'identifier': 'tool'},
                                                       'scope': {'name': {'identifier': 'g'}}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'inspect'},
                                                                                                          'scope': {'name': {'identifier': 'template'}}},
                                                                                          'name': {'identifier': 'viz'},
                                                                                          'type': {'name': {'identifier': 'STViz'}}}]}},
                                                           {'condition': {'name': {'identifier': 'ST_inspector_wait_for_close'},
                                                                          'scope': {'name': {'identifier': 'tool'},
                                                                                    'scope': {'name': {'identifier': 'g'}}}},
                                                            'thenStmt': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'INTERNAL_ERROR'},
                                                                                                                                                                  'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                                                                                 {'name': {'identifier': 'ex'}}],
                                                                                                                                                   'name': {'identifier': 'toolError'},
                                                                                                                                                   'scope': {'name': {'identifier': 'errMgr'},
                                                                                                                                                             'scope': {'name': {'identifier': 'tool'},
                                                                                                                                                                       'scope': {'name': {'identifier': 'g'}}}}}}]},
                                                                                                           'parameter': {'isVarArgs': 'false',
                                                                                                                         'name': {'identifier': 'ex'},
                                                                                                                         'type': {'name': {'identifier': 'InterruptedException'}}}}],
                                                                                         'tryBlock': {'statements': [{'expression': {'name': {'identifier': 'waitForClose'},
                                                                                                                                     'scope': {'name': {'identifier': 'viz'}}}}]}}]}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'template'}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'writeRecognizer'},
                                              'scope': {'name': {'identifier': 'gen'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NotEqualsExpression': [{'InvocationExpression': [{'IdentifierName': 'GetAltLabels'},
                                                                                               {'ArgumentList': '()'}]},
                                                                     {'NullLiteralExpression': 'null'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'getAltLabels'}},
                                              'operator': 'NOT_EQUALS',
                                              'right': {}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AltAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'AltAST'},
                                                                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'originalAltTree'},
                                                                                                                                                                                                              {'IdentifierName': 'DupTree'}]},
                                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'StripAltLabel'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'altTree'}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'Text'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'altTree'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ConditionalExpression': [{'NotEqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altTree'},
                                                                                                                                                                                                                    {'IdentifierName': 'altLabel'}]},
                                                                                                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                                                                                                         {'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'altTree'},
                                                                                                                                                                                                                             {'IdentifierName': 'altLabel'}]},
                                                                                                                                                                                           {'IdentifierName': 'Text'}]},
                                                                                                                                                         {'NullLiteralExpression': 'null'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LeftRecursiveRuleAltInfo'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'LeftRecursiveRuleAltInfo'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'alt'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'altText'}]},
                                                                                                                                                                              {'Argument': [{'NullLiteralExpression': 'null'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'altLabel'}]},
                                                                                                                                                                              {'Argument': [{'FalseLiteralExpression': 'false'}]},
                                                                                                                                                                              {'Argument': [{'IdentifierName': 'originalAltTree'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'prefixAndOtherAlts'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'a'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'name': {'identifier': 'dupTree'},
                                                                                            'scope': {'name': {'identifier': 'originalAltTree'}}},
                                                                             'type': {'name': {'identifier': 'AltAST'}}},
                                                             'name': {'identifier': 'altTree'},
                                                             'type': {'name': {'identifier': 'AltAST'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'altTree'}}],
                                              'name': {'identifier': 'stripAltLabel'}}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'altTree'}}],
                                                                             'name': {'identifier': 'text'}},
                                                             'name': {'identifier': 'altText'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {'condition': {'left': {'name': {'identifier': 'altLabel'},
                                                                                                    'scope': {'name': {'identifier': 'altTree'}}},
                                                                                           'operator': 'NOT_EQUALS',
                                                                                           'right': {}},
                                                                             'elseExpr': {},
                                                                             'thenExpr': {'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'altLabel'},
                                                                                                    'scope': {'name': {'identifier': 'altTree'}}}}},
                                                             'name': {'identifier': 'altLabel'},
                                                             'type': {'name': {'identifier': 'String'}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'alt'}},
                                                                                           {'name': {'identifier': 'altText'}},
                                                                                           {},
                                                                                           {'name': {'identifier': 'altLabel'}},
                                                                                           {'value': 'false'},
                                                                                           {'name': {'identifier': 'originalAltTree'}}],
                                                                             'type': {'name': {'identifier': 'LeftRecursiveRuleAltInfo'}}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'LeftRecursiveRuleAltInfo'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'a'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'prefixAndOtherAlts'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'Walk'},
                                                                      {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'CreateController'},
                                                                                                                                                                                            {'ArgumentList': '()'}]},
                                                                                                                                                                  {'IdentifierName': 'BuildVisitorOutputModel'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'header'}]}]}]}]},
                                                                                        {'Argument': [{'IdentifierName': 'header'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'header'}}],
                                                             'name': {'identifier': 'buildVisitorOutputModel'},
                                                             'scope': {'name': {'identifier': 'createController'}}},
                                                            {'name': {'identifier': 'header'}}],
                                              'name': {'identifier': 'walk'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'r'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'r'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'currentRule'}}}}]}},
 {'cs_ast': {'Block': [{'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'elems'},
                                                                                                   {'IdentifierName': 'Count'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'IfStatement': [{'InvocationExpression': [{'IdentifierName': 'match'},
                                                                                               {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'elems'},
                                                                                                                                                            {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]},
                                                                     {'ReturnStatement': [{'IdentifierName': 'i'}]}]}]}]},
                       {'ReturnStatement': [{'UnaryMinusExpression': [{'NumericLiteralExpression': '1'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'arguments': [{'name': {'identifier': 'i'}}],
                                                                                     'name': {'identifier': 'get'},
                                                                                     'scope': {'name': {'identifier': 'elems'}}}],
                                                                      'name': {'identifier': 'select'},
                                                                      'scope': {'name': {'identifier': 'filter'}}},
                                                        'thenStmt': {'expression': {'name': {'identifier': 'i'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'size'},
                                                     'scope': {'name': {'identifier': 'elems'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'expression': {'value': '1'},
                                              'operator': 'MINUS'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'actions'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'actionAST'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'ElementAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                           {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentAlt'}]}]}]},
                                                                                                                                              {'IdentifierName': 'actions'}]},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'actionAST'}]}]}]}]},
                       {'IfStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                    {'IdentifierName': 'IsLexer'}]},
                                                                  {'ArgumentList': '()'}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'DefineLexerAction'},
                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'actionAST'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'actionAST'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'actions'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'actionAST'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'actions'},
                                                        'scope': {'index': {'name': {'identifier': 'currentAlt'}},
                                                                  'name': {'name': {'identifier': 'alt'}}}}}},
                              {'condition': {'name': {'identifier': 'isLexer'},
                                             'scope': {'name': {'identifier': 'g'}}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'actionAST'}}],
                                                                           'name': {'identifier': 'defineLexerAction'}}}]}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'TerminalAST'}]}]},
                                                                               {'VariableDeclarator': 'xRefs'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                {'IdentifierName': 'tokenRefs'}]},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                                                                              {'IdentifierName': 'Text'}]}]},
                                                                                                              {'Argument': [{'IdentifierName': 'xRefs'}]}]}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'xRefs'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                          {'IdentifierName': 'tokenRefsInActions'}]},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'GrammarAST'}]}]},
                                                                               {'VariableDeclarator': 'rRefs'}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                {'IdentifierName': 'ruleRefs'}]},
                                                                                                                              {'IdentifierName': 'TryGetValue'}]},
                                                                                            {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                                                                              {'IdentifierName': 'Text'}]}]},
                                                                                                              {'Argument': [{'IdentifierName': 'rRefs'}]}]}]},
                                                                  {'NotEqualsExpression': [{'IdentifierName': 'rRefs'},
                                                                                           {'NullLiteralExpression': 'null'}]}]},
                                        {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'alt'},
                                                                                                                                                                          {'IdentifierName': 'ruleRefsInActions'}]},
                                                                                                                                        {'IdentifierName': 'Map'}]},
                                                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'x'},
                                                                                                                                                                        {'IdentifierName': 'Text'}]}]},
                                                                                                                        {'Argument': [{'IdentifierName': 'node'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'x'}}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'tokenRefs'},
                                                                                       'scope': {'name': {'identifier': 'alt'}}}},
                                                             'name': {'identifier': 'xRefs'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'TerminalAST'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'xRefs'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'x'}}},
                                                                                         {'name': {'identifier': 'node'}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'tokenRefsInActions'},
                                                                                     'scope': {'name': {'identifier': 'alt'}}}}}]}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                            'scope': {'name': {'identifier': 'x'}}}],
                                                                             'name': {'identifier': 'get'},
                                                                             'scope': {'name': {'identifier': 'ruleRefs'},
                                                                                       'scope': {'name': {'identifier': 'alt'}}}},
                                                             'name': {'identifier': 'rRefs'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'GrammarAST'}}]}}]}},
                              {'condition': {'left': {'name': {'identifier': 'rRefs'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                          'scope': {'name': {'identifier': 'x'}}},
                                                                                         {'name': {'identifier': 'node'}}],
                                                                           'name': {'identifier': 'map'},
                                                                           'scope': {'name': {'identifier': 'ruleRefsInActions'},
                                                                                     'scope': {'name': {'identifier': 'alt'}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'nonFragmentRuleCount'},
                                                                                {'NumericLiteralExpression': '0'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'nonFragmentRuleCount'}},
                                              'value': {'value': '0'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'terminals'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenIDRefs'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tokensDefs'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ID'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'terminals'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ID'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'tokenIDRefs'}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'ID'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'tokensDefs'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ttypes'},
                                                                                                                                                                                                                                    {'IdentifierName': 'Length'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'ttypes'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'labels'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'InvocationExpression': [{'IdentifierName': 'GetTokenTypeAsTargetLabel'},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                                                                                         {'Argument': [{'ElementAccessExpression': [{'IdentifierName': 'ttypes'},
                                                                                                                                                                                                    {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'labels'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'levels': [{'dimension': {'name': {'identifier': 'length'},
                                                                                                       'scope': {'name': {'identifier': 'ttypes'}}}}]},
                                                             'name': {'identifier': 'labels'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'labels'}}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'g'}},
                                                                                               {'index': {'name': {'identifier': 'i'}},
                                                                                                'name': {'name': {'identifier': 'ttypes'}}}],
                                                                                 'name': {'identifier': 'getTokenTypeAsTargetLabel'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'ttypes'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'labels'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'controller'},
                                                                                                        {'IdentifierName': 'GetRoot'}]},
                                                                      {'ArgumentList': '()'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'getRoot'},
                                              'scope': {'name': {'identifier': 'controller'}}}}]}},
 {'cs_ast': {'Block': [{'TryStatement': [{'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Stopwatch'},
                                                                                                            {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'Stopwatch'},
                                                                                                                                                                                                                       {'IdentifierName': 'StartNew'}]},
                                                                                                                                                                                     {'ArgumentList': '()'}]}]}]}]}]},
                                                    {'UsingStatement': [{'VariableDeclaration': [{'IdentifierName': 'TextWriter'},
                                                                                                 {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                                                                                            {'IdentifierName': 'GetOutputFileWriter'}]},
                                                                                                                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'g'}]},
                                                                                                                                                                                            {'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]}]},
                                                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'ITemplateWriter'},
                                                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'AutoIndentWriter'},
                                                                                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'w'}]}]}]}]}]}]}]},
                                                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'wr'},
                                                                                                                                                                              {'IdentifierName': 'LineWidth'}]},
                                                                                                                                            {'IdentifierName': 'lineWidth'}]}]},
                                                                                   {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'code'},
                                                                                                                                                                        {'IdentifierName': 'Write'}]},
                                                                                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'wr'}]}]}]}]}]}]},
                                                    {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'stopwatch'},
                                                                                                                                         {'IdentifierName': 'Stop'}]},
                                                                                                       {'ArgumentList': '()'}]}]}]},
                                         {'CatchClause': [{'CatchDeclaration': [{'IdentifierName': 'IOException'}]},
                                                          {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'tool'},
                                                                                                                                                                                            {'IdentifierName': 'errMgr'}]},
                                                                                                                                                          {'IdentifierName': 'ToolError'}]},
                                                                                                                        {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ErrorType'},
                                                                                                                                                                                          {'IdentifierName': 'CANNOT_WRITE_FILE'}]}]},
                                                                                                                                          {'Argument': [{'IdentifierName': 'ioe'}]},
                                                                                                                                          {'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'catchClauses': [{'body': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'CANNOT_WRITE_FILE'},
                                                                                                        'scope': {'name': {'identifier': 'ErrorType'}}},
                                                                                                       {'name': {'identifier': 'ioe'}},
                                                                                                       {'name': {'identifier': 'fileName'}}],
                                                                                         'name': {'identifier': 'toolError'},
                                                                                         'scope': {'name': {'identifier': 'errMgr'},
                                                                                                   'scope': {'name': {'identifier': 'tool'}}}}}]},
                                                 'parameter': {'isVarArgs': 'false',
                                                               'name': {'identifier': 'ioe'},
                                                               'type': {'name': {'identifier': 'IOException'}}}}],
                               'tryBlock': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'g'}},
                                                                                                                        {'name': {'identifier': 'fileName'}}],
                                                                                                          'name': {'identifier': 'getOutputFileWriter'},
                                                                                                          'scope': {'name': {'identifier': 'tool'}}},
                                                                                          'name': {'identifier': 'w'},
                                                                                          'type': {'name': {'identifier': 'Writer'}}}]}},
                                                           {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'w'}}],
                                                                                                          'type': {'name': {'identifier': 'AutoIndentWriter'}}},
                                                                                          'name': {'identifier': 'wr'},
                                                                                          'type': {'name': {'identifier': 'STWriter'}}}]}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'lineWidth'}}],
                                                                           'name': {'identifier': 'setLineWidth'},
                                                                           'scope': {'name': {'identifier': 'wr'}}}},
                                                           {'expression': {'arguments': [{'name': {'identifier': 'wr'}}],
                                                                           'name': {'identifier': 'write'},
                                                                           'scope': {'name': {'identifier': 'code'}}}},
                                                           {'expression': {'name': {'identifier': 'close'},
                                                                           'scope': {'name': {'identifier': 'w'}}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'ast'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ast'},
                                                                                               {'IdentifierName': 'tokenStream'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'ast'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'tokenStream'},
                                                           'scope': {'name': {'identifier': 'ast'}}}}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetCodeGenerator'},
                                                                                                                                      {'ArgumentList': '()'}]},
                                                                                                            {'IdentifierName': 'Write'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'outputFileST'}]},
                                                                                            {'Argument': [{'IdentifierName': 'fileName'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'outputFileST'}},
                                                            {'name': {'identifier': 'fileName'}}],
                                              'name': {'identifier': 'write'},
                                              'scope': {'name': {'identifier': 'getCodeGenerator'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'IdentifierName': 'TokenRef'},
                                                                      {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                        {'Argument': [{'IdentifierName': 'label'}]},
                                                                                        {'Argument': [{'NullLiteralExpression': 'null'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ID'}},
                                                            {'name': {'identifier': 'label'}},
                                                            {}],
                                              'name': {'identifier': 'tokenRef'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'obj'},
                                                              {'ThisExpression': 'this'}]},
                                        {'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'obj'},
                                                                                                                 {'IdentifierName': 'AltLabelStructDecl'}]}]}]},
                                        {'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'AltLabelStructDecl'},
                                                                                                                                                                                         {'IdentifierName': 'obj'}]}]},
                                                                                                                                        {'IdentifierName': 'name'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'obj'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'value': 'true'}}},
                              {'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                      'type': {'name': {'identifier': 'AltLabelStructDecl'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'expression': {'value': 'false'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                                 'type': {'name': {'identifier': 'AltLabelStructDecl'}}}}}],
                                              'name': {'identifier': 'equals'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'NotAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'NotAST'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'LabelElementPair'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetAnyLabelDef'},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                               {'NullLiteralExpression': 'null'}]},
                                                                      {'ParenthesizedExpression': [{'LogicalOrExpression': [{'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'RULE_LABEL'}]}]},
                                                                                                                            {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'anyLabelDef'},
                                                                                                                                                                                    {'IdentifierName': 'type'}]},
                                                                                                                                                  {'SimpleMemberAccessExpression': [{'IdentifierName': 'LabelType'},
                                                                                                                                                                                    {'IdentifierName': 'TOKEN_LABEL'}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'x'}}],
                                                                             'name': {'identifier': 'getAnyLabelDef'}},
                                                             'name': {'identifier': 'anyLabelDef'},
                                                             'type': {'name': {'identifier': 'LabelElementPair'}}}]}},
                              {'expression': {'left': {'left': {'name': {'identifier': 'anyLabelDef'}},
                                                       'operator': 'NOT_EQUALS',
                                                       'right': {}},
                                              'operator': 'AND',
                                              'right': {'inner': {'left': {'left': {'name': {'identifier': 'type'},
                                                                                    'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                           'operator': 'EQUALS',
                                                                           'right': {'name': {'identifier': 'RULE_LABEL'},
                                                                                     'scope': {'name': {'identifier': 'LabelType'}}}},
                                                                  'operator': 'OR',
                                                                  'right': {'left': {'name': {'identifier': 'type'},
                                                                                     'scope': {'name': {'identifier': 'anyLabelDef'}}},
                                                                            'operator': 'EQUALS',
                                                                            'right': {'name': {'identifier': 'TOKEN_LABEL'},
                                                                                      'scope': {'name': {'identifier': 'LabelType'}}}}}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'InternalError'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'error'}]},
                                                                                            {'Argument': [{'IdentifierName': 'e'}]}]}]}]},
                       {'ThrowStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'Exception'},
                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'error'}]},
                                                                                           {'Argument': [{'IdentifierName': 'e'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'error'}},
                                                            {'name': {'identifier': 'e'}}],
                                              'name': {'identifier': 'internalError'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'error'}},
                                                            {'name': {'identifier': 'e'}}],
                                              'type': {'name': {'identifier': 'RuntimeException'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'locals'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'locals'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'QualifiedName': [{'IdentifierName': 'Decl'},
                                                                                                                                                                                         {'IdentifierName': 'Decl'}]}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'locals'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'd'}]}]}]}]},
                       {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'd'},
                                                                                                                  {'IdentifierName': 'isLocal'}]},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'locals'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'locals'}},
                                                           'value': {'type': {'name': {'identifier': 'OrderedHashSet'},
                                                                              'typeArguments': [{'name': {'identifier': 'Decl'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'd'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'locals'}}}},
                              {'expression': {'operator': 'ASSIGN',
                                              'target': {'name': {'identifier': 'isLocal'},
                                                         'scope': {'name': {'identifier': 'd'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'SetAST'},
                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'type': {'name': {'identifier': 'SetAST'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'AddToLabelList'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'NullLiteralExpression': 'null'}]}]}]}]},
                       {'IfStatement': [{'LogicalAndExpression': [{'NotEqualsExpression': [{'IdentifierName': 'label'},
                                                                                           {'NullLiteralExpression': 'null'}]},
                                                                  {'EqualsExpression': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'label'},
                                                                                                                                                            {'IdentifierName': 'Parent'}]},
                                                                                                                          {'IdentifierName': 'Type'}]},
                                                                                        {'SimpleMemberAccessExpression': [{'IdentifierName': 'ANTLRParser'},
                                                                                                                          {'IdentifierName': 'PLUS_ASSIGN'}]}]}]},
                                        {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                           {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'InvocationExpression': [{'IdentifierName': 'GetTarget'},
                                                                                                                                                                                                                                                {'ArgumentList': '()'}]},
                                                                                                                                                                                                                      {'IdentifierName': 'GetListLabel'}]},
                                                                                                                                                                                    {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'label'},
                                                                                                                                                                                                                                                      {'IdentifierName': 'Text'}]}]}]}]}]}]}]}]},
                                                   {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'labelOp'},
                                                                                                            {'ObjectCreationExpression': [{'IdentifierName': 'AddToLabelList'},
                                                                                                                                          {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]},
                                                                                                                                                            {'Argument': [{'IdentifierName': 'listLabel'}]},
                                                                                                                                                            {'Argument': [{'ElementAccessExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'op'},
                                                                                                                                                                                                                                                                   {'IdentifierName': 'GetLabels'}]},
                                                                                                                                                                                                                                 {'ArgumentList': '()'}]},
                                                                                                                                                                                                       {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'labelOp'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {},
                                                             'name': {'identifier': 'labelOp'},
                                                             'type': {'name': {'identifier': 'AddToLabelList'}}}]}},
                              {'condition': {'left': {'left': {'name': {'identifier': 'label'}},
                                                      'operator': 'NOT_EQUALS',
                                                      'right': {}},
                                             'operator': 'AND',
                                             'right': {'left': {'name': {'identifier': 'getType'},
                                                                'scope': {'name': {'identifier': 'parent'},
                                                                          'scope': {'name': {'identifier': 'label'}}}},
                                                       'operator': 'EQUALS',
                                                       'right': {'name': {'identifier': 'PLUS_ASSIGN'},
                                                                 'scope': {'name': {'identifier': 'ANTLRParser'}}}}},
                               'thenStmt': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'getText'},
                                                                                                                         'scope': {'name': {'identifier': 'label'}}}],
                                                                                                          'name': {'identifier': 'getListLabel'},
                                                                                                          'scope': {'name': {'identifier': 'getTarget'},
                                                                                                                    'scope': {'name': {'identifier': 'gen'}}}},
                                                                                          'name': {'identifier': 'listLabel'},
                                                                                          'type': {'name': {'identifier': 'String'}}}]}},
                                                           {'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'labelOp'}},
                                                                           'value': {'arguments': [{},
                                                                                                   {'name': {'identifier': 'listLabel'}},
                                                                                                   {'arguments': [{'value': '0'}],
                                                                                                    'name': {'identifier': 'get'},
                                                                                                    'scope': {'name': {'identifier': 'getLabels'},
                                                                                                              'scope': {'name': {'identifier': 'op'}}}}],
                                                                                     'type': {'name': {'identifier': 'AddToLabelList'}}}}}]}},
                              {'expression': {'name': {'identifier': 'labelOp'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'SimpleMemberAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'grammar'},
                                                                                                                {'IdentifierName': 'tool'}]},
                                                                              {'IdentifierName': 'errMgr'}]}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errMgr'},
                                              'scope': {'name': {'identifier': 'tool'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                        {'IdentifierName': 'Visit'}]},
                                                                      {'ArgumentList': [{'Argument': [{'ThisExpression': 'this'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'nodes'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                                            {'ArgumentList': '()'}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'T'},
                                             {'IdentifierName': 'nodes'},
                                             {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'a'},
                                                                                                                                  {'IdentifierName': 'Add'}]},
                                                                                                {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 't'},
                                                                                                                                                                  {'IdentifierName': 'Text'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'a'}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'nodes'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {}}},
                              {'expression': {'variables': [{'initializer': {'type': {'name': {'identifier': 'ArrayList'},
                                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}},
                                                             'name': {'identifier': 'a'},
                                                             'type': {'name': {'identifier': 'List'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}]}},
                              {'body': {'expression': {'arguments': [{'name': {'identifier': 'getText'},
                                                                      'scope': {'name': {'identifier': 't'}}}],
                                                       'name': {'identifier': 'add'},
                                                       'scope': {'name': {'identifier': 'a'}}}},
                               'iterable': {'name': {'identifier': 'nodes'}},
                               'variable': {'variables': [{'name': {'identifier': 't'},
                                                           'type': {'name': {'identifier': 'T'}}}]}},
                              {'expression': {'name': {'identifier': 'a'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'chunks'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'ActionText'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'nodeContext'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'text'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'nodeContext'}},
                                                                           {'name': {'identifier': 'text'}}],
                                                             'type': {'name': {'identifier': 'ActionText'}}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'chunks'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'e'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'e'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'IdentifierName': 'AUTO_GENERATED_TOKEN_NAME_PREFIX'},
                                                               {'PostIncrementExpression': [{'IdentifierName': 'stringLiteralRuleNumber'}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'name': {'identifier': 'AUTO_GENERATED_TOKEN_NAME_PREFIX'}},
                                              'operator': 'PLUS',
                                              'right': {'expression': {'name': {'identifier': 'stringLiteralRuleNumber'}},
                                                        'operator': 'POSTFIX_INCREMENT'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'blk'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'blk'}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'tree'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': 'return;'}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Antlr'},
                                                                                                                                        {'IdentifierName': 'Runtime'}]},
                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'object'},
                                                                                                                                         {'PredefinedType': 'object'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleLambdaExpression': [{'Parameter': 't'},
                                                                                                                                                          {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                                                                                                                                                                                 {'IdentifierName': 't'}]}]},
                                                                                                                                                                                                                                                                {'IdentifierName': 'g'}]},
                                                                                                                                                                                                                              {'IdentifierName': 'g'}]}]},
                                                                                                                                                                     {'ReturnStatement': [{'IdentifierName': 't'}]}]}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'QualifiedName': [{'QualifiedName': [{'QualifiedName': [{'IdentifierName': 'Antlr'},
                                                                                                                                        {'IdentifierName': 'Runtime'}]},
                                                                                                                     {'IdentifierName': 'Misc'}]},
                                                                                                  {'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'object'},
                                                                                                                                         {'PredefinedType': 'object'}]}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleLambdaExpression': [{'Parameter': 't'},
                                                                                                                                                          {'IdentifierName': 't'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'TreeVisitor'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ObjectCreationExpression': [{'IdentifierName': 'TreeVisitor'},
                                                                                                                                                            {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'GrammarASTAdaptor'},
                                                                                                                                                                                                                          {'ArgumentList': '()'}]}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'v'},
                                                                                                            {'IdentifierName': 'Visit'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'tree'}]},
                                                                                            {'Argument': [{'ObjectCreationExpression': [{'IdentifierName': 'TreeVisitorAction'},
                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'preAction'}]},
                                                                                                                                                          {'Argument': [{'IdentifierName': 'postAction'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'tree'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {}},
                              {'expression': {'variables': [{'initializer': {'arguments': [{'type': {'name': {'identifier': 'GrammarASTAdaptor'}}}],
                                                                             'type': {'name': {'identifier': 'TreeVisitor'}}},
                                                             'name': {'identifier': 'v'},
                                                             'type': {'name': {'identifier': 'TreeVisitor'}}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'tree'}},
                                                            {'anonymousClassBody': [{'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                                                                             'target': {'name': {'identifier': 'g'},
                                                                                                                                        'scope': {'inner': {'expression': {'name': {'identifier': 't'}},
                                                                                                                                                            'type': {'name': {'identifier': 'GrammarAST'}}}}},
                                                                                                                             'value': {'name': {'identifier': 'g'}}}},
                                                                                                             {'expression': {'name': {'identifier': 't'}}}]},
                                                                                     'name': {'identifier': 'pre'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 't'},
                                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                                                     'type': {'name': {'identifier': 'Object'}}},
                                                                                    {'annotations': [{'name': {'identifier': 'Override'}}],
                                                                                     'body': {'statements': [{'expression': {'name': {'identifier': 't'}}}]},
                                                                                     'name': {'identifier': 'post'},
                                                                                     'parameters': [{'isVarArgs': 'false',
                                                                                                     'name': {'identifier': 't'},
                                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                                                     'type': {'name': {'identifier': 'Object'}}}],
                                                             'type': {'name': {'identifier': 'TreeVisitorAction'}}}],
                                              'name': {'identifier': 'visit'},
                                              'scope': {'name': {'identifier': 'v'}}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Choice'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'GetEBNFBlock'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ebnfRoot'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'alts'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'c'},
                                                                                                      {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                                  {'IdentifierName': 'GetEBNFBlock'}]},
                                                                                                                                {'ArgumentList': [{'Argument': [{'IdentifierName': 'c'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'c'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ebnfRoot'}},
                                                                                           {'name': {'identifier': 'alts'}}],
                                                                             'name': {'identifier': 'getEBNFBlock'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'c'},
                                                             'type': {'name': {'identifier': 'Choice'}}}]}},
                              {'body': {'expression': {'operator': 'ASSIGN',
                                                       'target': {'name': {'identifier': 'c'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'c'}}],
                                                                 'name': {'identifier': 'getEBNFBlock'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'c'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]},
  'java_ast': {'statements': [{'expression': {'value': 'false'}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'IdentifierName': 'GetMaxTokenType'},
                                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'LocalDeclarationStatement': [{'VariableDeclaration': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                              {'ArrayRankSpecifier': [{'OmittedArraySizeExpression': ''}]}]},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'ArrayCreationExpression': [{'ArrayType': [{'PredefinedType': 'string'},
                                                                                                                                                                          {'ArrayRankSpecifier': [{'AddExpression': [{'IdentifierName': 'numTokens'},
                                                                                                                                                                                                                     {'NumericLiteralExpression': '1'}]}]}]}]}]}]}]}]},
                       {'ForStatement': [{'VariableDeclaration': [{'PredefinedType': 'int'},
                                                                  {'VariableDeclarator': [{'EqualsValueClause': [{'NumericLiteralExpression': '0'}]}]}]},
                                         {'LessThanExpression': [{'IdentifierName': 'i'},
                                                                 {'SimpleMemberAccessExpression': [{'IdentifierName': 'tokenNames'},
                                                                                                   {'IdentifierName': 'Length'}]}]},
                                         {'PostIncrementExpression': [{'IdentifierName': 'i'}]},
                                         {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'ElementAccessExpression': [{'IdentifierName': 'tokenNames'},
                                                                                                                                          {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]},
                                                                                                             {'InvocationExpression': [{'IdentifierName': 'GetTokenDisplayName'},
                                                                                                                                       {'ArgumentList': [{'Argument': [{'IdentifierName': 'i'}]}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'tokenNames'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getMaxTokenType'}},
                                                             'name': {'identifier': 'numTokens'},
                                                             'type': {'type': 'INT'}}]}},
                              {'expression': {'variables': [{'initializer': {'elementType': {'name': {'identifier': 'String'}},
                                                                             'levels': [{'dimension': {'left': {'name': {'identifier': 'numTokens'}},
                                                                                                       'operator': 'PLUS',
                                                                                                       'right': {'value': '1'}}}]},
                                                             'name': {'identifier': 'tokenNames'},
                                                             'type': {'componentType': {'name': {'identifier': 'String'}},
                                                                      'origin': 'TYPE'}}]}},
                              {'body': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                       'target': {'index': {'name': {'identifier': 'i'}},
                                                                                  'name': {'name': {'identifier': 'tokenNames'}}},
                                                                       'value': {'arguments': [{'name': {'identifier': 'i'}}],
                                                                                 'name': {'identifier': 'getTokenDisplayName'}}}}]},
                               'compare': {'left': {'name': {'identifier': 'i'}},
                                           'operator': 'LESS',
                                           'right': {'name': {'identifier': 'length'},
                                                     'scope': {'name': {'identifier': 'tokenNames'}}}},
                               'initialization': [{'variables': [{'initializer': {'value': '0'},
                                                                  'name': {'identifier': 'i'},
                                                                  'type': {'type': 'INT'}}]}],
                               'update': [{'expression': {'name': {'identifier': 'i'}},
                                           'operator': 'POSTFIX_INCREMENT'}]},
                              {'expression': {'name': {'identifier': 'tokenNames'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'AddExpression': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'PredefinedType': 'char'},
                                                                                                                           {'IdentifierName': 'ToUpper'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'ElementAccessExpression': [{'IdentifierName': 's'},
                                                                                                                                                      {'BracketedArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]},
                                                               {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 's'},
                                                                                                                           {'IdentifierName': 'Substring'}]},
                                                                                         {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '1'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'arguments': [{'arguments': [{'value': '0'}],
                                                                      'name': {'identifier': 'charAt'},
                                                                      'scope': {'name': {'identifier': 's'}}}],
                                                       'name': {'identifier': 'toUpperCase'},
                                                       'scope': {'name': {'identifier': 'Character'}}},
                                              'operator': 'PLUS',
                                              'right': {'arguments': [{'value': '1'}],
                                                        'name': {'identifier': 'substring'},
                                                        'scope': {'name': {'identifier': 's'}}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'valueAST'},
                                                          {'IdentifierName': 'ActionAST'}]},
                                        {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'ActionAST'},
                                                                                                                                                                                               {'IdentifierName': 'valueAST'}]}]},
                                                                                                                                              {'IdentifierName': 'resolver'}]},
                                                                                                            {'ElementAccessExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'currentRule'},
                                                                                                                                                                           {'IdentifierName': 'alt'}]},
                                                                                                                                         {'BracketedArgumentList': [{'Argument': [{'IdentifierName': 'currentOuterAltNumber'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'expression': {'name': {'identifier': 'valueAST'}},
                                             'type': {'name': {'identifier': 'ActionAST'}}},
                               'thenStmt': {'statements': [{'expression': {'operator': 'ASSIGN',
                                                                           'target': {'name': {'identifier': 'resolver'},
                                                                                      'scope': {'inner': {'expression': {'name': {'identifier': 'valueAST'}},
                                                                                                          'type': {'name': {'identifier': 'ActionAST'}}}}},
                                                                           'value': {'index': {'name': {'identifier': 'currentOuterAltNumber'}},
                                                                                     'name': {'name': {'identifier': 'alt'},
                                                                                              'scope': {'name': {'identifier': 'currentRule'}}}}}}]}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'VisitGrammar'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'ast'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'ast'}}],
                                              'name': {'identifier': 'visitGrammar'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'TrackRef'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'x'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'ProcessNested'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'rhs'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'x'}}],
                                              'name': {'identifier': 'trackRef'}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'rhs'}}],
                                              'name': {'identifier': 'processNested'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'currentBlock'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'currentBlock'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'NumericLiteralExpression': '64'}]}]},
  'java_ast': {'statements': [{'expression': {'value': '64'}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'PredefinedType': 'string'}]}]},
                                                                                                                                        {'ArgumentList': '()'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'type': {'name': {'identifier': 'FrequencySet'},
                                                                      'typeArguments': [{'name': {'identifier': 'String'}}]}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'currentOuterMostAlternativeBlock'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'currentOuterMostAlternativeBlock'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'IdentifierName': 'GrammarAST'},
                                             {'SimpleMemberAccessExpression': [{'IdentifierName': 'collector'},
                                                                               {'IdentifierName': 'rulerefs'}]},
                                             {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'string'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@ref'},
                                                                                                                                                                                                 {'IdentifierName': 'Text'}]}]}]}]}]},
                                                        {'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'Rule'},
                                                                                                                {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'g'},
                                                                                                                                                                                                                           {'IdentifierName': 'GetRule'}]},
                                                                                                                                                                                         {'ArgumentList': [{'Argument': [{'IdentifierName': 'ruleName'}]}]}]}]}]}]}]},
                                                        {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'r'},
                                                                                                  {'NullLiteralExpression': 'null'}]},
                                                                         {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'r'},
                                                                                                                                                                    {'IdentifierName': 'isStartRule'}]},
                                                                                                                                  {'FalseLiteralExpression': 'false'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'expression': {'variables': [{'initializer': {'name': {'identifier': 'getText'},
                                                                                                      'scope': {'name': {'identifier': 'ref'}}},
                                                                                      'name': {'identifier': 'ruleName'},
                                                                                      'type': {'name': {'identifier': 'String'}}}]}},
                                                       {'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ruleName'}}],
                                                                                                      'name': {'identifier': 'getRule'},
                                                                                                      'scope': {'name': {'identifier': 'g'}}},
                                                                                      'name': {'identifier': 'r'},
                                                                                      'type': {'name': {'identifier': 'Rule'}}}]}},
                                                       {'condition': {'left': {'name': {'identifier': 'r'}},
                                                                      'operator': 'NOT_EQUALS',
                                                                      'right': {}},
                                                        'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                                                    'target': {'name': {'identifier': 'isStartRule'},
                                                                                               'scope': {'name': {'identifier': 'r'}}},
                                                                                    'value': {'value': 'false'}}}}]},
                               'iterable': {'name': {'identifier': 'rulerefs'},
                                            'scope': {'name': {'identifier': 'collector'}}},
                               'variable': {'variables': [{'name': {'identifier': 'ref'},
                                                           'type': {'name': {'identifier': 'GrammarAST'}}}]}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'ThisExpression': 'this'},
                                                              {'IdentifierName': 'obj'}]},
                                        {'Block': [{'ReturnStatement': [{'TrueLiteralExpression': 'true'}]}]}]},
                       {'IfStatement': [{'LogicalNotExpression': [{'ParenthesizedExpression': [{'IsExpression': [{'IdentifierName': 'obj'},
                                                                                                                 {'IdentifierName': 'Rule'}]}]}]},
                                        {'Block': [{'ReturnStatement': [{'FalseLiteralExpression': 'false'}]}]}]},
                       {'ReturnStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'name'},
                                                                                                        {'IdentifierName': 'Equals'}]},
                                                                      {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'ParenthesizedExpression': [{'CastExpression': [{'IdentifierName': 'Rule'},
                                                                                                                                                                                         {'IdentifierName': 'obj'}]}]},
                                                                                                                                        {'IdentifierName': 'name'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {},
                                             'operator': 'EQUALS',
                                             'right': {'name': {'identifier': 'obj'}}},
                               'thenStmt': {'statements': [{'expression': {'value': 'true'}}]}},
                              {'condition': {'expression': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                      'type': {'name': {'identifier': 'Rule'}}}},
                                             'operator': 'LOGICAL_COMPLEMENT'},
                               'thenStmt': {'statements': [{'expression': {'value': 'false'}}]}},
                              {'expression': {'arguments': [{'name': {'identifier': 'name'},
                                                             'scope': {'inner': {'expression': {'name': {'identifier': 'obj'}},
                                                                                 'type': {'name': {'identifier': 'Rule'}}}}}],
                                              'name': {'identifier': 'equals'},
                                              'scope': {'name': {'identifier': 'name'}}}}]}},
 {'cs_ast': {'Block': [{'IfStatement': [{'EqualsExpression': [{'IdentifierName': 'preamble'},
                                                              {'NullLiteralExpression': 'null'}]},
                                        {'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'preamble'},
                                                                                                 {'ObjectCreationExpression': [{'GenericName': [{'TypeArgumentList': [{'IdentifierName': 'SrcOp'}]}]},
                                                                                                                               {'ArgumentList': '()'}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'preamble'},
                                                                                                            {'IdentifierName': 'Add'}]},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'op'}]}]}]}]}]},
  'java_ast': {'statements': [{'condition': {'left': {'name': {'identifier': 'preamble'}},
                                             'operator': 'EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'operator': 'ASSIGN',
                                                           'target': {'name': {'identifier': 'preamble'}},
                                                           'value': {'type': {'name': {'identifier': 'ArrayList'},
                                                                              'typeArguments': [{'name': {'identifier': 'SrcOp'}}]}}}}},
                              {'expression': {'arguments': [{'name': {'identifier': 'op'}}],
                                              'name': {'identifier': 'add'},
                                              'scope': {'name': {'identifier': 'preamble'}}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'ObjectCreationExpression': [{'IdentifierName': 'ThrowNoViableAlt'},
                                                                          {'ArgumentList': [{'Argument': [{'IdentifierName': 'factory'}]},
                                                                                            {'Argument': [{'IdentifierName': 'blkAST'}]},
                                                                                            {'Argument': [{'IdentifierName': 'expecting'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'factory'}},
                                                            {'name': {'identifier': 'blkAST'}},
                                                            {'name': {'identifier': 'expecting'}}],
                                              'type': {'name': {'identifier': 'ThrowNoViableAlt'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckOptions'},
                                                                          {'ArgumentList': [{'Argument': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                              {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                                                                          {'IdentifierName': 'GetAncestor'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'BLOCK'}]}]}]}]}]},
                                                                                            {'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]},
                                                                                            {'Argument': [{'IdentifierName': 'valueAST'}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'expression': {'arguments': [{'name': {'identifier': 'BLOCK'}}],
                                                                            'name': {'identifier': 'getAncestor'},
                                                                            'scope': {'name': {'identifier': 'ID'}}},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}},
                                                            {'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}},
                                                            {'name': {'identifier': 'valueAST'}}],
                                              'name': {'identifier': 'checkOptions'}}}]}},
 {'cs_ast': {'Block': [{'ForEachStatement': [{'PredefinedType': 'object'},
                                             {'IdentifierName': 'ops'},
                                             {'Block': [{'IfStatement': [{'IsExpression': [{'IdentifierName': 'o'},
                                                                                           {'IdentifierName': 'T'}]},
                                                                         {'ReturnStatement': [{'CastExpression': [{'IdentifierName': 'T'},
                                                                                                                  {'IdentifierName': 'o'}]}]}]}]}]},
                       {'ReturnStatement': [{'DefaultExpression': [{'IdentifierName': 'T'}]}]}]},
  'java_ast': {'statements': [{'body': {'statements': [{'condition': {'arguments': [{'name': {'identifier': 'o'}}],
                                                                      'name': {'identifier': 'isInstance'},
                                                                      'scope': {'name': {'identifier': 'cl'}}},
                                                        'thenStmt': {'expression': {'arguments': [{'name': {'identifier': 'o'}}],
                                                                                    'name': {'identifier': 'cast'},
                                                                                    'scope': {'name': {'identifier': 'cl'}}}}}]},
                               'iterable': {'name': {'identifier': 'ops'}},
                               'variable': {'variables': [{'name': {'identifier': 'o'},
                                                           'type': {'name': {'identifier': 'Object'}}}]}},
                              {'expression': {}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'language'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'language'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'PredefinedType': 'bool'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': '@delegate'},
                                                                                                                                                                                          {'IdentifierName': 'NeedsImplicitLabel'}]},
                                                                                                                                                        {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                                                          {'Argument': [{'IdentifierName': 'op'}]}]}]}]}]}]}]},
                       {'ForEachStatement': [{'IdentifierName': 'CodeGeneratorExtension'},
                                             {'IdentifierName': 'extensions'},
                                             {'ExpressionStatement': [{'OrAssignmentExpression': [{'IdentifierName': 'needs'},
                                                                                                  {'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ext'},
                                                                                                                                                              {'IdentifierName': 'NeedsImplicitLabel'}]},
                                                                                                                            {'ArgumentList': [{'Argument': [{'IdentifierName': 'ID'}]},
                                                                                                                                              {'Argument': [{'IdentifierName': 'op'}]}]}]}]}]}]},
                       {'ReturnStatement': [{'IdentifierName': 'needs'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                                           {'name': {'identifier': 'op'}}],
                                                                             'name': {'identifier': 'needsImplicitLabel'},
                                                                             'scope': {'name': {'identifier': 'delegate'}}},
                                                             'name': {'identifier': 'needs'},
                                                             'type': {'type': 'BOOLEAN'}}]}},
                              {'body': {'expression': {'operator': 'BINARY_OR',
                                                       'target': {'name': {'identifier': 'needs'}},
                                                       'value': {'arguments': [{'name': {'identifier': 'ID'}},
                                                                               {'name': {'identifier': 'op'}}],
                                                                 'name': {'identifier': 'needsImplicitLabel'},
                                                                 'scope': {'name': {'identifier': 'ext'}}}}},
                               'iterable': {'name': {'identifier': 'extensions'}},
                               'variable': {'variables': [{'name': {'identifier': 'ext'},
                                                           'type': {'name': {'identifier': 'CodeGeneratorExtension'}}}]}},
                              {'expression': {'name': {'identifier': 'needs'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineAndClip'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'frequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]},
                       {'ExpressionStatement': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                            {'IdentifierName': 'Push'}]},
                                                                          {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'IdentifierName': 'CombineAndClip'},
                                                                                                                                    {'ArgumentList': [{'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'InvocationExpression': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'minFrequencies'},
                                                                                                                                                                                                                                {'IdentifierName': 'Pop'}]},
                                                                                                                                                                                              {'ArgumentList': '()'}]}]},
                                                                                                                                                      {'Argument': [{'NumericLiteralExpression': '2'}]}]}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'frequencies'}}},
                                                                           {'value': '2'}],
                                                             'name': {'identifier': 'combineAndClip'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'frequencies'}}}},
                              {'expression': {'arguments': [{'arguments': [{'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'name': {'identifier': 'pop'},
                                                                            'scope': {'name': {'identifier': 'minFrequencies'}}},
                                                                           {'value': '2'}],
                                                             'name': {'identifier': 'combineAndClip'}}],
                                              'name': {'identifier': 'push'},
                                              'scope': {'name': {'identifier': 'minFrequencies'}}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'InvocationExpression': [{'IdentifierName': 'CheckChannelDefinition'},
                                                                          {'ArgumentList': [{'Argument': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'ID'},
                                                                                                                                            {'IdentifierName': 'Token'}]}]}]}]}]}]},
  'java_ast': {'statements': [{'expression': {'arguments': [{'name': {'identifier': 'token'},
                                                             'scope': {'name': {'identifier': 'ID'}}}],
                                              'name': {'identifier': 'checkChannelDefinition'}}}]}},
 {'cs_ast': {'Block': [{'ExpressionStatement': [{'SimpleAssignmentExpression': [{'IdentifierName': 'dependent'},
                                                                                {'TrueLiteralExpression': 'true'}]}]}]},
  'java_ast': {'statements': [{'expression': {'operator': 'ASSIGN',
                                              'target': {'index': {'value': '0'},
                                                         'name': {'name': {'identifier': 'dependent'}}},
                                              'value': {'value': 'true'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'IdentifierName': 'errMgr'}]}]},
  'java_ast': {'statements': [{'expression': {'name': {'identifier': 'errMgr'}}}]}},
 {'cs_ast': {'Block': [{'ReturnStatement': [{'DivideExpression': [{'NumericLiteralExpression': '65535'},
                                                                  {'NumericLiteralExpression': '3'}]}]}]},
  'java_ast': {'statements': [{'expression': {'left': {'value': '65535'},
                                              'operator': 'DIVIDE',
                                              'right': {'value': '3'}}}]}},
 {'cs_ast': {'Block': [{'LocalDeclarationStatement': [{'VariableDeclaration': [{'IdentifierName': 'GrammarAST'},
                                                                               {'VariableDeclarator': [{'EqualsValueClause': [{'CastExpression': [{'IdentifierName': 'GrammarAST'},
                                                                                                                                                  {'InvocationExpression': [{'IdentifierName': 'GetChild'},
                                                                                                                                                                            {'ArgumentList': [{'Argument': [{'NumericLiteralExpression': '0'}]}]}]}]}]}]}]}]},
                       {'IfStatement': [{'NotEqualsExpression': [{'IdentifierName': 'nameNode'},
                                                                 {'NullLiteralExpression': 'null'}]},
                                        {'ReturnStatement': [{'SimpleMemberAccessExpression': [{'IdentifierName': 'nameNode'},
                                                                                               {'IdentifierName': 'Text'}]}]}]},
                       {'ReturnStatement': [{'NullLiteralExpression': 'null'}]}]},
  'java_ast': {'statements': [{'expression': {'variables': [{'initializer': {'expression': {'arguments': [{'value': '0'}],
                                                                                            'name': {'identifier': 'getChild'}},
                                                                             'type': {'name': {'identifier': 'GrammarAST'}}},
                                                             'name': {'identifier': 'nameNode'},
                                                             'type': {'name': {'identifier': 'GrammarAST'}}}]}},
                              {'condition': {'left': {'name': {'identifier': 'nameNode'}},
                                             'operator': 'NOT_EQUALS',
                                             'right': {}},
                               'thenStmt': {'expression': {'name': {'identifier': 'getText'},
                                                           'scope': {'name': {'identifier': 'nameNode'}}}}},
                              {'expression': {}}]}}]
